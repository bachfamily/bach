<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.classify" module="bach">

	<digest>
		Arrange elements into classes
	</digest>

	<description>
		Arranges elements into classes, according to a custom equality test.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				llll to be classified
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Lambda Inlet
			</digest>
			<description>
				Result of the equality test: 1 if equal, 0 if not.
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				llll with grouped equal elements
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Lambda Outlet 1
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Lambda Outlet 2
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(doubleclick)">
			<arglist />
			<digest>
				Edit bell code for <m>lambda</m> attribute
			</digest>
			<description>
				Doubleclicking on the object forces a text editor to open up, where the bell code
				for the <m>lambda</m> attribute can be edited directly.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Perform last operation
			</digest>
			<description>
				A bang in the first inlet causes the result of classification of the most recently received llll to be output. <br />
				<br /> N.B.: The object is not aware of changes you make in the lambda loop.
				If you change the lambda loop, you might want to re-input the most recent llll rather than just sending a <m>bang</m>.
			</description>
		</method>
		<method name="forceread">
			<arglist />
			<digest>
				Read code from file even if incorrect
			</digest>
			<description>
				Loads a file containing bell code into the object,
				but ignore it if the code is invalid.
			</description>
		</method>
		<method name="forcereadappend">
			<arglist />
			<digest>
				Read code from file and append it even if incorrect
			</digest>
			<description>
				Appends the contents of a file containing bell code to the code already owned by the object,
				keeping it even if it is invalid.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Group equal elements
			</digest>
			<description>
				In first inlet: Equal elements are grouped from the llll, and the resulting llll is output, having one more parenthesis
				level than the original one (corresponding to each group of equal elements, i.e. to each class).
				If a lambda loop is present, couples of elements are output from the 2nd and 3rd outlets.
				If the two elements should considered equal (and as a consequence one of the two should be removed from the llll)
				the equality test should return 1 to <o>bach.classify</o>'s second inlet; otherwise, it should return 0.
				If a lambda loop is not present, the elements are tested for "standard" equality (as in <o>bach.eq</o>),
				according to the <m>matchtype</m> attribute.
			</description>
		</method>
		<method name="read">
			<arglist />
			<digest>
				Read code from file
			</digest>
			<description>
				Loads a file containing bell code into the object,
				keeping it even if it is invalid.
			</description>
		</method>
		<method name="readagain">
			<arglist />
			<digest>
				Reread file
			</digest>
			<description>
				Rereads the previous file
			</description>
		</method>
		<method name="readappend">
			<arglist />
			<digest>
				Read code from file and append it
			</digest>
			<description>
				Appends the contents of a file containing bell code
				to the code already owned by the object,
				but ignore it if the code is invalid.
			</description>
		</method>
		<method name="write">
			<arglist />
			<digest>
				Save code to file
			</digest>
			<description>
				Writes the bell code into a file.
			</description>
		</method>
		<method name="writeagain">
			<arglist />
			<digest>
				Rewrite file
			</digest>
			<description>
				Rewrite the previous file
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="embed" get="1" set="1" type="int" size="1">
			<digest>
				Save Data With Patcher
			</digest>
			<description>
				When set to 1, the bell code for the <m>lambda</m> attribute
				is saved with the patcher, even if not set in the object box.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Save Data With Patcher" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="file" get="1" set="1" type="symbol" size="1">
			<digest>
				Code file to be read at initialization
			</digest>
			<description>
				The <m>file</m> attribute allows setting a file name
				to be loaded automatically when the object is created.
				Its contents override those of the code in both the object box
				and the editor.
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Code file to be read at initialization" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="lambda" get="1" set="1" type="char_array" size="3276">
			<digest>
				Bell Expression For Lambda Function
			</digest>
			<description>
				The <m>lambda</m> attribute allows setting a snipped of bell code
				to be called instead of the lambda loop. If the lambda attribute is set,
				the lambda loop will not be evaluated, and the provided code will be executed as well.
				For each lambda outlet of the object, an input pseudovariable is passed to the lambda loop,
				with their indices counted from left to right.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Bell Expression For Lambda Function" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="lambdaparams" get="1" set="1" type="llll" size="1">
			<digest>
				Extra Parameters To Lambda Function
			</digest>
			<description>
				The <m>lambdaparams</m> attribute allows setting the values
				of local variables to be passed to the bell code set by the <m>lambda</m> attribute.
				It is structured as an llll consisting of one or more sublists,
				each containing the name of a variable and its value to be passed to the code.
				For example, the llll <b>[ $foo 1 ] [ $bar [ 2 3 ] ]</b>
				will set the $foo and $bar local variables respectively to <b>1</b> and <b>[ 2 3 ]</b>.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Extra Parameters To Lambda Function" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="matchtype" get="1" set="1" type="int" size="1">
			<digest>
				Match Type
			</digest>
			<description>
				When set to 0, numbers with different types but equal value (i.e. 1.5 and 3/2) are considered as equal.
				When set to 1, they are considered different.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Match Type" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="maxtime" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Duration Of Evaluation
			</digest>
			<description>
				The <m>maxtime</m> attribute allows setting a maximum evaluation time
				in milliseconds for the bell code provided.
				If it is reached, the evaluation aborts and the code returns null.
				If <m>maxtime</m> is set to 0, there is no time limit.
				The default is 60000 ms (1 minute).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Duration Of Evaluation" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="watch" get="1" set="1" type="int" size="1">
			<digest>
				Reload files if changed
			</digest>
			<description>
				If the <m>watch</m> attribute is set to 1
				(as by default), whenever the loaded bell code file
				or one of the files included by the code is changed
				the code is reloaded and rebuilt.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Reload files if changed" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		A custom equality test can be provided through the lambda loop. <br />
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.thin" />
		<seealso name="bach.collect" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				llll to be classified.
			</description>
		</entry>
		<entry name ="Inlet 2 (int)">
			<description>
				Lambda Inlet.
				Result of the equality test: 1 if equal, 0 if not.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				llll with grouped equal elements.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Lambda Outlet 1.
			</description>
		</entry>
		<entry name ="Outlet 3 (llll)">
			<description>
				Lambda Outlet 2.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		A custom equality test can be provided through the lambda loop. <br />
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
arrange, collect, duplicates, classify, lambda loop.
			</description>
		</entry>
	</misc>

</c74object>