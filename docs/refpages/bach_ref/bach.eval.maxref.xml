<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.eval" module="bach" category="Math">

	<digest>
		Evaluate advanced expressions
	</digest>

	<description>
		Evaluates expressions with variables, branching, loops and user-defined functions.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
		<metadata name="tag">bach math</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				llll to be assigned to inlet pseudovariables
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				llll to be assigned to direct inlet pseudovariables
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Values assigned to outlet pseudovariables
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Final result of the evaluation
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Values assigned to direct outlet pseudovariables
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="expression" optional="1" type="anything">
			<digest>
				Expression to evaluate
			</digest>
			<description>
				The syntax of the expression is based upon <o>bach.expr</o>'s,
				but it can contain branching and loop statements, and user-defined variables and functions.
				For a complete description of the expression syntax, please refer to the help file.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(doubleclick)">
			<arglist />
			<digest>
				Open text editor
			</digest>
			<description>
				Double-clicking on the object forces a text editor to open up, where the expression can be edited directly.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Perform the last operation
			</digest>
			<description>
				Return the comparison result for the most recently received lllls.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Perform the last operation
			</digest>
			<description>
				Return the result of the evaluation of the most recently received lllls and expression.
			</description>
		</method>
		<method name="expr">
			<arglist />
			<digest>
				Expression to evaluate
			</digest>
			<description>
				The <m>expr</m> message, followed by a valid expression, will set the new program to be evaluated by <o>bach.eval</o>.
				For more details on the expression syntax, please refer to <o>bach.eval</o>'s help patcher.
			</description>
		</method>
		<method name="forceread">
			<arglist />
			<digest>
				Read code from file even if incorrect
			</digest>
			<description>
				Loads a file containing bell code into the object,
				but ignore it if the code is invalid.
			</description>
		</method>
		<method name="forcereadappend">
			<arglist />
			<digest>
				Read code from file and append it even if incorrect
			</digest>
			<description>
				Appends the contents of a file containing bell code to the code already owned by the object,
				keeping it even if it is invalid.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Store values for the inlet variables
			</digest>
			<description>
				The lllls provide the data to the expression.
				An llll received in the leftmost inlet will trigger the evaluation and cause the result to be output.
			</description>
		</method>
		<method name="read">
			<arglist />
			<digest>
				Read code from file
			</digest>
			<description>
				Loads a file containing bell code into the object,
				keeping it even if it is invalid.
			</description>
		</method>
		<method name="readagain">
			<arglist />
			<digest>
				Reread file
			</digest>
			<description>
				Rereads the previous file
			</description>
		</method>
		<method name="readappend">
			<arglist />
			<digest>
				Read code from file and append it
			</digest>
			<description>
				Appends the contents of a file containing bell code
				to the code already owned by the object,
				but ignore it if the code is invalid.
			</description>
		</method>
		<method name="write">
			<arglist />
			<digest>
				Save code to file
			</digest>
			<description>
				Writes the bell code into a file.
			</description>
		</method>
		<method name="writeagain">
			<arglist />
			<digest>
				Rewrite file
			</digest>
			<description>
				Rewrite the previous file
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="auto" get="1" set="1" type="int" size="1">
			<digest>
				Automatically Run Code
			</digest>
			<description>
				When set to 1, the stored code is automatically run at startup.
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Automatically Run Code" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="directins" get="1" set="1" type="int" size="1">
			<digest>
				Number of Direct Inlets
			</digest>
			<description>
				Number of direct inlets. <br />
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number of Direct Inlets" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="directouts" get="1" set="1" type="int" size="1">
			<digest>
				Number of Outlets
			</digest>
			<description>
				Number of direct outlets. <br />
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number of Outlets" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="embed" get="1" set="1" type="int" size="1">
			<digest>
				Save Data With Patcher
			</digest>
			<description>
				When set to 1, the stored code is saved with the patcher.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Save Data With Patcher" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="extraoutlets" get="1" set="1" type="int" size="1">
			<digest>
				Number of Extra Outlets
			</digest>
			<description>
				Number of data outlets. <br />
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number of Extra Outlets" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="file" get="1" set="1" type="symbol" size="1">
			<digest>
				Code file to be read at initialization
			</digest>
			<description>
				The <m>file</m> attribute allows setting a file name
				to be loaded automatically when the object is created.
				Its contents override those of the code in both the object box
				and the editor.
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
				codableclass_add_extended_methods_and_attrs(c);
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Code file to be read at initialization" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="inlets" get="1" set="1" type="int" size="1">
			<digest>
				Number of Inlets
			</digest>
			<description>
				Number of data inlets. <br />
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number of Inlets" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxtime" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Duration Of Evaluation
			</digest>
			<description>
				The <m>maxtime</m> attribute allows setting a maximum evaluation time
				in milliseconds for the bell code provided.
				If it is reached, the evaluation aborts and the code returns null.
				If <m>maxtime</m> is set to 0, there is no time limit.
				The default is 60000 ms (1 minute).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Duration Of Evaluation" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="params" get="1" set="1" type="llll" size="1">
			<digest>
				Extra Parameters
			</digest>
			<description>
				The <m>params</m> attribute allows setting the values
				of local variables to be passed to the code.
				It is structured as an llll consisting of one or more sublists,
				each containing the name of a variable and its value to be passed to the code.
				For example, the llll <m>[ $foo 1 ] [ $bar [ 2 3 ] ]</m>
				will set the $foo and $bar local variables respectively to <m>1</m> and <m>[ 2 3 ]</m>.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Extra Parameters" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="triggers" get="1" set="1" type="llll" size="1">
			<digest>
				Triggers
			</digest>
			<description>
				An llll setting which data inlets are "hot" (i.e., which will will trigger the result)
				and which global and patcher variables must cause
				the re-evaluation of the program when assigned a new value.
				Inlets are counted from 1. 0 means that all data inlets are hot.
				Negative indices are counted from the right, but only considering data inlets,
				excluding direct inlets which are always cold anyway.
				(e.g., -1 means the rightmost data inlet).
				<m>null</m> means that all inlets are cold,
				but a <m>bang</m> in any inlet will still cause the llll to be output. <br/>
				The llll can contain names of global and patcher variables (the latter preceded by a # sign):
				whenever any of those variables takes a new value, the expression will be re-evaluated.<br/>
				Sublists composed of a variable name and an integer will treat the integer as the variable auto-evaluation priority:
				if different objects register to the same variable with different priorities,
				when the value of the variable changes they will be evaluated
				according to each's priority, from highest to lowest. The default is 0.<br/>
				Three special wildcard tokens can be included in the trigger lists:<br/>
				- * includes all the patcher and global variables used in the code;<br/>
				- .* includes all the global variables used in the code;<br/>
				- .# includes all the patcher variables used in the code.<br/>
				Wildcards can also have a priority, with the same syntax as regular variables.<br/>
				An important caveat concerning patcher variables
				is that the ones declared as triggers affect the variable hierarchies,
				even if they do not appear in the expression.<br/>
				Examples:<br/>
				<m>1 2 foo [ #bar 10 ] -1</m> will cause
				the first, second and rightmost data inlets to be hot,
				and the foo global variable and bar patcher variable
				to trigger the evaluation, with priorities respectively of 0 and 10.<br/>
				<m>#* [ .* -10 ] 1</m> will cause
				all the patcher and global variables in the code to trigger the evaluation,
				respectively with a priority of 0 and -10; moreover,
				data received the first inlet will trigger the evaluation, too.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Triggers" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="watch" get="1" set="1" type="int" size="1">
			<digest>
				Reload files if changed
			</digest>
			<description>
				If the <m>watch</m> attribute is set to 1
				(as by default), whenever the loaded bell code file
				or one of the files included by the code is changed
				the code is reloaded and rebuilt.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Reload files if changed" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The syntax of <o>bach.code</o> is based upon <o>bach.expr</o>'s, but a full, Turing-complete programming language is implemented.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="expr" />
		<seealso name="vexpr" />
		<seealso name="bach.expr" />
		<seealso name="bach.value" />
		<seealso name="bach.pv" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlets 1, 2, 3... (llll)">
			<description>
				llll to be assigned to inlet pseudovariables.
			</description>
		</entry>
		<entry name ="The last Inlet (llll)">
			<description>
				llll to be assigned to direct inlet pseudovariables.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlets 1, 2, 3... (llll)">
			<description>
				Values assigned to outlet pseudovariables.
			</description>
		</entry>
		<entry name ="The last but 1 Outlet (llll)">
			<description>
				Final result of the evaluation.
			</description>
		</entry>
		<entry name ="Outlets 3, 4, 5... (llll)">
			<description>
				Values assigned to direct outlet pseudovariables.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The syntax of <o>bach.code</o> is based upon <o>bach.expr</o>'s, but a full, Turing-complete programming language is implemented.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
expression, evaluate, variable, number, calculate, compute, function, code, if, branching.
			</description>
		</entry>
	</misc>

</c74object>