<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.shelf" module="bach">

	<digest>
		Storage system for lllls
	</digest>

	<description>
		Allows referring to lllls by name.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Messages to <o>bach.shelf</o>
			</digest>
			<description>
				Messages to <o>bach.shelf</o>, or name of an llll to retrieve.
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Retrieved llll
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Associated symbol
			</digest>
			<description>
				Whenever an llll is stored, or during the execution of a <m>dump</m> or <m>dumpnames</m> message,
				the names associated with the lllls are output from the second outlet.
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				bang when load/write is completed
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="name" optional="1" type="symbol">
			<digest>
				Name
			</digest>
			<description>
				All the <o>bach.shelf</o> objects with the same name share the same data.
				If no name is provided, <o>bach.shelf</o> will not share its data with any other instance.
				The name can be changed later through the <m>refer</m> message.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="anything">
			<arglist />
			<digest>
				Retrieve a stored llll
			</digest>
			<description>
				The llll associated with the symbol is retrieved and output from the left outlet.
				The llll and its name are not discarded after the retrieval.
				This is equivalent to sending the <m>retrieve</m> message.
			</description>
		</method>
		<method name="clear">
			<arglist />
			<digest>
				Discard all stored lllls
			</digest>
			<description>
				All the contents of <o>bach.shelf</o> are discarded.
			</description>
		</method>
		<method name="clone">
			<arg name="active_collection" optional="0" type="symbol" />
			<arg name="" optional="0" type="symbol" />
			<digest>
				Clone a stored llll
			</digest>
			<description>
				Syntax: <b>clone <m>&lt;symbol: active_collection&gt;</m> <m>&lt;symbol: &gt;</m> </b><br />				<br />
				The llll associated with the name given as the first argument is cloned,
				and the clone is associated with the name given as the second argument.
				The original llll and its name are kept.
			</description>
		</method>
		<method name="delete">
			<arg name="name" optional="0" type="symbol" />
			<digest>
				Discard a stored llll
			</digest>
			<description>
				Syntax: <b>delete <m>&lt;symbol: name&gt;</m> </b><br />				<br />
				The llll associated with the name given as the argument is discarded.
			</description>
		</method>
		<method name="dump">
			<arglist />
			<digest>
				Output all the stored lllls and their names
			</digest>
			<description>
				For each stored llll, its name is output from the second outlet
				and the llll itself is output from the first outlet.
			</description>
		</method>
		<method name="dumpnames">
			<arglist />
			<digest>
				Output the names of all the stored lllls
			</digest>
			<description>
				For each stored llll, its name is output from the second outlet.
				This can be useful e.g. for filling a <o>umenu</o>.
			</description>
		</method>
		<method name="embed">
			<arglist />
			<digest>
				Save data with patcher
			</digest>
			<description>
				When set to 1, all the stored data are saved with the patch,
				and will be retrieved when the patch is loaded.
			</description>
		</method>
		<method name="read">
			<arg name="file_name" optional="1" type="symbol" />
			<digest>
				Clear the object and read the contents of a file
			</digest>
			<description>
				Syntax: <b>read <m>[&lt;symbol: file_name&gt;]</m> </b><br />				<br />
				All the stored lllls are discarded, and the contents of the specified file are loaded into <o>bach.shelf</o>.
				When the operation is completed, a bang is output from the third outlet.
				If a file name is not provided, a dialog box will open.
			</description>
		</method>
		<method name="readappend">
			<arg name="file_name" optional="1" type="symbol" />
			<digest>
				Read the contents of a file
			</digest>
			<description>
				Syntax: <b>readappend <m>[&lt;symbol: file_name&gt;]</m> </b><br />				<br />
				The contents of a file are loaded into <o>bach.shelf</o>.
				All the lllls that were stored are kept, unless a name conflict arises.
				In this case, the llll in the file replaces the one that was previously stored.
				When the operation is completed, a bang is output from the third outlet.
				If a file name is not provided, a dialog box will open.
			</description>
		</method>
		<method name="refer">
			<arg name="name" optional="1" type="symbol" />
			<digest>
				Share data with other <o>bach.shelf</o> objects
			</digest>
			<description>
				Syntax: <b>refer <m>[&lt;symbol: name&gt;]</m> </b><br />				<br />
				A name can be assigned to <o>bach.shelf</o> through the <m>refer</m> message or an object-box argument.
				All the <o>bach.shelf</o> objects with the same name share the same data.
				If no name is provided, <o>bach.shelf</o> will not share its data with any other instance.
				Beware: if the name of an instance of <o>bach.shelf</o> is changed and no other <o>bach.shelf</o> shares its contents,
				these are discarded and there is no way to retrieve them.
			</description>
		</method>
		<method name="rename">
			<arg name="selection" optional="0" type="symbol" />
			<arg name="threshold_ms" optional="0" type="symbol" />
			<digest>
				Change the name of an llll
			</digest>
			<description>
				Syntax: <b>rename <m>&lt;symbol: selection&gt;</m> <m>&lt;symbol: threshold_ms&gt;</m> </b><br />				<br />
				The llll associated with the name given as the first argument
				is associated with the name given as the second argument, and the previous association is lost.
			</description>
		</method>
		<method name="retrieve">
			<arg name="name" optional="0" type="symbol" />
			<digest>
				Retrieve a stored llll
			</digest>
			<description>
				Syntax: <b>retrieve <m>&lt;symbol: name&gt;</m> </b><br />				<br />
				The llll associated with the name given as the argument is retrieved and output from the left outlet.
				The llll and its name are not discarded after the retrieval.
				This is equivalent to just sending the name.
			</description>
		</method>
		<method name="store">
			<arg name="llll" optional="0" type="llll" />
			<digest>
				Store an llll
			</digest>
			<description>
				Syntax: <b>store <m>&lt;llll: llll&gt;</m> </b><br />				<br />
				The argument llll is stored and associated with a unique name.
				The name is output from the second outlet.
				The argument llll can be provided in either text or native format.
				This means, for instance, that both <m>store a (b) c</m> and <m>store bach.llll 12345</m> are valid syntaxes.
			</description>
		</method>
		<method name="storenamed">
			<arg name="name" optional="0" type="symbol" />
			<arg name="llll" optional="0" type="llll" />
			<digest>
				Store an llll with a given name
			</digest>
			<description>
				Syntax: <b>storenamed <m>&lt;symbol: name&gt;</m> <m>&lt;llll: llll&gt;</m> </b><br />				<br />
				The llll is stored and associated with the provided name,
				the name being the first message argument, the llll the second.
				The name is output from the second outlet.
				The argument llll can be provided in either text or native format.
				This means, for instance, that both <m>storenamed foo a (b) c</m> and <m>storenamed foo bach.llll 12345</m> are valid syntaxes.
				If the name was already associated to an llll, the previous llll is discarded.
			</description>
		</method>
		<method name="write">
			<arglist />
			<digest>
				Write to disk the contents
			</digest>
			<description>
				All the stored lllls, along with their names, are written to disk.
				When the operation is completed, a bang is output from the third outlet.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="embed" get="1" set="1" type="int" size="1">
			<digest>
				Save Data With Patcher
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Save Data With Patcher" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		Named lllls can be shared among several <o>bach.shelf</o> objects with the same name.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.reg" />
		<seealso name="bach.value" />
		<seealso name="bach.pv" />
		<seealso name="coll" />
		<seealso name="dict" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (anything)">
			<description>
				Messages to <o>bach.shelf</o>.
				Messages to <o>bach.shelf</o>, or name of an llll to retrieve.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Retrieved llll.
			</description>
		</entry>
		<entry name ="Outlet 2 (symbol)">
			<description>
				Associated symbol.
				Whenever an llll is stored, or during the execution of a <m>dump</m> or <m>dumpnames</m> message,
				the names associated with the lllls are output from the second outlet.
			</description>
		</entry>
		<entry name ="Outlet 3 (bang)">
			<description>
				bang when load/write is completed.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		Named lllls can be shared among several <o>bach.shelf</o> objects with the same name.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
store, refer, name, save, reference.
			</description>
		</entry>
	</misc>

</c74object>