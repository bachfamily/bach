<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.roll" module="bach">

	<digest>
		Display and edit a score in proportional notation
	</digest>

	<description>
		Displays a score in proportional notation, and provides the interface to interact with it.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach notation</metadata>
		<metadata name="tag">bach interface</metadata>
		<metadata name="tag">U/I</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				bang or llll containing gathered syntax of the entire object
			</digest>
			<description>
				See the <m>bang</m> and <m>llll</m> methods for more information.
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Onsets (in milliseconds) in separate syntax.
			</digest>
			<description>
				See the <m>llll</m> method for more information.
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Pitches or MIDIcents in separate syntax.
			</digest>
			<description>
				See the <m>llll</m> method for more information.
			</description>
		</inlet>
		<inlet id="3" type="INLET_TYPE">
			<digest>
				Durations (in milliseconds) in separate syntax
			</digest>
			<description>
				See the <m>llll</m> method for more information.
			</description>
		</inlet>
		<inlet id="4" type="INLET_TYPE">
			<digest>
				Velocities (1 to 127) in separate syntax
			</digest>
			<description>
				See the <m>llll</m> method for more information.
			</description>
		</inlet>
		<inlet id="5" type="INLET_TYPE">
			<digest>
				Extras in separate syntax
			</digest>
			<description>
				See the <m>llll</m> method for more information.
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Whole object dump
			</digest>
			<description>
				The gathered syntax of the whole <o>bach.roll</o> (or a part of it, depending on the <m>dump</m> message arguments)
				is sent through this outlet. See the <m>dump</m> message to know more about the output syntax.
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Onsets
			</digest>
			<description>
				The onsets (in milliseconds) in separate syntax.
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.roll</o>, onsets are the only parameter assigned chordwise (they are a propriety of chords, rather than notes).
				The separate syntax for onsets will be thus structured as: an llll for each voice, containing a value for each chord.
				For instance: <b>[0 1000 2000 3000] [100 400] [250 2500]</b>. <br />
				Cents, durations, velocities and extras are all assigned notewise in <o>bach.roll</o> (they are propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>[[6000] [6000 6400] [6200] [6200 6500]] [[7200] [6500 7200 7500]] [[5500] [5400]]</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.roll</o> can properly understand
				<b>[6000 [6000 6400] 6200 [6200 6500]] [[7200] [6500 7200 7500]] [5500 5400]</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut.
				<br /> <br />
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Pitches or MIDIcents
			</digest>
			<description>
				The pitches or MIDIcents in separate syntax (see <m>outputpitchesseparate</m>).
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.roll</o>, onsets are the only parameter assigned chordwise (they are a propriety of chords, rather than notes).
				The separate syntax for onsets will be thus structured as: an llll for each voice, containing a value for each chord.
				For instance: <b>[0 1000 2000 3000] [100 400] [250 2500]</b>. <br />
				Cents, durations, velocities and extras are all assigned notewise in <o>bach.roll</o> (they are propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>[[6000] [6000 6400] [6200] [6200 6500]] [[7200] [6500 7200 7500]] [[5500] [5400]]</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.roll</o> can properly understand
				<b>[6000 [6000 6400] 6200 [6200 6500]] [[7200] [6500 7200 7500]] [5500 5400]</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut.
				<br /> <br />
			</description>
		</outlet>
		<outlet id="3" type="INLET_TYPE">
			<digest>
				Durations
			</digest>
			<description>
				The durations (in milliseconds) in separate syntax.
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.roll</o>, onsets are the only parameter assigned chordwise (they are a propriety of chords, rather than notes).
				The separate syntax for onsets will be thus structured as: an llll for each voice, containing a value for each chord.
				For instance: <b>[0 1000 2000 3000] [100 400] [250 2500]</b>. <br />
				Cents, durations, velocities and extras are all assigned notewise in <o>bach.roll</o> (they are propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>[[6000] [6000 6400] [6200] [6200 6500]] [[7200] [6500 7200 7500]] [[5500] [5400]]</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.roll</o> can properly understand
				<b>[6000 [6000 6400] 6200 [6200 6500]] [[7200] [6500 7200 7500]] [5500 5400]</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut.
				<br /> <br />
			</description>
		</outlet>
		<outlet id="4" type="INLET_TYPE">
			<digest>
				Velocities
			</digest>
			<description>
				The velocities (1 to 127) in separate syntax.
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.roll</o>, onsets are the only parameter assigned chordwise (they are a propriety of chords, rather than notes).
				The separate syntax for onsets will be thus structured as: an llll for each voice, containing a value for each chord.
				For instance: <b>[0 1000 2000 3000] [100 400] [250 2500]</b>. <br />
				Cents, durations, velocities and extras are all assigned notewise in <o>bach.roll</o> (they are propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>[[6000] [6000 6400] [6200] [6200 6500]] [[7200] [6500 7200 7500]] [[5500] [5400]]</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.roll</o> can properly understand
				<b>[6000 [6000 6400] 6200 [6200 6500]] [[7200] [6500 7200 7500]] [5500 5400]</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut.
				<br /> <br />
			</description>
		</outlet>
		<outlet id="5" type="INLET_TYPE">
			<digest>
				Extras
			</digest>
			<description>
				The extras in separate syntax.
				Extras are defined in the separate syntax via lllls sent through the Extras inlet, in the form
				<b>[<m>extra_name</m> <m>GLOBAL_CONTENT</m>] [<m>extra_name</m> <m>GLOBAL_CONTENT</m>]...</b>
				where each sublist is thus composed by a name (a symbol identifying the extra, one of the following: "graphics", "breakpoints", "slots")
				and a global content, which is just an llll structured exactly according to the object's hierarchy.
				This llll is no different than any other separate parameter llll (say: Cents), only instead of having a single element (number)
				for each note, an llll is given, specifying the content of the extra associated to each note
				(a level of parentheses is needed for each note). If this latter level is dropped, and the information concerns a rest, the extra is assigned to the
				rest, if applicable (e.g. slots).
				For instance, the pitch breakpoints specification for a given note may have the form
				<b>[[0. 0. 0.] [0.5 500 0.5] [1. 0. 0.]]</b>, whereas a complete list of extras to be introduced in the Extras inlet may have the form
				<b>(breakpoints (((( 0. 0. 0. ) (0.5 500 0.5) (1. 0. 0.)) (( 0. 0. 0. ) (0.5 -500 0.5) (1. 0. 0.))) ((( 0. 0. 0. ) (0.5 -200 0.1)
				(1. 0. 0.)))) (((( 0. 0. 0. ) (0.5 500 0.5) (1. 0. 0.))) ((( 0. 0. 0. ) (0.5 -200 0.1) (1. 0. 0.))))) (slots ( (((3 10 20 30) (4 0.4))
				((3 10 20 30) (4 0.1))) (())) ())</b>. Notes, chords or voices which don't need a given extras are allowed to be represented as input by
				an empty <b>[]</b> llll. <br />
				The content of each extra is exactly the same as the gathered syntax of such extra, provided that the starting symbol is dropped.
				For instance, instead of <b>[graphics 6200 -1/2]</b>, one should just have <b>[6200 -1/2]</b> as graphic content for a given note, and so on.
				The syntax for the gathered syntax of all extras is provided below. Remember to drop the extra router symbol to obtain the content
				to be put in the separate syntax llll. <br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>[articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>]</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
			</description>
		</outlet>
		<outlet id="6" type="INLET_TYPE">
			<digest>
				Playout
			</digest>
			<description>
				Outlet sending information about elements being played, as well as query answers and notifications.
				For <o>bach.roll</o>, the playout syntax is used whenever the information about a note or chord is sent through the playout (either at playtime
				or at offline play, or selection dump).
				The playout syntax is a slight variation of the standard chord gathered syntax. Two different cases apply, according to the <m>playmode</m>
				attribute value. If the <m>playmode</m> is set to Chordwise, the information about each chord is output in the form <br />
				<b>chord <m>voice_number</m> <m>MIDI_channel</m> [<m>onset</m> <m>NOTE1</m> <m>NOTE2</m> <m>NOTE3</m> <m>chord_flag</m>] </b> <br />
				where each <b><m>NOTE</m></b> is the gathered syntax of the note (see below).
				If the <m>playmode</m> is set to Notewise, information about each note is output as if the note were the only note in the chord, i.e. in the form <br />
				<b>note <m>voice_number</m> <m>MIDI_channel</m> [<m>onset</m> <m>NOTE</m> <m>chord_flag</m>] </b> <br />
				where <b><m>NOTE</m></b> is the note gathered syntax.
				The <m>MIDI_channels</m> is the one associated with the voice to which the note or chord belongs. The <m>onset</m> is in milliseconds,
				The <m>chord_flag</m> is a bitfield summing values of 1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				The playout syntax also concerns markers: they are output in the form: <b>marker <m>NAME_OR_NAMES</m> <m>onset_ms</m> <m>role</m> <m>optional:content</m></b>
				where the <m>NAME_OR_NAMES</m> is either a single atom (if the marker has a single name) or a wrapped plain llll containing the names, and the <m>optional:content</m>
				is only output if the marker role requires it.
				<br /> <br />
				In <o>bach.roll</o>, one can assign a role for each marker, so that they can represent elements such as
				time signatures, tempi, barline, measure divisions. Time signature markers and tempi markers
				also require a "content", i.e. an llll specifying the time signature or the tempo.
				When adding a marker via the <m>addmarker</m> message, the role can be specified as third parameter,
				and the content as fourth parameter. Alternatively, roles and content can be set via the marker inspector.
				Roles can be: <br />
				<m>Time Signature</m>: set by the symbol "timesig", it represents a time signature, and expects the time signature llll as content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo timesig [4 4]</b>.<br />
				<m>Tempo</m>: set by the symbol "tempo", it represents a time signature, and expects the tempo llll as content (tempo figure and tempo
				value). For instance, a message to add such a marker could be <b>addmarker 0 foo tempo [1/8 50]</b>, meaning
				that the tempo is 1/8 = 50.<br />
				<m>Measure Barlines</m>: set by the symbol "barline", it represents a barline, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo barline</b>. <br />
				<m>Measure Division</m>: set by the symbol "division", it represents a measure division, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo division</b>. <br />
				<m>Measure Subdivision</m>: set by the symbol "subdivision", it represents a measure subdivision, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo subdivision</b>. <br />
				All these marker can be parsed by bach.quantize in order to automatically retrieve the measureinfo of the
				entire bach.roll.
				<br /> <br />
				For <o>bach.roll</o>, the gathered syntax for any note is, in its simplest form <b>[<m>pitch_cents</m> <m>duration</m> <m>velocity</m> <m>note_flag</m>]</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>duration</m> is measured in milliseconds, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining
				graphics, pitch breakpoints, slots, names.
				Each of these specifications is done in the form <b>[<m>specification_name</m> <m>SPECIFICATION CONTENT</m>]</b>, and must be put after the <m>velocity</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a note definition might have the form
				<b>[7300. 136. 127 [graphic 7400 -1/2] [slots [1 [0. 0. 0.] [0.294118 81.138889 0.] [0.294118 38.805556 0.] [1. 0. 0.]]] [name pippo] 0 ]</b>
				<br /> <br />
				Instead of MIDIcents (or cents), one can also instert pitches.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names are in anglo-saxon syntax ("C", "D", "E"...), and are case insentitive. Middle C is C5.
				They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>D#4</b>). <br />
				Accidentals are: <b>#</b> [sharp], <b>b</b> [flat], <b>x</b> [double sharp], <b>q</b> [quartertone sharp], <b>d</b> (quartertone flat),
				<b>^</b> [eighth-tone sharp], <b>v</b> (eighth-tone flat)
				One can also extend the accidental by setting a rational specification followed by a <b>t</b>. For instance <b>C5+1/16t</b> is
				middle C, 1/16 tone up.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>[name john george]</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>[name [high 1] [low 2]]</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
			</description>
		</outlet>
		<outlet id="7" type="INLET_TYPE">
			<digest>
				bang when changed
			</digest>
			<description>
				This outlet sends a bang whenever any element has been changed via the interface.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="numvoices" optional="1" type="int">
			<digest>
				Number of voices
			</digest>
			<description>
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(drag)">
			<arglist />
			<digest>
				Open file
			</digest>
			<description>
				Dragging a file on the object will load its content, if a proper readable format is recognized.
			</description>
		</method>
		<method name="(keyboard)">
			<arglist />
			<digest>
				Edit content
			</digest>
			<description>
				Basic commands: <br />
				• <m>Backspace</m>: Delete all selected items, except for selected note tails, for which the backspace key reverts their pitch to the
				original notehead pitch (no glissando). <br />
				• <m>→</m>: Shift selection onsets to the right; for selected tails: increase corresponding note duration <br />
				• <m>←</m>: Shift selection onsets to the left; for selected tails: decrease corresponding note duration <br />
				• <m>Alt+→</m>: Increase duration for selected notes (possible breakpoint positions are rescaled). <br />
				   ↪ Add the <m>Shift</m> key to change duration more rapidly. <br />
				• <m>Alt+←</m>: Decrease duration for selected notes (possible breakpoint positions are rescaled). <br />
				   ↪ Add the <m>Shift</m> key to change duration more rapidly. <br />
				• <m>Alt+Ctrl+→</m> (mac) or <m>Alt+Shift+Ctrl+→</m> (win): Increase note duration, preserving the absolute position of each relative breakpoint. <br />
				   ↪ Add the <m>Shift</m> key (mac) to change duration more rapidly. <br />
				• <m>Alt+Ctrl+←</m> (mac) or <m>Alt+Shift+Ctrl+←</m> (win): Decrease note duration, preserving the absolute position of each relative breakpoint. <br />
				   ↪ Add the <m>Shift</m> key (mac) to change duration more rapidly. <br />
				• <m>↑</m>: Raise pitch of selection by one step. <br />
				   ↪ Add the <m>Shift</m> key to raise the pitch by one octave. <br />
				   ↪ Add the <m>Ctrl+Shift</m> key to prevent notes from being assigned to different voices. <br />
				• <m>↓</m>: Lower pitch of selection by one step. <br />
				   ↪ Add the <m>Shift</m> key to lower the pitch by one octave. <br />
				   ↪ Add the <m>Ctrl+Shift</m> key to prevent notes from being assigned to different voices. <br />
				• <m>Cmd+Z</m> (mac) or <m>Ctrl+Z</m> (win): Undo <br />
				• <m>Cmd+Shift+Z</m> (mac) or <m>Ctrl+Y</m> (win): Redo <br />
				• <m>Cmd+L</m> (mac) or <m>Ctrl+L</m> (win) when items are selected: Lock/unlock selected items <br />
				• <m>Cmd+G</m> (mac) or <m>Ctrl+G</m> (win): Group/ungroup selected items <br />
				• <m>Ctrl+A</m>, <m>Ctrl+B</m>, <m>Ctrl+C</m>, <m>Ctrl+D</m>, <m>Ctrl+E</m>, <m>Ctrl+F</m>, <m>Ctrl+G</m> (mac only):
				or <m>Shift+Ctrl+Alt+A</m>, <m>Shift+Ctrl+Alt+B</m>, <m>Shift+Ctrl+Alt+C</m>, <m>Shift+Ctrl+Alt+D</m>, <m>Shift+Ctrl+Alt+E</m>, <m>Shift+Ctrl+Alt+F</m>, <m>Shift+Ctrl+Alt+G</m> (win):
				Transform pitches of selected notes into the corresponding pitch (A = La, B = Si, C = Do, and so on).
				The octave is chosen to be the one so that the snapped note is as near as possible to the previous note. <br />
				<br />
				Align operations: <br />
				• <m>Cmd+Y</m> (mac) or <m>Ctrl+Shift+A</m> (win): Align selected chord onsets (so that they end up having the same onset) <br />
				• <m>Cmd+F</m> (mac) or <m>Ctrl+Shift+F</m> (win): Distribute selected chords' onsets evenly in time (so that the onset
				difference ends up being the same for all selected items) <br />
				<br />
				Sequencing, loop region and dump: <br />
				• <m>Spacebar</m> while not playing: Play (the playing starts from current playhead cursor position) <br />
				• <m>Spacebar</m> during playback: Stop (the playhead cursor position goes back to the former starting play point) <br />
				• <m>Shift+Spacebar</m> during playback: Pause (keep the playhead cursor at the last
				reached position, so that a new <m>play</m> message or a new <m>Spacebar</m> command will
				start playing from there) <br />
				• <m>Shift+Spacebar</m> while not playing: Play selection (start playing from the leftmost selected item
				and only play the selected items) <br />
				• <m>V</m>: Off-line play, also known as "selection dump" (immediately send the playout syntax of selected elements
				out the playout, see <m>dumpselection</m> message). The V letter can be changed via the <m>dumpplaycmd</m> attribute. <br />
				• <m>Alt+V</m>: Chordwise off-line play (as the previous command, but if a single note is selected, all its chord content
				is output through the playout) <br />
				• <m>Shift+Alt+V</m>: Send whole gathered syntax content out the first outlet (this is equivalent to sending a <m>dump</m> message) <br />
				• Any defined command key: send command off-line <br />
				• <m>Cmd+P</m> (mac) or <m>Ctrl+P</m> (win): Show/hide playhead cursor (while not playing: indeed, during playback the cursor is always visible) <br />
				• <m>Cmd+J</m> (mac) or <m>Ctrl+J</m> (win): Solo/unsolo selected items <br />
				• <m>Cmd+U</m> (mac) or <m>Ctrl+U</m> (win): Mute/unmute selected items <br />
				• <m>Return</m>: set the playhead cursor and the scrollbar both at the beginning of the <o>bach.roll</o>, or at the beginning of the loop region (in case it is displayed). <br />
				• <m>Cmd+L</m> (mac) or <m>Ctrl+L</m> (win) when nothing is selected: Show/hide loop region <br />
				• <m>Cmd+Shift+L</m> (mac) or <m>Ctrl+Shift+L</m> (win) when nothing is selected: Activate/deactivate loop region <br />
				<br />
				Inspector, selection and navigation: <br />
				• <m>Cmd+I</m> (mac) or <m>Ctrl+Alt+I</m> (win): Open inspector for selected item (if a single item is selected), or for slotinfo (if a slot window is open). <br />
				• <m>→</m>, <m>←</m>, <m>↑</m>, <m>↓</m>, <m>Enter</m>, <m>Esc</m>: Navigate inside the score while inspecting elements (i.e. while the bach inspector has the focus).
				See the indication at the bottom of each inspector screen in order to know how to use such keyboard commands. In general <m>←</m> and <m>→</m> move
				respectively to previous and next element, <m>↑</m> and <m>↓</m> to the elements above or below, <m>Enter</m> moves to the first "son" of the
				element and <m>Esc</m> to the element's "father" (in the score hierarchy).
				• <m>Cmd+→</m>, <m>Cmd+←</m>, <m>Cmd+↑</m>, <m>Cmd+↓</m> (mac) or
				<m>Ctrl+→</m>, <m>Ctrl+←</m>, <m>Ctrl+↑</m>, <m>Ctrl+↓</m> (win): Navigate inside the score, respectively selecting the element at right,
				left, above or below with respect to the currently selected item.
				If no item is selected, the first two commands will move the horizontal scrollbar, if any (left or right).<br />
				• <m>Cmd+A</m> (mac) or <m>Ctrl+A</m> (win): Select all items <br />
				<br />
				Copy/paste actions (these work also from a <o>bach.roll</o> to another one): <br />
				• <m>Cmd+C</m> (mac) or <m>Ctrl+C</m> (win): Copy selected content, or slot content if a slot window is open. <br />
				• <m>Cmd+Shift+C</m> (mac) or <m>Ctrl+Shift+C</m> (win): If a slot window is open, copy the content of
				all the slots of the note whose slot window is open; otherwise simply copy selected content. <br />
				• <m>Cmd+X</m> (mac) or <m>Ctrl+X</m> (win): Cut selected content, or slot content if a slot window is open. <br />
				• <m>Cmd+V</m> (mac) or <m>Ctrl+V</m> (win): If the content in the clipboard are chords, paste chords at the current mouse position.
				If the content is a slot content, assign such slot content to all selected notes. <br />
				• <m>Cmd+Shift+V</m> (mac) or <m>Ctrl+Shift+V</m> (win): Paste in-place. If the content in the clipboard are chords, paste chords at the original position
				(so that they overlap with the existing ones, unless these latter have been deleted). <br />
				• <m>Cmd+Alt+V</m> (mac) or <m>Ctrl+Shift+V</m> (win): Paste replace. If the content in the clipboard are chords, paste chords at the place of the currently selected items
				(i.e. deletes the current selection and replaces it with the clipboard content) <br />
				<br />
				For pitch breakpoints: <br />
				• <m>Esc</m>: Revert slope to 1 for selected breakpoints (the slope refers to the duration line segment preceding the breakpoints). <br />
				<br />
				Lyrics and dynamics: <br />
				• <m>Cmd+Shift+L</m> (mac) or <m>Ctrl+Shift+L</m> (win): Start editing lyrics for the leftmost selected chord, or for the selected lyrics <br />
				• <m>Cmd+Shift+D</m> (mac) or <m>Ctrl+Shift+D</m> (win): Start editing dynamics for the leftmost selected chord, or for the selected dynamics <br />
				• <m>Tab</m> while editing: Move to next chord's lyrics/dynamics <br />
				• <m>Shift+Tab</m> while editing: Move to previous chord's lyrics/dynamics <br />
				• <m>-</m>: For lyrics: end a syllable with "-" in order to create a dashed line reaching the next piece of lyrics <br />
				• <m>Esc</m>: End editing <br />
				• <m>↑</m>: When dynamics are selected: raise dynamic markings by one step. <br />
				• <m>↓</m>: When dynamics are selected: lower dynamic markings by one step. <br />
				<br />
				For slots: <br />
				• <m>1</m>, <m>2</m>, <m>3</m>, <m>4</m>, <m>5</m>, <m>6</m>, <m>7</m>, <m>8</m>, <m>9</m>, <m>0</m>: Open
				corresponding slot window (1 meaning: first slot, 2 meaning: second slot, and so on, with 0 meaning: tenth slot) <br />
				• Press a slot hot key to open the corresponding slot window. All slots can be assigned a given slot key via
				the <m>key</m> specification in the slotinfo (see <m>llll</m> message to know more). <br />
				• <m>Shift+Tab</m>: Open next slot window (if a slot window is open). <br />
				• <m>Shift+Alt+Tab</m>: Open previous slot window (if a slot window is open). <br />
				• <m>Enter</m>: For "text" and "llll" slots: enter the introduced text or llll. <br />
				• <m>Backspace</m>: For "function" slots: deletes the selected slot points. <br />
				<br />
				Slot copy/paste: <br />
				• <m>Cmd+C</m> (mac) or <m>Ctrl+C</m> (win): Copy the slot content. <br />
				   ↪ If some points in a slot of type function are selected, only those points are copied; otherwise all the content of the active slot is copied. <br />
				• <m>Cmd+X</m> (mac) or <m>Ctrl+X</m> (win): Cut the slot content. <br />
				   ↪ If some points in a slot of type function are selected, only those points are cut; otherwise all the content of the active slot is cut. <br />
				• <m>Cmd+Shift+C</m> (mac) or <m>Ctrl+Shift+C</m> (win): Copy the content of all slots (not only the possibly open one). <br />
				• <m>Cmd+V</m> (mac) or <m>Ctrl+V</m> (win): Paste the copied content to every selected note. <br />
				   ↪ If the copied content are some selected points of a slot of type function, only those points are pasted at the current mouse position in the open slot. <br />
				     ↪ Add the <m>Ctrl</m> key (mac) or <m>Shift</m> key (win) to avoid deletion of existing intermediate points. <br />
				<br />
				<br />
				Linear editing (these commands are valid when only in linear editing mode): <br />
				• <m>↑</m>, <m>↓</m>: Move position of the pitch cursor of one step up or down (respectively) <br />
				   ↪ Add the <m>Shift</m> key to move the pitch cursor by one octave. <br />
				• <m>→</m>, <m>←</m>: Move cursor right/left by the amount specified by the <m>linearedittimestep</m> attribute.
				   ↪ Add the <m>Shift</m> key move 4x faster (unless the grid snapping is on, via the <m>snaplinearedit</m> attribute,
				in which case it will move as the main grid, and not the subdivision grid) <br />
				   ↪ Add the <m>Alt</m> key to move by 1 millisecond only <br />
				      ↪ Furtherly add the <m>Shift</m> keys to move by 10 milliseconds <br />
				• <m>Cmd+→</m>, <m>Cmd+←</m> (mac) or <m>Ctrl+→</m>, <m>Ctrl+←</m> (win): Navigate by chords (i.e. go to next/prev chord onset, or chord longest
				note's tail). <br />
				• <m>Cmd+↑</m>, <m>Cmd+↓</m> (mac) or <m>Ctrl+↑</m>, <m>Ctrl+↓</m> (win): Go to previous/next voice. <br />
				• <m>1</m>, <m>2</m>, <m>3</m>, <m>4</m>, <m>5</m>, <m>6</m>, <m>7</m>, <m>8</m>, <m>9</m>, <m>0</m>:
				Insert chord at cursor position with a given duration (if the cursor is not on any chord), or modify duration of chord at cursor.
				Durations are mapped on numbers as multipliers of the <m>linearedittimestep</m> attribute. The multipliers are defined
				via the <m>linearedittimemultipliers</m> attribute (by default are the numbers themselves, with 0 meaning 10). <br />
				• <m>A</m>, <m>B</m>, <m>C</m>, <m>D</m>, <m>E</m>, <m>F</m>, <m>G</m>:
				Insert note at cursor position with a given pitch (if the cursor is not on any chord), or modify pitch of note at cursor.
				Pitches are trivially mapped as in the anglo-saxon syntax. If a new chord is inserted, this will have the duration of the last
				inserted one (by default 4 times the <m>linearedittimestep</m>). <br />
				• <m>N</m>: Add a new note at cursor position (if cursor is on a chord) <br />
				• <m>+</m>, <m>-</m>: raise or lower pitch of chord or note at cursor (if any) <br />
				   ↪ Add the <m>Control</m> key to change durations. <br />
				If a chord is under the cursor, then its notes are lengthened/shortened by 1 ms, otherwise the time step itself is
				lengthened/shortened by 1 ms<br />
				      ↪ Furtherly add the <m>Shift</m> keys to lengthen/shorten by 10 milliseconds <br />
				      ↪ Furtherly add the <m>Alt</m> keys to have the length be double/halved <br />
				• <m>Backspace</m>: Delete chord at cursor position (if any)<br />
				• <m>Shift+Backspace</m>: Delete note at cursor position (cursor must be aligned also vertically with the note to delete)<br />
				• <m>Esc</m>: Exit linear editing mode <br />
			</description>
		</method>
		<method name="(mouse)">
			<arglist />
			<digest>
				Edit content
			</digest>
			<description>
				Basic commands: <br />
				• <m>Cmd+Click</m> (mac) or <m>Ctrl+click</m> (win) on a notehead: Delete note <br />
				• <m>Cmd+Click</m> (mac) or <m>Ctrl+click</m> (win) elsewhere: Add a new chord having a note at the clicked position <br />
				• <m>Alt+click+drag</m> on a notehead: Copy the note into a new chord <br />
				   ↪ Add the <m>Shift</m> key to add the new note to the existing chord <br />
				• <m>click+drag</m> on a notehead or a duration line: Change the note pitch (dragging up/down) and the chord onset (dragging left/right). <br />
				   ↪ Add the <m>Shift</m> key to change either the note pitch or the chord onset <br />
				   ↪ Add the <m>Shift+Cmd</m> keys (mac) or the <m>Shift+Ctrl</m> keys (win) while dragging up/down to prevent notes from changing voices <br />
				   ↪ Add the <m>Shift+Cmd</m> keys (mac) or the <m>Shift+Ctrl</m> keys (win) while dragging left/right to finely edit the chord onset. <br />
				   ↪ Add the <m>Shift+Ctrl</m> key to trim the tail, i.e. to keep the existing absolute pitch breakpoint positions. <br />
				• <m>click+drag</m> on a note tail: Change the note duration (dragging left/right) and pitch of the note tail (dragging up/down provided that the <m>allowglissandi</m> attribute is set to 1).
				Possible pitch breakpoint positions as well as temporal slot items are rescaled according to the new duration <br />
				   ↪ Add the <m>Shift</m> key to change either the note duration or the note tail pitch <br />
				   ↪ Add the <m>Shift+Cmd</m> keys (mac) or <m>Shift+Ctrl</m> keys (win) to fine edit the position <br />
				   ↪ Add the <m>Shift+Ctrl</m> key to trim the tail, i.e. to keep the existing absolute pitch breakpoint positions. <br />
				• <m>Ctrl+click+drag</m> on a notehead or on dynamic mark: change velocity or dynamic mark <br />
				• <m>doubleclick</m> on voice names, marker names or lyrics: Edit names directly <br />
				• <m>doubleclick</m> on clefs: Select all items in voice <br />
				• <m>doubleclick</m> on selected items: Selection off-line play (as the <m>V</m> key), but only if <m>dblclicksendsvalues</m> is set to 1 <br />
				• <m>Shift+click+drag</m> on a clef (at the beginning of the staff): Move voice vertically (along with all the next ones), i.e.: modify vertical space before clicked voice <br />
				• <m>Shift+Alt+click+drag</m> on a clef (at the beginning of the staff): Move all following voices vertically (but not the clicked one), i.e.: modify vertical space after clicked voice <br />
				• <m>right click</m> or <m>two-fingers-tap</m>: Open contextual popup menu. This can be opened by clicking on noteheads (note or selection popup menu), clefs
				(voice popup menu) or on the background (backgroun popup menu). <br />
				<br />
				Marker regions
				• <m>doubleclick</m> on marker region strips: Select items in region <br />
				• <m>click+drag</m> on the end portion of a marker region strip: Extend the marker region <br />
				• <m>doubleclick</m> on the end portion of a marker region strip: Extend the marker region till the next marker <br />
				<br />
				Selection, zooming, scrollbar and dilation rectangle: <br />
				• <m>click</m> on any item: Select item <br />
				   ↪ Add the <m>Shift</m> key to keep the selection to add/remove other elements to/from it. <br />
				• <m>click</m> outside any item and <m>drag</m>: Select elements inside the rectangle region (selection rectangle). <br />
				   ↪ Add the <m>Shift</m> key to keep the selection to add/remove other elements to/from it. <br />
				   ↪ To select a marker with a selection rectangle, reach the uppermost point of the notation object corresponding to the marker line. <br />
				   ↪ If, after having clicked but before having released the mouse, you press the <m>Cmd</m> key (mac) or <m>Ctrl</m> key (win),
				a dilation rectangle appears: <br />
				       - <m>click+drag</m> on any on the corners to expand the selection temporally and/or to expand pitches. <br />
				       - <m>click+drag</m> inside the dilation rectangle to move the selected items in time or pitch. <br />
				• <m>Cmd+mousewheel</m> or <m>Cmd+two-fingers-scroll</m> (mac) or <m>Ctrl+mousewheel</m> or <m>Ctrl+two-fingers-scroll</m> (win): Change the <m>zoom</m> attribute (horizontal zoom). Zoom is increased
				when rolling the wheel up, decreased when rolling the wheel down. You can substitute the trackpad's <m>two-fingers-scroll</m> to the <m>mousewheel</m>.<br />
				• <m>Alt+Cmd+click+drag</m> (mac) or <m>Alt+Ctrl+click+drag</m> (win): Zoom into selected region. As you drag, a reddish zooming rectangle is
				drawn, corresponding (on the temporal axis) to the region into which the notation object will exactly zoom. <br />
				   ↪ Add the <m>Shift</m> key to zoom out instead. <br />
				• <m>click+drag</m> on a scrollbar: Change scrollbar position <br />
				• <m>mousewheel</m> (or trackpad's <m>two-fingers-scroll</m>): Change scrollbar positions <br />
				• <m>Ctrl+Alt+click+drag</m> (mac) or <m>Shift+Ctrl+Alt+click+drag</m> (win) anywhere: Change scrollbar positions,
				via a dragging hand (faster than directly clicking and dragging the scrollbar itself) <br />
				   ↪ Add the <m>Shift+Cmd</m> key (mac) or the <m>Shift</m> key (win) to change the scrollbar positions more finely <br />
				<br />
				Sequencing and loop region: <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win): Redefine loop region (if the click is performed
				on the background, outside any notation item) <br />
				   ↪ Add the <m>Shift</m> key to auto snap boundaries to existing chord onsets <br />
				• <m>click+drag</m> on a loop region boundary: Change loop region boundary <br />
				   ↪ Add the <m>Shift</m> key to auto snap it to existing chord onsets <br />
				• <m>click+drag</m> on a loop region bottom bar: Globally shift loop region <br />
				   ↪ Add the <m>Shift</m> key to auto snap boundaries to existing chord onsets <br />
				• <m>Alt+click</m> when the playhead cursor is visible: Set a new playhead cursor position (but only if the <m>playheaddragmode</m>
				is set to Absolute, otherwise you have to use <m>Alt+click+drag</m> to change the cursor position) <br />
				• <m>Alt+click+drag</m> when the playhead cursor is visible: Change cursor position (also depending on the <m>playheaddragmode</m>) <br />
				<br />
				For pitch breakpoints (if the <m>allowglissandi</m> attribute is set to 1): <br />
				• <m>Alt+click</m> on a duration line: Add a pitch breakpoint. <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> (win) on a pitch breakpoint: Delete pitch breakpoint. <br />
				• <m>click+drag</m> on a pitch breakpoint: Change pitch (if dragging up/down) or temporal position (if dragging left/right). <br />
				   ↪ Add the <m>Shift</m> key to change either the pitch or the temporal position. <br />
				   ↪ Add the <m>Shift+Cmd</m> keys (mac) or <m>Shift+Ctrl</m> keys (win) to fine edit either the pitch or the temporal position (depending on the dragging direction). <br />
				• <m>Ctrl+click</m> (mac) or <m>Shift+Ctrl+click</m> (win) on a pitch breakpoint and <m>drag</m> up and down: Change breakpoint velocity (if the <m>breakpointshavevelocity</m> attribute is set to 1). <br />
				• <m>Ctrl+click</m> (mac) on a portion of duration line and <m>drag</m> up and down: Change slope of duration line segment <br />
				<br />
				For markers: <br />
				• <m>Shift+Alt+click</m>: Add a new marker at the click position <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> (win) on a marker: Delete marker <br />
				• <m>click+drag</m> on a marker: Change the marker onset <br />
				   ↪ Add the <m>Shift</m> key to have markers snap to chord onset, note tails or pitch breakpoints <br />
				   ↪ Add the <m>Shift+Cmd</m> keys (mac) or <m>Shift+Ctrl</m> keys (win) for fine editing <br />
				   ↪ Add the <m>Ctrl</m> key (mac) in order to move anything beyond the marker while moving the marker <br />
				   ↪ Add the <m>Ctrl+Cmd</m> key (mac) in order to stretch the region between the marker and the previous one<br />
				• <m>Alt+click+drag</m>: Duplicate the marker into a new one with an unique name <br />
				• <m>doubleclick</m> on a marker name: Edit marker name <br />
				<br />
				For slots: <br />
				Common commands for all slots: <br />
				• <m>doubleclick</m> on the slot window header (e.g. on the slot name): Edit the slot content in external editor. <br />
				• <m>Cmd+doubleclick</m> on the slot window header (e.g. on the slot name): Erase all the slot content. <br />
				<br />
				For slots of type "function" and "3dfunction": <br />
				• <m>click</m> inside the active part of the slot window: Add a point. <br />
				• <m>Shift+click+drag</m>: Draw a rectangle to add/remove points to the current selection. <br />
				• <m>click</m> on the slot window header (upper strip): Clear current selection. <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> (win) on a point: Delete clicked point (or all selected points, if point was selected). <br />
				• <m>click+drag</m> on a point: Change the position of the point (or all selected points, if point was selected). <br />
				   ↪ Add the <m>Shift</m> key to change either the horizontal or the vertical coordinate. <br />
				   ↪ Add the <m>Shift+Alt</m> keys and drag vertically to snap the Y coordinate of the point to one of the previously defined <m>ysnap</m> values (in the <m>slotinfo</m>). <br />
				   ↪ Add the <m>Shift+Ctrl</m> keys (mac) to move the point together with all the following ones. <br />
				   ↪ Add the <m>Alt</m> key to delete all neighbours points while dragging. <br />
				• <m>click+drag</m> on a segment: Change the vertical position of the segment ("function" slot only). <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win) on a segment ("function" slot only) or
				on the ending point of a segment (also "3dfunction" slot): Change the slope of the segment. <br />
				• <m>doubleclick</m> on a point: snap it to the average position between the previous and the next point. <br />
				   ↪ Add the <m>Shift</m> key to snap the point to the Y value of the previous one. <br />
				   ↪ Add the <m>Alt</m> key to snap the point to the Y value of the next one. <br />
				• <m>Ctrl+Alt+click+drag</m> (mac) or <m>Shift+Ctrl+Alt+click+drag</m> (win) on a point: drag up/down to change its Z coordinate ("3dfunction" slot only). <br />
				   ↪ Add the <m>Shift</m> key to snap the Z coordinate of the point to one of the previously defined <m>zsnap</m> values ("3dfunction" only). <br />
				<br />
				For slots of type "int", "float": <br />
				• <m>click</m> on the strip: Add or modify existing number. <br />
				• <m>click+drag</m> on the handle: Modify existing number. <br />
				   ↪ Add the <m>Shift+Cmd</m> (mac) keys to enter the fine editing mode (only for cutoff frequency change). <br />
				• <m>Cmd+Alt+click</m> (mac) or <m>Ctrl+Alt+click</m> (win) on the strip: Revert the number to the <m>default</m> field defined in the <m>slotinfo</m>. <br />
				• <m>Cmd+click</m> on a strip: Delete the number <br />
				• <m>doubleclick</m> on the displayed number: Type in new number directly <br />
				<br />
				For slots of type "intlist" and "floatlist": <br />
				• <m>click</m> on a strip: Add or modify existing number. <br />
				• <m>click+drag</m> on the handle: Modify existing number. <br />
				   ↪ Add the <m>Shift+Cmd</m> (mac) keys to enter the fine editing mode (only for cutoff frequency change). <br />
				• <m>Cmd+Alt+click</m> (mac) or <m>Ctrl+Alt+click</m> (win) on a strip: Revert the number to the <m>default</m> field defined in the <m>slotinfo</m>. <br />
				• <m>Cmd+click</m> on a strip: Delete the number <br />
				• <m>click</m> on the "add number..." label: Append a number to the list (slot "intlist" and "floatlist" only). <br />
				<br />
				For slots of type "text" and "llll": <br />
				• <m>doubleclick</m> on the slot window: Edit text or llll directly. <br />
				<br />
				For slots of type "filelist": <br />
				• <m>click</m> on the "add file..." label: Append a file to the list (choosen via a dialog box). <br />
				• <m>Shift+click</m> on a file name: Replace the file witha  new one (choosen via a dialog box). <br />
				• <m>click</m> on a file name: Make it active. <br />
				• <m>Cmd+click</m> on a file name: Delete the file. <br />
				<br />
				For slots of type "color": <br />
				• <m>doubleclick</m>: Start defining a color (if slot is empty). <br />
				• <m>click</m> or <m>click+drag</m>: Change the color or the hue (if clicking on the side bar). <br />
				   ↪ Add the <m>Shift+Cmd</m> (mac) keys to enter the fine editing mode (only for cutoff frequency change). <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win) on the main rectangle: Change alpha value (transparency) by dragging up or down. <br />
				<br />
				For slots of type "spat": <br />
				• <m>click</m>: Add a spat point. <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> (win) on a spat point: Delete clicked spat point. <br />
				• <m>click+drag</m> on a point: Change the position of the point. <br />
				   ↪ Add the <m>Shift</m> key to change either the horizontal or the vertical coordinate. <br />
				   ↪ Add the <m>Shift+Ctrl</m> keys (mac) to move the spat point together with all the following ones. <br />
				   ↪ Add the <m>Alt</m> key to delete all neighbours spat points while dragging. <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win) on a spat point: Drag up or down to change the angle. <br />
				• <m>Alt+click</m> on a spat point: Switch interpolation type (from linear to circular or vice versa). <br />
				<br />
				For slots of type "togglematrix": <br />
				• <m>click</m> on a cell: Toggle the cell value <br />
				<br />
				For slots of type "intmatrix", "floatmatrix": <br />
				• <m>click</m> or <m>click+drag</m> on a cell: Change the cell value <br />
				   ↪ Add the <m>Shift+Cmd</m> (mac) keys to enter the fine editing mode (only for cutoff frequency change). <br />
				• <m>Cmd+Alt+click</m> (mac) or <m>Ctrl+Alt+click</m> (win) on a cell: Revert the number to the <m>default</m> field defined in the <m>slotinfo</m>. <br />
				<br />
				For slots of type "filter": <br />
				• <m>rightclick</m> or <m>twofingerstap</m>: Choose or change the filter type. <br />
				• <m>click+drag</m> left or right: Change cutoff frequency. <br />
				   ↪ Add the <m>Shift+Cmd</m> (mac) or <m>Shift+Ctrl</m> (win) keys to enter the fine editing mode. <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win) up or down: Change Q (or slope). <br />
				• <m>Shift+click+drag</m> up or down: Change gain. <br />
				• <m>Cmd+Alt+click</m> (mac) or <m>Ctrl+Alt+click</m> (win): Revert gain to 0dB. <br />
				<br />
				For slots of type "dynfilter": <br />
				• <m>doubleclick</m>: Add a filter at the click position <br />
				• <m>rightclick</m> or <m>twofingerstap</m> on a filter column: Choose or change the filter type. <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> on a filter column: Delete filter. <br />
				• <m>click+drag</m> on a filter column: Change filter cutoff frequency by dragging up or down. <br />
				• <m>click+drag</m> on a red square: Change filter cutoff frequency by dragging up or down, change temporal position by dragging left or right. <br />
				   ↪ Add the <m>Shift</m> key to change either the horizontal or the vertical coordinate. <br />
				   ↪ Add the <m>Shift+Cmd</m> (mac) keys to enter the fine editing mode (only for cutoff frequency change). <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win) on a filter column: Change Q (or slope) by dragging up or down. <br />
				• <m>Shift+Ctrl+click+drag</m> (mac) on a filter column: Change gain by dragging up or down. <br />
				• <m>Cmd+Alt+click</m> (mac) or <m>Ctrl+Alt+click</m> (win) on a filter column: Revert gain to 0dB. <br />
				<br />
				For slots of type "articulations": <br />
				• <m>click</m>: Add an articulation. <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> (win): Delete an articulation. <br />
				<br />
				For slots of type "notehead": <br />
				• <m>click</m>: Change notehead. <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> (win): Delete notehead, i.e. revert to default notehead. <br />
				<br />
				For slots of type "dynamics": <br />
				• <m>double click</m>: Edit dynamics. <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> (win): Delete dynamics. <br />
				<br />
				Linear editing: <br />
				• <m>Ctrl+click</m> (mac) or <m>Shift+Ctrl+click</m> (win) on a staff, avoiding the noteheads: Enter linear editing mode <br />
				• <m>click</m> outside the staves while in linear editing mode: Exit linear editing mode <br />
			</description>
		</method>
		<method name="addbreakpoint">
			<arg name="relative_x_position" optional="0" type="float" />
			<arg name="delta_midicents" optional="0" type="float/symbol" />
			<arg name="slope" optional="1" type="float" />
			<arg name="velocity" optional="1" type="int" />
			<digest>
				Add a pitch breakpoint to each selected note
			</digest>
			<description>
				Syntax: <b>addbreakpoint <m>&lt;float: relative_x_position&gt;</m> <m>&lt;float/symbol: delta_midicents&gt;</m> <m>[&lt;float: slope&gt;]</m> <m>[&lt;int: velocity&gt;]</m> </b><br />
				Examples:<br />
				• <b>addbreakpoint 0.5 200</b>   <i>→ add a breakpoint at the middle of the note of +200cents</i><br />
				• <b>addbreakpoint 0.5 200 0.2</b>   <i>→ the same, with slope 0.2</i><br />
				• <b>addbreakpoint 0.5 200 0.2 80</b>   <i>→ the same, with velocity 80</i><br />
				• <b>addbreakpoint 0.5 auto</b>   <i>→ pop out a breakpoint in the middle of the duration line</i><br />
				<br />
				Adds a pitch breakpoint to each one of the selected notes.
				The breakpoint is given by three arguments: <br />
				- a float number between 0 and 1, setting the relative position of the pitch breakpoint
				with respect to the note duration line (0 being the note head, 1 being the note tail).
				0 and 1 should be avoided (since a notehead and notetail already exists for any note), so the
				values should be striclty greater than 0 and strictly less than 1. <br />
				- a number setting the pitch difference (in midicents) of the breakpoint with respect to the main
				note's pitch. This can be replaced by the "auto" symbol to infer the pitch from the existing duration line.
				- an optional slope parameter, between -1 and 1, setting the slope of the segment of duration line preceding the breakpoint
				(0 being linear, default).
				- an optional velocity parameter, between 1 and 127, but only if the <m>breakpointshavevelocity</m> attribute is active.
			</description>
		</method>
		<method name="addchord">
			<arg name="voice_number" optional="1" type="int" />
			<arg name="chord" optional="0" type="llll" />
			<digest>
				Add a chord
			</digest>
			<description>
				Syntax: <b>addchord <m>[&lt;int: voice_number&gt;]</m> <m>&lt;llll: chord&gt;</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>addchord [1000 [6000 500 50]]</b>   <i>→ add a middle C at 1s, lasting 0.5s and with velocity 50</i><br />
				• <b>addchord 2 [1000 [6000 500 50]]</b>   <i>→ the same, in second voice</i><br />
				• <b>addchord 2 [1000 [6000 500 50]] @sel 1</b>   <i>→ the same, also selecting the chord</i><br />
				• <b>addchord 2 [1000 [6000 500 50] [7200 0.5 50]]</b>   <i>→ add a chord with two notes</i><br />
				• <b>addchord 2 [1000 [6000 500 50 [slots [3 10 20 30]]] [7200 0.5 50 [breakpoints [0 0 0] [1 -500 0]]]]</b>   <i>→ and with extra information</i><br />
				<br />
				Message attributes:<br />
				<m>@sel</m> (int, default: 0): Also select the added chord<br />
				<br />
				An <m>addchord</m> message will add a new chord to the existing ones.
				The first optional integer argument is the number of the voice in which the chord should be placed.
				Then, the chord must be given in its gathered syntax llll form as argument. For instance, <b>addchord 2 [1000 [6100 1000 50]]</b>
				adds a chord in the second voice having onset 1000 and a single note (pitch 6100 midicents, duration 1000 ms, velocity 50).
				If no voice number is given, first voice is used by default. <br /> <br />
				For <o>bach.roll</o>, the gathered syntax for any chord, in its simplest form <b>[<m>onset_ms</m> <m>NOTE1</m> <m>NOTE2</m>... <m>chord_flag</m>]</b>
				where <m>onset_ms</m> is the onset of the chord (starting temporal point) in milliseconds each <m>NOTE</m>
				is an llll representing a note in gathered syntax, and the <m>chord_flag</m> is an optional bitfield summing values of
				1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				In its most general form, each chord can have a specification defining its name(s). This specification must be in the form
				<b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>, and must be put after the last note llll,
				before the <m>chord_flag</m>. For instance, a chord definition might
				have the form <b>[500 [7000. 500 127] [7200. 1200 100] [name paul] 0]</b>
				<br /> <br />
				For <o>bach.roll</o>, the gathered syntax for any note is, in its simplest form <b>[<m>pitch_cents</m> <m>duration</m> <m>velocity</m> <m>note_flag</m>]</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>duration</m> is measured in milliseconds, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining
				graphics, pitch breakpoints, slots, names.
				Each of these specifications is done in the form <b>[<m>specification_name</m> <m>SPECIFICATION CONTENT</m>]</b>, and must be put after the <m>velocity</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a note definition might have the form
				<b>[7300. 136. 127 [graphic 7400 -1/2] [slots [1 [0. 0. 0.] [0.294118 81.138889 0.] [0.294118 38.805556 0.] [1. 0. 0.]]] [name pippo] 0 ]</b>
				<br /> <br />
				Instead of MIDIcents (or cents), one can also instert pitches.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names are in anglo-saxon syntax ("C", "D", "E"...), and are case insentitive. Middle C is C5.
				They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>D#4</b>). <br />
				Accidentals are: <b>#</b> [sharp], <b>b</b> [flat], <b>x</b> [double sharp], <b>q</b> [quartertone sharp], <b>d</b> (quartertone flat),
				<b>^</b> [eighth-tone sharp], <b>v</b> (eighth-tone flat)
				One can also extend the accidental by setting a rational specification followed by a <b>t</b>. For instance <b>C5+1/16t</b> is
				middle C, 1/16 tone up.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>[name john george]</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>[name [high 1] [low 2]]</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				<br />				See also:<m>gluechord</m>,<m>addchords</m>,<m>delete</m><br />
			</description>
		</method>
		<method name="addchords">
			<arg name="offset" optional="1" type="number" />
			<arg name="chords" optional="1" type="llll" />
			<digest>
				Add several chords
			</digest>
			<description>
				Syntax: <b>addchords <m>[&lt;number: offset&gt;]</m> <m>[&lt;llll: chords&gt;]</m> </b><br />
				Examples:<br />
				• <b>addchords [[217 [7185 492 100]] [971 [6057 492 100]]] [[1665 [7157 492 100]]]</b>   <i>→ add some chords in gathered syntax</i><br />
				• <b>addchords 1500 [[217 [7185 492 100]] [971 [6057 492 100]]] [[1665 [7157 492 100]]]</b>   <i>→ same thing, shifted by 1.5 seconds</i><br />
				<br />
				An <m>addchords</m> message will add several chords to the existing ones.
				If the message has no arguments, the chords parameters are supposed to have been inserted through the separate parameter inlets,
				and the <m>addchords</m> message will essentially act like a <m>bang</m> which in turns will preserve the existing content,
				and add the newly introduced chords. Refer to the <m>llll</m> message to know more about separate parameter syntax of the inlets.<br />
				If the message has arguments, the first optional one is a number setting an offset (in millisecond) for the chords to be added.
				Further arguments are supposed to be llll form, exactly in in the same syntax as the whole <o>bach.roll</o>
				gathered syntax (without header specification): one llll for each voice,
				containing one llll for each chord to add (in chord gathered syntax, also see the <m>addchord</m> message). If for a given voice
				you don't need to add any chord, just set a <b>[]</b> llll.
				More precisely the expected syntax for the argument is <b>[<m>VOICE1</m> <m>VOICE2</m>...]</b>
				where each voice is an llll in gathered syntax. <br /> <br />
				For instance, a valid message would be <b>addchords [[217. [7185. 492. 100]] [971. [6057. 492. 100]]] [[1665. [7157. 492. 100]]]</b>
				<br /> <br />
				For <o>bach.roll</o>, the gathered syntax for any voice, in its simplest form <b>[<m>CHORD1</m> <m>CHORD1</m>... <m>voice_flag</m>]</b>
				where each <m>CHORD</m> is an llll representing a chord in gathered syntax, and the <m>voice_flag</m> is an optional bitfield summing values of
				1 (if voice is locked), 2 (if voice is muted), 4 (if voice is solo). <br />
				For <o>bach.roll</o>, the gathered syntax for any chord, in its simplest form <b>[<m>onset_ms</m> <m>NOTE1</m> <m>NOTE2</m>... <m>chord_flag</m>]</b>
				where <m>onset_ms</m> is the onset of the chord (starting temporal point) in milliseconds each <m>NOTE</m>
				is an llll representing a note in gathered syntax, and the <m>chord_flag</m> is an optional bitfield summing values of
				1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				In its most general form, each chord can have a specification defining its name(s). This specification must be in the form
				<b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>, and must be put after the last note llll,
				before the <m>chord_flag</m>. For instance, a chord definition might
				have the form <b>[500 [7000. 500 127] [7200. 1200 100] [name paul] 0]</b>
				<br /> <br />
				For <o>bach.roll</o>, the gathered syntax for any note is, in its simplest form <b>[<m>pitch_cents</m> <m>duration</m> <m>velocity</m> <m>note_flag</m>]</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>duration</m> is measured in milliseconds, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining
				graphics, pitch breakpoints, slots, names.
				Each of these specifications is done in the form <b>[<m>specification_name</m> <m>SPECIFICATION CONTENT</m>]</b>, and must be put after the <m>velocity</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a note definition might have the form
				<b>[7300. 136. 127 [graphic 7400 -1/2] [slots [1 [0. 0. 0.] [0.294118 81.138889 0.] [0.294118 38.805556 0.] [1. 0. 0.]]] [name pippo] 0 ]</b>
				<br /> <br />
				Instead of MIDIcents (or cents), one can also instert pitches.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names are in anglo-saxon syntax ("C", "D", "E"...), and are case insentitive. Middle C is C5.
				They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>D#4</b>). <br />
				Accidentals are: <b>#</b> [sharp], <b>b</b> [flat], <b>x</b> [double sharp], <b>q</b> [quartertone sharp], <b>d</b> (quartertone flat),
				<b>^</b> [eighth-tone sharp], <b>v</b> (eighth-tone flat)
				One can also extend the accidental by setting a rational specification followed by a <b>t</b>. For instance <b>C5+1/16t</b> is
				middle C, 1/16 tone up.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>[name john george]</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>[name [high 1] [low 2]]</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				<br />				See also:<m>addchord</m><br />
			</description>
		</method>
		<method name="addmarker">
			<arg name="position" optional="0" type="float/symbol" />
			<arg name="name_or_names" optional="0" type="llll" />
			<arg name="role" optional="1" type="symbol" />
			<arg name="content" optional="1" type="llll" />
			<digest>
				Add a marker
			</digest>
			<description>
				Syntax: <b>addmarker <m>&lt;float/symbol: position&gt;</m> <m>&lt;llll: name_or_names&gt;</m> <m>[&lt;symbol: role&gt;]</m> <m>[&lt;llll: content&gt;]</m> </b><br />
				Examples:<br />
				• <b>addmarker 2000 George</b>   <i>→ add a marker named 'George' at 2s</i><br />
				• <b>addmarker 2000 [Foo Fee Faa]</b>   <i>→ the same, with a complex llll name</i><br />
				• <b>addmarker cursor John</b>   <i>→ add a 'John' marker at the current playhead position</i><br />
				• <b>addmarker 1000 whatever barline</b>   <i>→ add a barline marker at 1s</i><br />
				• <b>addmarker 500 whatever division</b>   <i>→ add a division marker at 0.5s</i><br />
				• <b>addmarker 0 whatever timesig [2 4]</b>   <i>→ add a 2/4 time signature marker at the beginning</i><br />
				• <b>addmarker 0 whatever tempo [1/4 120]</b>   <i>→ add a quarter = 120 tempo marker at the beginning</i><br />
				<br />
				The <m>addmarker</m> adds a marker with a specified name at a specified position in the score.
				At least two arguments are needed: the position of the marker in milliseconds (or the "cursor" symbol) and the marker name, as symbol.
				For instance, <b>addmarker 1000 foo</b> adds a marker at 1000ms with the name "foo".
				If more than one name need to be associated to the marker, the symbol can be replaced by a list of symbols,
				for instance <b>addmarker 1000 [foo fee]</b>. If no names need to be associated to the marker, leave <b>[]</b> as
				name llll. The millisecond position can be replaced by the "cursor" symbol or by the "end" symbol (end of score). <br />
				If the marker has a role (see below), this should be stated as symbol as third argument.    The choice is among the
				following symbols: "none" (default: no role), "timesig" (time signature), "tempo", "barline" and "division".
				If the specified role requires a content, this should be indicated as fourth argument. For instance
				<b>addmarker 0 [not important] timesig [4 4]</b> adds a marker at the beginning of the <o>bach.roll</o>, having a
				time signature role, corresponding to a 4/4 time signature. <br /> <br />
				In <o>bach.roll</o>, one can assign a role for each marker, so that they can represent elements such as
				time signatures, tempi, barline, measure divisions. Time signature markers and tempi markers
				also require a "content", i.e. an llll specifying the time signature or the tempo.
				When adding a marker via the <m>addmarker</m> message, the role can be specified as third parameter,
				and the content as fourth parameter. Alternatively, roles and content can be set via the marker inspector.
				Roles can be: <br />
				<m>Time Signature</m>: set by the symbol "timesig", it represents a time signature, and expects the time signature llll as content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo timesig [4 4]</b>.<br />
				<m>Tempo</m>: set by the symbol "tempo", it represents a time signature, and expects the tempo llll as content (tempo figure and tempo
				value). For instance, a message to add such a marker could be <b>addmarker 0 foo tempo [1/8 50]</b>, meaning
				that the tempo is 1/8 = 50.<br />
				<m>Measure Barlines</m>: set by the symbol "barline", it represents a barline, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo barline</b>. <br />
				<m>Measure Division</m>: set by the symbol "division", it represents a measure division, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo division</b>. <br />
				<m>Measure Subdivision</m>: set by the symbol "subdivision", it represents a measure subdivision, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo subdivision</b>. <br />
				All these marker can be parsed by bach.quantize in order to automatically retrieve the measureinfo of the
				entire bach.roll.
				<br /> <br />
				<br />				See also:<m>deletemarker</m>,<m>clearmarkers</m><br />
			</description>
		</method>
		<method name="addslur">
			<arg name="selection" optional="1" type="symbol" />
			<arg name="start_path" optional="1" type="llll" />
			<arg name="end_path" optional="1" type="llll" />
			<digest>
				Add a slur
			</digest>
			<description>
				Syntax: <b>addslur <m>[&lt;symbol: selection&gt;]</m> <m>[&lt;llll: start_path&gt;]</m> <m>[&lt;llll: end_path&gt;]</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>addslur [1 1 1] [1 3 2]</b>   <i>→ add a slur from the first chord to the second chord of the 3rd measure</i><br />
				• <b>addslur [1 1 1] [1 3 2] @name john</b>   <i>→ the same, with a name</i><br />
				<br />
				Message attributes:<br />
				<m>@name</m> (llll, default: null): Name(s) of the slur<br />
				<br />
				The <m>addslur</m> message adds a new slur.
				If "selection" is given as argument, then the selected items will be gathered under a slur.
				Otherwise, two argument are expected, containing the paths of the starting and ending chord of the slur as wrapped lllls.
				An optional message attribute "name" also sets the name(s) of the slur.
				<br />				See also:<m>clearslur</m><br />
			</description>
		</method>
		<method name="adjustadditionalstartpad">
			<arglist />
			<digest>
				Adjust additional start pad automatically
			</digest>
			<description>
				The <m>adjustadditionalstartpad</m> adjusts automatically the additional
				padding space at the beginning of the <o>bach.roll</o>, so that all accidentals
				of the notes near the beginning can be properly displayed. Also see the <m>additionalstartpad</m> attribute.
			</description>
		</method>
		<method name="appendslotitem">
			<arg name="slot_number_or_name" optional="0" type="int/symbol" />
			<arg name="slot_element" optional="0" type="llll" />
			<digest>
				Append a slot element at the end of a slot
			</digest>
			<description>
				Syntax: <b>appendslotitem <m>&lt;int/symbol: slot_number_or_name&gt;</m> <m>&lt;llll: slot_element&gt;</m> <i>[message attributes]</i> </b><br />				<br />
				Message attributes:<br />
				<m>@modify</m> (int, default: 0): If there is a point at the introduced X coordinate, modify it instead of adding a new one<br />
				<m>@thresh</m> (float, default: 0.): X coordinate threshold for the <m>modify</m> attribute<br />
				<br />
				A <m>appendslotitem</m> message will append a specific element at the end of a slot.
				The message works similarly to <m>changeslotitem</m> (see this latter to have more information).
				<br />				See also:<m>changeslotitem</m>,<m>prependslotitem</m>,<m>insertslotitem</m>,<m>deleteslotitem</m>,<m>setslot</m>,<m>eraseslot</m><br />
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Build content from separate parameters
			</digest>
			<description>
				A <m>bang</m> in any of the inlets will first rebuild new <o>bach.roll</o> content starting from
				the parameters given as input in the separate inlets (see <m>llll</m> method).
				If the <m>autoclear</m> attribute is set to 1,
				first of all the <m>bang</m> will clear the content of the <o>bach.roll</o>; if on the other hand
				the <m>autoclear</m> attribute is set to 0, the new parameter will modify the existing content.
				Not all the separate parameters need to be given to build the new content: if some are not given, default values
				will be used instead. Default onsets are 0ms, 1000ms, 2000ms..., but if you input less onsets than needed (e.g. just two)
				the difference between the last two onsets will be padded in case new chords are to be inserted. Default pitch in cents is 6000 (middle C).
				Default duration is 500ms, default velocity is 100, but in both cases the last one is padded if more chords than input parameters are
				to be created. Default extras are no extras.
			</description>
		</method>
		<method name="cents">
			<arg name="cents" optional="0" type="number/llll/anything" />
			<digest>
				Modify the cents of selected items
			</digest>
			<description>
				Syntax: <b>cents <m>&lt;number/llll/anything: cents&gt;</m> </b><br />
				Examples:<br />
				• <b>cents 6000</b>   <i>→ change selected notes to middle C's</i><br />
				• <b>cents = 6000</b>   <i>→ exactly the same</i><br />
				• <b>cents = cents * 1.2</b>   <i>→ stretch pitches</i><br />
				• <b>cents = "random[48, 73]*100"</b>   <i>→ assign pitch randomly</i><br />
				• <b>cents = 6000 + [cents % 1200]</b>   <i>→ collapse to middle octave</i><br />
				<br />
				The word <m>cents</m>, followed by a number, sets the new pitch, in midicents, for all
				the selected notation items.
				If a list of numbers is given as arguments, this is applied to selected chords notewise: bottommost note will be assigned
				the first value, the one above will be assigned the next one, and so on. If less values than selected notes in the chord
				are given, last value is padded. <br /> <br />
				Instead of MIDIcents (or cents), one can also instert pitches.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names are in anglo-saxon syntax ("C", "D", "E"...), and are case insentitive. Middle C is C5.
				They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>D#4</b>). <br />
				Accidentals are: <b>#</b> [sharp], <b>b</b> [flat], <b>x</b> [double sharp], <b>q</b> [quartertone sharp], <b>d</b> (quartertone flat),
				<b>^</b> [eighth-tone sharp], <b>v</b> (eighth-tone flat)
				One can also extend the accidental by setting a rational specification followed by a <b>t</b>. For instance <b>C5+1/16t</b> is
				middle C, 1/16 tone up.
				<br /> <br />
				Any of the numbers in the cents syntax can be replaced by an llll containing a relative modification of the existing cents.
				If a single number is inserted, this can be replaced by a generic equation.
				All parameters, except for <o>bach.score</o>'s timepoints, also support a relative modification syntax, which modifies the existing values instead
				Relative modifications of a parameter are handled via lllls of the type <b>[<m>value</m> <m>function</m>]</b>, where
				the <m>function</m> is one of the following symbols: "plus", "minus", "times", "div". Such modification applies the corresponding
				function to the current value of the parameter and the inserted <m>value</m>. For instance, <b>[100 minus]</b> removes 100 to the current
				value of the parameter, while <b>[2. times]</b> multiplies it by two.
				<br /> <br />
				All separate parameters, except for measureinfo, ties and slots, can also be modified via a generic equation. In order to do so,
				the message symbol must be followed by an <m>=</m> sign (with spaces before and after it), and then by the desired equation.
				The standard symbolic variables are available. <br />
				Symbolic variables are variables that can be used in the conditional selection or parameter modification processes.
				These are: <m>onset</m> (in ms), <m>duration</m> (in ms), <m>velocity</m>, <m>cents</m> (pitch in MIDIcents),
				<m>pitch</m> (diatonic pitch), <m>poc</m> (pitch or cents, depending on what was defined by the user),
				<m>tail</m> (position of the note end, in ms), <m>voice</m> (voice number), <m>part</m> (part number),
				<m>voiceensemble</m> (voiceensemble number).
				For <o>bach.score</o> you can also use: <m>symduration</m> (symbolic rational duration),
				<m>symonset</m> (symbolic rational onset inside the measure), <m>symtail</m> (sum of the two previous), <m>measure</m> (the measure number),
				<m>tie</m> (which is 1 if a tie starts, 2 if a tie ends and 3 if a tie both starts and ends, 0 otherwise) and <m>grace</m> (1 for
				grace chords, 0 otherwise). <br />
				You can also use the variables <m>numnotes</m>, <m>numchords</m> and <m>nummeasures</m> to determine the number of notes/chords/measures
				that a otation item has (e.g. the number of chords in a measure, or the number of notes in a chord). <br />
				In addition, you also have the <m>index</m> symbol, corresponding to the index of the item: the index of the note in the chord (bottom-up),
				the index of the chord in the measure or voice (left to right), the index of the measures, voices, markers, pitch breakpoints, etc.
				(all left to right). In case you need to distinguish between chord index and note index, for a given note, you can explicitly use the
				<m>chordindex</m> or <m>noteindex</m> symbols. <br />
				For instance, one could define <b>velocity = duration / 100. + onset * 0.01</b> or <b>cents = cents + 200</b>, or
				<b>onset = [cents - 6000] / 100 + 2000 * [voice - 1]</b>.
				The equation syntax extends in a sense the relative modification syntax; however it is applied to the globality of the selection, and
				one cannot apply different equations to different notes inside the chord.
				<br /> <br />
			</description>
		</method>
		<method name="change">
			<arglist />
			<digest>
				Change properties of an element
			</digest>
			<description>
				Generic changes in a score can be obtained via the syntax <br />
				<b>insert/remove/change <m>element_type</m> <m>element_path</m> <m>property_name</m> <m>content_as_llll</m></b> <br />
				If the initial symbol is "remove", the last two fields are irrelevant; if the initial symbol is "
				Properties are the ones displayed in the bach inspector for the specific element, plus the symbol "state", which
				sets the whole state of the element from a gathered syntax llll. <br />
			</description>
		</method>
		<method name="changeslotitem">
			<arg name="slot_number_or_name" optional="0" type="int/symbol" />
			<arg name="element_index" optional="0" type="int" />
			<arg name="slot_element" optional="0" type="llll" />
			<digest>
				Change a specific slot element inside a specific slot of selected items
			</digest>
			<description>
				Syntax: <b>changeslotitem <m>&lt;int/symbol: slot_number_or_name&gt;</m> <m>&lt;int: element_index&gt;</m> <m>&lt;llll: slot_element&gt;</m> </b><br />
				Examples:<br />
				• <b>changeslotitem 3 2 13</b>   <i>→ set the 2nd element of 3nd (int or float) slot to 13</i><br />
				• <b>changeslotitem 3 0 13</b>   <i>→ append 13 at the end of slot 3</i><br />
				• <b>changeslotitem 1 2 0.5 10 0</b>   <i>→ change the 2nd point of the 1st (function) slot to (0.5 10 0) in (x y slope) form</i><br />
				• <b>changeslotitem active 2 0.5 10 0</b>   <i>→ the same, for the currently open slot</i><br />
				• <b>changeslotitem spectrenv 2 0.5 10 0</b>   <i>→ the same, for the a slot named 'spectrenv'</i><br />
				• <b>changeslotitem 9 1 highpass 400 0 2</b>   <i>→ set the 1st element of 9nd (dynfilter) slot to "highpass 400 0 2"</i><br />
				• <b>changeslotitem 8 0 Max.app 0</b>   <i>→ append the Max.app file in the 8th (filelist) slot, and make it active</i><br />
				• <b>changeslotitem 8 0 0 2</b>   <i>→ Make 2nd file active in 8th (filelist) slot</i><br />
				<br />
				A <m>changeslotitem</m> message will change a specific element inside a slot (possibly containing more than one element, such as
				a <m>function</m> slot, or an <m>intlist</m> slot...) of any selected note.
				The syntax is <b>changeslotitem <m>slot_number</m> <m>element_index</m> <m>SLOT_ELEMENT_CONTENT</m></b>. <br />
				Instead of the slot number, you can use slot names, or you can the word "active" to refer to the currently open slot.
				The <m>element_index</m> is the number identifying the position of the element to be changed (e.g., for a <m>function</m> slot: 1 for the first point, 2 for the second, and so on).
				The symbol "all" can replace the element index, in order to change all elements.
				The element content is a single element in the lists of the slot content syntax: a single point for a slot <m>function</m>, a single number for an <m>intlist</m> or <m>floatlist</m> slot,
				and so on. Such element must be unwrapped from its outer level of parentheses (if any). For instance, for a function,
				a good syntax is <b>changeslotitem 2 3 0.5 20 0</b> which will change the 3rd point of the function contained in the second slot
				to the point <b>[0.5 20 0]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				<br />				See also:<m>appendslotitem</m>,<m>prependslotitem</m>,<m>insertslotitem</m>,<m>deleteslotitem</m>,<m>setslot</m>,<m>eraseslot</m><br />
			</description>
		</method>
		<method name="checkdynamics">
			<arg name="selection" optional="1" type="symbol" />
			<arg name="slot_number" optional="1" type="int" />
			<digest>
				Check dynamics for selection
			</digest>
			<description>
				Syntax: <b>checkdynamics <m>[&lt;symbol: selection&gt;]</m> <m>[&lt;int: slot_number&gt;]</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>checkdynamics</b>   <i>→ check dynamics throughout the whole score</i><br />
				• <b>checkdynamics selection</b>   <i>→ check dynamics, for selected items only</i><br />
				<br />
				Message attributes:<br />
				<m>@inconsistent</m> (int, default: 1): If non-zero, checks inconsistent dynamics<br />
				<m>@unnecessary</m> (int, default: 1): If non-zero, checks unnecessary dynamics<br />
				<br />
				A <m>checkdynamics</m> message will check the correctness of the dynamics sequence, for the whole score or - if
				"selection" is set as first argument, for the selected items only. The dynamics sequence considered is the one contained in the slot
				linked to dynamics, if any (see <m>linkdynamicstoslot</m>), or in another slot, if given as integer argument. <br />
				Message attributes are:
				• "inconsistent": value is expected to be 0 or 1, telling if the checking should happen on inconsistent dynamics
				• "unnecessary": value is expected to be 0 or 1, telling if the checking should happen on unnecessary dynamics
				<br />				See also:<m>fixdynamics</m><br />
			</description>
		</method>
		<method name="clear">
			<arg name="voice_number" optional="1" type="int" />
			<digest>
				Clear all the content or a specific parameter inlet
			</digest>
			<description>
				Syntax: <b>clear <m>[&lt;int: voice_number&gt;]</m> </b><br />
				Examples:<br />
				• <b>clear</b>   <i>→ clear all items</i><br />
				• <b>clear 3</b>   <i>→ the same, only for voice 3</i><br />
				<br />
				A <m>clear</m> message sent in the first inlet will delete all the chords of the <o>bach.roll</o>, and all the markers.
				If an integer argument is given, the message will only clear the content of a specific voice (the one corresponding to the input integer number). <br />
				A <m>clear</m> message sent in any of the separate parameters inlets (all inlets but the first one) will clear the content which was
				possibly stored in such inlet. This is equivalent to sending a <b>nil</b> or <b>[]</b> message in that inlet.
				<br />				See also:<m>clearall</m>,<m>clearbreakpoints</m><br />
			</description>
		</method>
		<method name="clearall">
			<arglist />
			<digest>
				Clear all separate parameters inlets
			</digest>
			<description>
				A <m>clearall</m> message will clear the content input in all the separate parameters inlets (all inlets but the first one).
				This is equivalent to sending a <b>nil</b> or <b>[]</b> message in any of such inlets. <br />
				<br />				See also:<m>clear</m><br />
			</description>
		</method>
		<method name="clearbreakpoints">
			<arg name="voice_number" optional="1" type="int" />
			<digest>
				Clear all the pitch breakpoints
			</digest>
			<description>
				Syntax: <b>clearbreakpoints <m>[&lt;int: voice_number&gt;]</m> </b><br />
				Examples:<br />
				• <b>clear</b>   <i>→ clear all pitch breakpoints</i><br />
				• <b>clear 3</b>   <i>→ the same, only for voice 3</i><br />
				<br />
				A <m>clearbreakpoints</m> message sent in the first inlet will delete all the pitch breakpoints inside the <o>bach.roll</o>, and
				reset the note tails.
				If an integer argument is given, the message will only clear the content of a specific voice (the one corresponding to the input integer number). <br />
				<br />				See also:<m>clear</m><br />
			</description>
		</method>
		<method name="clearmarkers">
			<arglist />
			<digest>
				Delete all markers
			</digest>
			<description>
				The <m>clearmarkers</m> message deletes all the markers in the notation object.
				<br />				See also:<m>addmarker</m>,<m>deletemarker</m><br />
			</description>
		</method>
		<method name="clearnames">
			<arg name="categories" optional="1" type="llll" />
			<digest>
				Clear all names in the score
			</digest>
			<description>
				Syntax: <b>clearnames <m>[&lt;llll: categories&gt;]</m> </b><br />
				Examples:<br />
				• <b>clearnames</b>   <i>→ delete all names</i><br />
				• <b>clearnames marker</b>   <i>→ only delete marker names</i><br />
				• <b>clearnames chord note</b>   <i>→ only delete chord and note names</i><br />
				<br />
				Clears the names of all notation items in the score (this includes voice names and marker names).
				If you want to only clear names for some category, add the category name(s) after the <m>clearnames</m> symbol. Names must be among the following ones:
				"chords", "voices", "notes", "markers".
				<br />				See also:<m>name</m>,<m>nameappend</m><br />
			</description>
		</method>
		<method name="clearselection">
			<arg name="voice_number" optional="1" type="int" />
			<digest>
				Clear current selection
			</digest>
			<description>
				Syntax: <b>clearselection <m>[&lt;int: voice_number&gt;]</m> </b><br />
				Examples:<br />
				• <b>clearselection</b>   <i>→ make no elements selected</i><br />
				• <b>clearselection 3</b>   <i>→ make no elements selected in voice 3</i><br />
				<br />
				The word <m>clearselection</m> removes all items from the selection (without deleting them),
				yielding a situation where no notation item is selected. If an integer is given as argument,
				it specifies a voice number for which the selection should be cleared (and will be kept for all other voices)
				<br />				See also:<m>sel</m>,<m>unsel</m>,<m>select</m><br />
			</description>
		</method>
		<method name="clearslurs">
			<arglist />
			<digest>
				Delete all slurs
			</digest>
			<description>
				The <m>clearslurs</m> message delets all the slurs in the notation object.
				<br />				See also:<m>addslur</m><br />
			</description>
		</method>
		<method name="clock">
			<arg name="setclock_name" optional="1" type="symbol" />
			<digest>
				Select a clock source
			</digest>
			<description>
				Syntax: <b>clock <m>[&lt;symbol: setclock_name&gt;]</m> </b><br />
				Examples:<br />
				• <b>clock ticker</b>   <i>→ link to 'ticker' setclock</i><br />
				• <b>clock</b>   <i>→ link to default clock</i><br />
				<br />
				The word <m>clock</m>, followed by the name of an existing <m>setclock</m> objects, sets the <o>bach.roll</o>
				object to be controlled by that <m>setclock</m> object rather than by Max's internal millisecond clock.
				The word <m>clock</m> by itself sets the <o>bach.roll</o> object back to using Max's regular millisecond clock.
			</description>
		</method>
		<method name="copy">
			<arg name="slot" optional="1" type="symbol" />
			<arg name="slot_number" optional="1" type="int/symbol" />
			<digest>
				Copy
			</digest>
			<description>
				Syntax: <b>copy <m>[&lt;symbol: slot&gt;]</m> <m>[&lt;int/symbol: slot_number&gt;]</m> </b><br />
				Examples:<br />
				• <b>copy</b>   <i>→ copy selection</i><br />
				• <b>copy slot 1</b>   <i>→ copy first slot</i><br />
				• <b>copy slot active</b>   <i>→ copy currently open slot</i><br />
				• <b>copy slot all</b>   <i>→ copy all slots</i><br />
				• <b>copy durationline</b>   <i>→ copy the duration line</i><br />
				• <b>copy slotinfo 3</b>   <i>→ copy structure of slot 3</i><br />
				<br />
				Copies into the global clipboard selected musical content or slot data.
				If no argument is given, the current selection is copied. <br />
				If a "durationline" symbol is given as argument, the duration line is copied. <br />
				If a "slot" symbol is given as argument,
				the content of the open slot window (if any) is copied; if in addition to the "slot" symbol an integer
				is given, such integer is the number of the slot whose content is copied (this will work even if no slot window is open);
				finally, this integer can be substituted by the "all" symbol to copy the content of all slots. <br />
				Exactly analogously, a "slotinfo" symbol can be used instead of "slot", and
				the information about the structure of the slot (slotinfo) identified by the following argument (an integer, a slot name or the "active"
				symbol) is copied.
				<br />				See also:<m>cut</m>,<m>paste</m><br />
			</description>
		</method>
		<method name="copyslot">
			<arg name="slot_from" optional="0" type="int/symbol" />
			<arg name="slot_to" optional="0" type="int/symbol" />
			<digest>
				Copy a slot to another one for selected items
			</digest>
			<description>
				Syntax: <b>copyslot <m>&lt;int/symbol: slot_from&gt;</m> <m>&lt;int/symbol: slot_to&gt;</m> </b><br />
				Examples:<br />
				• <b>copyslot 2 7</b>   <i>→ copy the content of slot 2 to slot 7 for selected items</i><br />
				• <b>copyslot 2 active</b>   <i>→ destination slot is the active slot</i><br />
				• <b>copyslot amplienv myfunction</b>   <i>→ copy the 'amplienv' slot to the 'myfunction' slot</i><br />
				<br />
				A <m>copyslot</m> message will copy the content of a given slot to another slot for any selected note.
				The slot number of the source slot and of the target slot are given as arguments.
				Instead of the slot numbers, you can use slot names, or you can the word "active" to refer to the currently open slot.
				<br />				See also:<m>moveslot</m>,<m>eraseslot</m>,<m>setslot</m>,<m>changeslotitem</m>,<m>resetslotinfo</m><br />
			</description>
		</method>
		<method name="cut">
			<arg name="slot" optional="1" type="symbol" />
			<arg name="slot_number" optional="1" type="int/symbol" />
			<digest>
				Cut
			</digest>
			<description>
				Syntax: <b>cut <m>[&lt;symbol: slot&gt;]</m> <m>[&lt;int/symbol: slot_number&gt;]</m> </b><br />
				Examples:<br />
				• <b>cut</b>   <i>→ cut selection</i><br />
				• <b>cut slot 1</b>   <i>→ cut first slot</i><br />
				• <b>cut slot active</b>   <i>→ cut currently open slot</i><br />
				• <b>cut slot all</b>   <i>→ cut all slot</i><br />
				• <b>cut durationline</b>   <i>→ cut the duration line</i><br />
				<br />
				Cuts, and puts global clipboard, selected musical content or slot data.
				The behavior and arguments of <m>cut</m> are exaclty as <m>copy</m>, with the addition that the copied
				content is subsequently deleted (see <m>copy</m> to know more).
				<br />				See also:<m>copy</m>,<m>paste</m><br />
			</description>
		</method>
		<method name="delete">
			<arglist />
			<digest>
				Delete current selected items
			</digest>
			<description>
				Examples:<br />
				• <b>delete</b>   <i>→ delete current selection</i><br />
				• <b>delete @transferslots 20 21</b>   <i>→ delete current selection, and transfer content of slot 20 and 21 to another chord note, if possible</i><br />
				• <b>delete @transferslots all</b>   <i>→ delete current selection, and transfer all slots</i><br />
				• <b>delete @transferslots all @empty 1</b>   <i>→ delete current selection, and transfer all slots, even the empty ones</i><br />
				<br />
				Message attributes:<br />
				<m>@transferslots</m> (llll, default: null): If non-null, when deleting notes from a chord, these slots will be transfered to another chord note whenever possible<br />
				<m>@empty</m> (int, default: 0): Also transfer empty slots<br />
				<br />
				The word <m>delete</m> simply deletes all the currently selected items.
				<br />
				When deleting notes from a chord, use the "@transferslots" specification to define a set of slots to be transfered to a neighbour note in the same chord,
				whenever possible. Use also "all" to transfer all slots, and "auto" to transfer a standard set of slots (dynamics, lyrics, articulations, annotations);
				use "dynamics", "lyrics", "noteheads", "articulations", "annotation" instead of slot numbers.
				Use the additional "@empty" message argument in order to tell with a 0/1 integer whether empty slots should also be transfered (by default: 0 = false).
				<br />				See also:<m>rippledelete</m>,<m>eraseslot</m><br />
			</description>
		</method>
		<method name="deletemarker">
			<arg name="marker_names" optional="0" type="list" />
			<digest>
				Delete a marker
			</digest>
			<description>
				Syntax: <b>deletemarker <m>&lt;list: marker_names&gt;</m> </b><br />
				Examples:<br />
				• <b>deletemarker Ringo</b>   <i>→ deletes first marker named Ringo</i><br />
				• <b>deletemarker Ringo Starr</b>   <i>→ deletes first marker with both Ringo and Starr as names</i><br />
				<br />
				The <m>deletemarker</m> message deletes a given marker, matching a given name or a llll of names.
				The name(s) can be introduced as a list, as argument. If more than one marker match such name(s), only the first
				one (in temporal order) is deleted.
				<br />				See also:<m>addmarker</m>,<m>clearmarkers</m>,<m>delete</m><br />
			</description>
		</method>
		<method name="deleteslotitem">
			<arg name="slot_number_or_name" optional="0" type="int/symbol" />
			<arg name="element_position_or_wrapped_xcoord" optional="0" type="int/llll" />
			<digest>
				Delete the slot element at a given position of a slot
			</digest>
			<description>
				Syntax: <b>deleteslotitem <m>&lt;int/symbol: slot_number_or_name&gt;</m> <m>&lt;int/llll: element_position_or_wrapped_xcoord&gt;</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>deleteslotitem 3 2</b>   <i>→ delete 2nd item of 3rd slot</i><br />
				• <b>deleteslotitem 3 [0.7]</b>   <i>→ delete item 3rd slot matching X = 0.7</i><br />
				• <b>deleteslotitem 3 [0.7] @thresh 0.1</b>   <i>→ the same, with a tolerance of 0.1</i><br />
				<br />
				Message attributes:<br />
				<m>@thresh</m> (float, default: 0.): Tolerance threshold for X matching<br />
				<br />
				A <m>deleteslotitem</m> message will delete a specific element at a given position in a slot.
				Two arguments are expected: the slot number (or name) and either the index of the slot item, or the
				wrapped X coordinate of the element to delete (use the <m>thresh</m> message argument to set a tolerance
				threshold for the X coordinate matching).
				<br />				See also:<m>appendslotitem</m>,<m>prependslotitem</m>,<m>insertslotitem</m>,<m>changeslotitem</m>,<m>setslot</m>,<m>eraseslot</m><br />
			</description>
		</method>
		<method name="deletevoice">
			<arg name="voice_number" optional="0" type="int" />
			<digest>
				Delete a voice
			</digest>
			<description>
				Syntax: <b>deletevoice <m>&lt;int: voice_number&gt;</m> </b><br />
				Example: <b>deletevoice 4</b>   <i>→ delete 4th voice</i><br />
				<br />
				A <m>deletevoice</m> message, followed by an integer number <m>N</m>, will delete the <m>N</m>-th voice from the score.
				<br />				See also:<m>insertvoice</m><br />
			</description>
		</method>
		<method name="distribute">
			<arglist />
			<digest>
				Evenly distribute onsets
			</digest>
			<description>
				Distributes onsets of selected items so that they are spaced evenly in time.
				<br />				See also:<m>onset</m><br />
			</description>
		</method>
		<method name="domain">
			<arg name="duration_or_starting_point_ms" optional="0" type="float" />
			<arg name="ending_point_ms" optional="1" type="float" />
			<arg name="ending_pad_pixels" optional="1" type="float" />
			<digest>
				Set the displayed domain
			</digest>
			<description>
				Syntax: <b>domain <m>&lt;float: duration_or_starting_point_ms&gt;</m> <m>[&lt;float: ending_point_ms&gt;]</m> <m>[&lt;float: ending_pad_pixels&gt;]</m> </b><br />
				Examples:<br />
				• <b>domain 4000</b>   <i>→ force the domain to contain 4s</i><br />
				• <b>domain 2000 3000</b>   <i>→ display the portion between 2s and 3s</i><br />
				• <b>domain 2000 3000 10</b>   <i>→ ...and leave 10 pixels of ending pad</i><br />
				<br />
				If the <m>domain</m> message is followed by a single number, this is considered as the size in milliseconds
				of the domain (i.e. the displayed portion of <o>bach.roll</o>), and such message will change the <m>zoom</m> so that the displayed
				portion of music has indeed that global duration. <br />
				If the <m>domain</m> message is followed by a two numbers, these are considered as the starting and ending domain points in milliseconds,
				and such message will change both the <m>zoom</m> and the scrollbar position so that the displayed
				portion of music starts from the input starting point and ends at the input ending point. <br />
				If a third argument is given, this is considered to be an ending pad in pixels (scaled with respect to the <m>vzoom</m>), so that the input ending point actually happens
				a certain number of pixels before (if pad is positive) or after (is pad is negative) the end of the displayed portion of music.
				<br />				See also:<m>getdomain</m>,<m>getdomainpixels</m>,<m>inscreen</m>,<m>inscreenpos</m><br />
			</description>
		</method>
		<method name="droplastundo">
			<arglist />
			<digest>
				Drop last undo step
			</digest>
			<description>
				A <m>droplastundo</m> message will prune the last undo step, by merging
				its information into the previous one.
				<br />				See also:<m>inhibitundo</m>,<m>undo</m>,<m>redo</m><br />
			</description>
		</method>
		<method name="dump">
			<arg name="selection" optional="1" type="symbol" />
			<arg name="dump_options" optional="1" type="list" />
			<digest>
				Dump information
			</digest>
			<description>
				Syntax: <b>dump <m>[&lt;symbol: selection&gt;]</m> <m>[&lt;list: dump_options&gt;]</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>dump</b>   <i>→ dump whole information from all outlets</i><br />
				• <b>dump selection</b>   <i>→ the same, but only for selected items</i><br />
				• <b>dump separate</b>   <i>→ dump separate-syntax outlets only</i><br />
				• <b>dump roll</b>   <i>→ dump first outlet only (gathered syntax)</i><br />
				• <b>dump onsets</b>   <i>→ dump onsets only</i><br />
				• <b>dump selection onsets</b>   <i>→ dump onsets for selection only</i><br />
				• <b>dump velocities</b>   <i>→ dump velocities only</i><br />
				• <b>dump pitches</b>   <i>→ dump pitch information as diatonic pitches</i><br />
				• <b>dump cents</b>   <i>→ dump pitch information as MIDIcents</i><br />
				• <b>dump body</b>   <i>→ dump first outlet only, but without dumping the header</i><br />
				• <b>dump header</b>   <i>→ the same, but only dumping the header</i><br />
				• <b>dump keys clefs body</b>   <i>→ dump keys, clefs and body from first outlet</i><br />
				• <b>dump selection markers</b>   <i>→ dump selected markers only</i><br />
				<br />
				Message attributes:<br />
				<m>@router</m> (symbol, default: none): Forced router<br />
				<m>@selection</m> (int, default: 0): Dump selection only<br />
				<br />
				A <m>dump</m> message will simply output
				the content of all separate parameters from all separate outlets (in separate syntax, right-to-left), and
				all the content of <o>bach.roll</o> in gathered syntax from the first outlet (header information included). See below to know more
				about gathered and separate syntaxes. <br />
				The <m>dump</m> message also accepts as argument one of the following symbols, which will only dump a portion of the global information: <br />
				- <b>onsets</b>: only dump the onsets (in separate syntax) from the second outlet. <br />
				- <b>cents</b>: only dump the pitches in MIDIcents form (in separate syntax) from the third outlet
				(this overrides the <m>outputpitchesseparate</m>, forcing the output to be in Cents), <br />
				- <b>pitches</b>: only dump the pitches as diatonic pitches (in separate syntax) from the third outlet
				(this overrides the <m>outputpitchesseparate</m>, forcing the output to be always diatonic pitches), <br />
				- <b>durations</b>: only dump the durations (in separate syntax) from the fourth outlet. <br />
				- <b>velocities</b>: only dump the velocities (in separate syntax) from the fifth outlet. <br />
				- <b>extras</b>: only dump the extras (in separate syntax) from the sixth outlet. <br />
				- <b>roll</b>: only dump the whole <o>bach.roll</o> gathered syntax from the first outlet (and nothing from the separate parameters outlets). <br />
				- <b>body</b>: only dump the whole <o>bach.roll</o> gathered syntax from the first outlet, and drop all the header specifications: only dump the
				body (content) of the <o>bach.roll</o>. <br />
				- <b>header</b>: only dump the whole <o>bach.roll</o> from the first outlet, dropping all the content (body) specification, and only
				outputting all the header specification. <br />
				Moreover, if one needs to only dump specific header elements, the <m>dump</m> message may also accept a list of symbols referring to them.
				Namely, the possibilities are the following ones: "keys", "clefs", "voicenames", "midichannels", "markers", "slotinfo", "command", "groups".
				Also the "body" symbol can always be added, in order to also dump the music content.
				For instance, <b>dump keys slotinfo voicenames</b> will dump the key signatures, the slotinfo and the voicenames,
				while, <b>dump keys slotinfo voicenames body</b> will do the same but will also output the music content (body).
				The order of the dumped elements does not correspond in general to the order of the symbols in the list.
				<br /> <br />
				The gathered syntax of a whole <o>bach.roll</o> is in the form <b>roll <m>HEADER</m> <m>BODY</m></b>, where
				the first symbol is optional as input (but always given as output). <m>HEADER</m> is an llll containing all the
				<o>bach.roll</o> meta-information (such as key signatures, clefs, markers...),
				while <m>BODY</m> has the form of a sequence of voices: <b>[<m>VOICE1</m> <m>VOICE2</m>...]</b>
				where each voice is an llll in gathered syntax (see below for more information about this). <br /> <br />
				The header contains meta-information about the score. Such information is given in the form <b>[<m>HEADER_LLLL1</m> <m>HEADER_LLLL2</m>...]</b>
				where each <m>HEADER_LLLL</m> is in the form <b>[<m>header_element_name</m> <m>CONTENT</m>]</b>. The complete list of header element names
				and the expected content is the following one: <br />
				– <b>clefs</b>: introduces the used clefs; one clef symbol for each voice is expected. The number of voices is automatically
				updated to the number of clef symbols inserted.
				Since clefs can be set both as header element and as attribute, also see the <m>clefs</m> attribute.
				Each clef symbol can be one of the following: "G", "F", "FG", "FGG", "FFG", "FFGG", "G8va", "G15ma", "G8vb", "G15mb", "F8va", "F15ma", "F8vb", "F15mb",
				"Soprano", "Mezzo", "Alto", "Tenor", "Soprano", "Mezzo", "Tenor", "Alto", "Barytone", "Percussion", "None". <br />
				Clefs such as "FGG" correspond to multiple-staff voices: for instance, in this case, we have a standard piano staff ("FG") with an additional
				G clef superposed (transposed a 15ma above). The "G8va", "G15ma", "G8vb", "G15mb", "F8va", "F15ma", "F8vb", "F15mb" symbols correspond to
				octave-transposed clefs. For instance, "G8va" is the G clef, transposed one octave above, whereas "F15mb" is the F clef transposed two octaves below.
				<br /> <br />
				– <b>keys</b>: introduces the used key signatures; one key signature symbol for each voice is expected. If less are given, last one is padded.
				Since key signatures can be set both as header element and as attribute, also see the <m>keys</m> attribute.
				The syntax for the single key signature must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>optional:mode</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Note names are allowed both in anglo-saxon (C, D, E...) and in latin (Do, Re, Mi) format. In both ways,
				they are case insensitive ("c" or "C", "do" or "DO" is the same). <br /> <br />
				Accidentals are defined as string of ASCII characters, each identifying one accidental.
				The list of allowed characters is the following one: <br />
				"n" = natural <br />
				"#" = sharp (+1/2 tone) <br />
				"x" = double sharp (+ 1 tone) <br />
				"+" = monesis = quarter sharp (+1/4 tone) <br />
				"^" = +1/8 tone <br />
				"b" = flat (-1/2 tone) <br />
				"d" or "-" = mobemol = quarter flat (-1/4 tone) <br />
				"v" = -1/8 tone <br />
				If no accidental is defined, the natural is used by default.
				<br /> <br />
				The mode can be either "M" (major) or "m" minor. If no mode is defined, the major is used by default.
				<br /> <br />
				– <b>voicenames</b>: introduces the voice names specification, one name (atom) for each voice is expected.
				If a voice have more than one name, an llll with the list of names must be introduced. To skip names for a voice use <b>nil</b> or <b>[]</b>.
				Since voice names can be set both as header element and as attribute, also see the <m>voicenames</m> attribute.
				<br /> <br />
				– <b>midichannels</b>: introduces the MIDI channels specification, one integer for each voice is expected.
				Since MIDI channels can be set both as header element and as attribute, also see the <m>midichannels</m> attribute.
				<br /> <br />
				– <b>stafflines</b>: set the staff lines configurations. A list of elements (one for each voice) is expected. Since staff lines can be set both as header element and
				as attribute, also see the <m>stafflines</m> attribute. Each element can be in one of the following forms:
				either <b><m>number_of_stafflines</m></b>, setting the number of stafflines for the voice, which will be distributed evenly around
				the middle line of the default staff, or a wrapped llll in the form <b>[<m>index_staff_line1</m> <m>index_staff_line2</m>...]</b>
				where each index is the position of a line to be drawn. Line 1 correspond to the bottommost staffline of a standard staff;
				line 5 correspond to the topmost staffline of a standard staff. Integers need not be positive: indices like -2 or 7 will be
				extrapolated from the standard staff. The total number of lines is thus the length of such llll.
				<br /> <br />
				– <b>markers</b>: specifies the markers. A list of elements (one for each marker) is expected. For <o>bach.roll</o> markers, or for
				<o>bach.score</o> markers attached to milliseconds position, each element
				must be in the form <b>[<m>position_ms</m> <m>marker_name[s]</m> <m>role</m> <m>content</m>]</b> where the two last parameters
				are optional and only supported by <o>bach.roll</o> (ignore them in <o>bach.score</o>). The <m>position_ms</m> is a floating number
				specifying the marker position in milliseconds; the <m>marker_name(s)</m> is either a single symbol, or a wrapped llll, or
				<b>nil</b> or <b>[]</b> if marker has no name. For <o>bach.score</o> measure-attached markers the syntax is: <b>[<m>TIMEPOINT</m> <m>marker_name[s]</m>]</b>
				where <m>TIMEPOINT</m> identifies a time point.
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>[<m>measure_number</m>]</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>[4]</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>[<m>measure_number</m> <m>sym_onset_in_measure</m>]</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>. Sometimes <m>sym_onset_in_measure</m> is called <m>pim</m> (for point in measure)
				For instance, <b>[4 1/4]</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>[<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>]</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>[2 4 1/4]</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>[<m>float_measure_number</m>]</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>[4.2]</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>[1 4 0.2]</b> represents the point after 20% of measure 4, voice 1.
				<br />
				If the measure number is replaced by the <b>any</b> symbol, then the following rational is interpreted as a global symbolic onset inside the score.
				For instance, <b>[any 27/4]</b> represents the point at 27/4 after the beginning of the score, referred to the measureinfo of voice 1;
				<b>[3 any 27/4]</b> does the same for voice 3.
				<br /> <br />
				– <b>slotinfo</b>: specifies the information about the types and the global characteristics of each slot.
				The general syntax for a slotinfo llll in a notation object header is: <b>[slotinfo [<m>slot_num1</m> <m>SPECIFICATIONS1</m>] [<m>slot_num2</m> <m>SPECIFICATIONS2</m>]...]</b>,
				where the <m>slot_num</m> are the slot numbers (1 to 30), followed by their corresponding slotinfo specification. You don't need to give the information about all slots
				at input (only the one that you will use), nor the slot numbers have to be sorted in any way. On the other hand, at output, the slotinfo
				is always output for all slots, sorted in ascending order.
				Each <m>SPECIFICATIONS</m> llll has the form <b>[<m>parameter1</m> <m>content1</m>] [<m>parameter2</m> <m>content2</m>]...</b>, where
				each <m>parameter</m> is a symbol followed by some content specifying a field of the slotinfo.
				The complete list of parameters symbols and their corresponding expected content is the following one: <br />
				– <b>name</b>: expects the name you want to give to the slot (given as a unique symbol). <br />
				– <b>type</b>: expects one of the following symbols, defining the slot type: "function", "int", "float", "intlist", "floatlist", "text",
				"filelist", "llll", "spat", "togglematrix", "intmatrix", "floatmatrix", "filter, "dynfilter", "color", "3dfunction",
				"articulations", "notehead, "dynamics", "none".  <br />
				- <b>access</b>: sets the slot accessibility, and expects a symbol. Default is "readandwrite" (slot is readable and writable);
				you can also use "readonly" (slot is only readable, not writable via interface), or "none" (slot window can't even be opened, slot
				content cannot be accessed).<br />
				- <b>temporalmode</b>: sets whether the slot contains temporal information, and if so in which form.
				It expects one of the following symbols: "none" (the information is not temporal), "relative" (the information is temporal, and the X value
				of each slot item is a relative position inside the note duration, usually between 0 and 1), "milliseconds" (the information is temporal, and the X
				value of each slot item is defined as a position milliseconds with respect to the note onset). <br />
				- <b>extend</b>: toggles the ability for temporal slots to extend their content beyond the end of each corresponding note (might be also useful,
				in combination with the "milliseconds" temporalmode, in order to define continuous parameters, independently from a note duration). <br />
				– <b>range</b>: followed by two numbers, sets the minimum and maximum values the slot range (vertical axis for function and 3dfunction slots, or number
				range for number slots) may assume. <br />
				– <b>key</b>: expects the character or the ASCII value of a key to be mapped as a hotkey for the slot. <br />
				– <b>slope</b>: expects a parameter (-1 to 1, 0 = linear) to exponentially represent the displayed range values of the slot. <br />
				– <b>width</b>: expects a value determining the width of the slot window (scaled according to the object's vertical zoom). <br />
				– <b>height</b>: a value determining the height of the slot window (scaled according to the object's vertical zoom). You can also put "auto"
				if you want to leave an automatically calculated height (default). <br />
				– <b>ysnap</b>: sets, for function or 3dfunction slots, some privileged Y points to which the points will be snapped
				upon Shift+Alt+mousedrag. <br />
				– <b>zsnap</b>: sets, for 3function slots, some privileged Z points to which the points will be snapped
				upon Shift+Ctrl+Alt+mousedrag (mac). <br />
				– <b>domain</b>: followed by two numbers, for function and 3dfunction slots, replaces the standard 0 to 1 domain with any input domain (input numbers
				are minimum and maximum). <br />
				– <b>domainslope</b>: a slope (-1 to 1, 0 = linear) to exponentially rescale the domain display. <br />
				– <b>default</b>: a numeric value (for numeric slots) determining the slot default value. <br />
				– <b>representation</b>: it could expect one of the following things. 1: Symbols defining units of measurement (e.g. "Hz", "ms"...), for numeric
				slots one symbol is expected, for function slots if one symbol is given, it is applied to the Y axis, if two symbols are given they are
				applied to the X and Y axis, for 3dfunction slots up to three symbols can be given, the third one referring to the Z axis, use <b>nil</b> or
				<b>[]</b> to skip assignment for an axis. For filter and dynfilter slots, you can assign "Hz" or "cents" as unit of measurement
				and it will be used to display the cutoff frequency accordingly. 2: An enumeration list (only for int
				and intlist slots), mapping each integer to an element of this enumeration list (e.g. in an int slot from 1 to 3, a
				slot_representation "(one two three)" will display "one" at the place of 1, "two" at the place of 2, "three" at the place of 3).
				These symbols will never be output upon dump or play, they will be just displayed. 3:
				For matrix-typed slots, it can be either a llll containing the number of rows and columns, such as (3 4), or a llll containing
				the names of the rows and columns, such as ((or fee foo) (col1 col2 col3)). To give units to different axes, just list them, such as: Hz dB.
				– <b>zrange</b>: as "range", but for the Z spatial dimension (used by the 3dfunction slot: the Z dimension is the one "coming out" from the screen). <br />
				– <b>zslope</b>: as "slope", but for the Z spatial dimention (used by the 3dfunction slot). <br />
				– <b>singleslotfortiednotes</b>: (for bach.score only) tells whether tied sequences of notes have just one slot, the one corresponding
				to the first note of the sequence. <br />
				– <b>copywhensplit</b>: tells whether this slot should be copied when a note is split into a sequence of multiple notes (e.g. via quantization). <br />
				- <b>follownotehead</b>: forces to automatically modify the value of the slot depending on the notehead trimming (useful if the slot
				value is something associated to the notehead, such as the starting point for reading a sample).<br />
				<br />
				You are not obliged to input all the fields: you can give as input only the required fields.
				Also at output, only the needed fields are given (e.g. the "zrange" is only output for 3dfunction slots, and so on).
				Setting an individual field for a given will not change any other field, unless the type is changed, in which case
				a conversion on all the slots is performed (if possible, i.e. if slots are compatible) otherwise the slot data of the given slot is lost.
				While converting slots, also some other fields may be changed to default values for the new slot type. <br />
				Some more fields can be set via the slotinfo. These fields are never retrieved when the slotinfo is queried via a
				<m>dump</m> message, since they correspond to standard attribute values of the notation object: <br />
				- <b>background</b>: this should be set to 1 if one needs the slot to be constantly painted in the background or 0 otherwise.
				This information is constantly synchronized with the <m>bgslots</m> attribute. <br />
				- <b>popup</b> (except bach.slot): this should be set to 1 if one needs the slot to show up in the note+popup+menu, or to 0 otherwise.
				This information is constantly synchronized with the <m>popupmenuslots</m> attribute. <br />
				- <b>rightclick</b> (except bach.slot): this should be set to 1 if one wants that the right click (or two-fingers tap) on a note head directly
				pops up the slot window of the current slot, or to 0 otherwise.
				This information is constantly synchronized with the <m>rightclickslot</m> attribute. <br />
				- <b>linkto</b> (except bach.slot): this field defines the possible slot linkage. Slot linkage is a way to entangle some notation or
				display features to the content of a given slot. You can specify here to which feature the slot should be linked,
				via one of the following symbols: "none", "lyrics", "color", "noteheadadjust", "noteheadchar", "noteheadfont", "notesize". <br />
				<br />
				– <b>commands</b>: specifies the information about the commands. A list of elements (one for each command) is expected.
				The general syntax for an llll defining commands in a notation object header is:
				<b>[commands [<m>command_num1</m> <m>SPECIFICATIONS1</m>] [<m>command_num2</m> <m>SPECIFICATIONS2</m>]...]</b>
				where the <m>command_num1</m> are the command numbers (1 to 30), followed by their corresponding command specification. You don't need to give the information about all slots
				at input (only the one that you will use), nor the command numbers have to be sorted in any way. On the other hand, at output, the commands
				are always output for all commands, sorted in ascending order.
				Each <m>SPECIFICATIONS</m> llll has the form <b>[<m>parameter1</m> <m>content1</m>] [<m>parameter2</m> <m>content2</m>]...</b>, where
				each <m>parameter</m> is a symbol followed by some content specifying a field of the commands.
				The list of parameters symbols and their corresponding expected content is the following one: <br />
				– <b>note</b>: expects the symbol which will replace the "note" symbol in the playout (given as a unique symbol). <br />
				– <b>chord</b>: expects the symbol which will replace the "chord" symbol in the playout (given as a unique symbol). <br />
				– <b>rest</b>: expects the symbol which will replace the "rest" symbol in the playout (given as a unique symbol). <br />
				– <b>key</b>: expects the character or the ASCII value of a key to be mapped as a hotkey for the slot. <br />
				<br /> <br />
				– <b>groups</b>: (<o>bach.roll</o> only) specifies the information about the grouped chords.
				Although bach.roll syntax, as everything in bach, is transparent (and you are thus allowed to modify any element),
				there are extremely few cases where you might need to set manually the group information in llll form.
				Usually, such information is only dealt with via the interface (i.e. by grouping and ungrouping things),
				and the group header element is only a way to embed or save such information with the object.
				Nevertheless, nothing in principle prevents you from setting groups via message. The syntax is the following one:
				<b>[groups <m>GROUP1</m> <m>GROUP2</m>...]</b>, where each <m>GROUP</m> is an llll having the syntax
				<b>[<m>ADDRESS_CHORD1</m> <m>ADDRESS_CHORD2</m> <m>ADDRESS_CHORD3</m>...]</b>, where each address llll identifies one of the
				chord inside the groups, via the following syntax: <b>[<m>voice_number</m> <m>chord_index</m>]</b>,
				where the chord index is the position of the chord inside the sequence of chords of the voice (ordered by onsets).
				– <b>articulationinfo</b>: specifies the information about custom defined articulation.
				The general syntax for the articulationinfo llll in a notation object header is: <b>[articulationinfo <m>CUSTOMARTICULATION1</m> <m>CUSTOMARTICULATION2</m>...]</b>.
				Each <m>CUSTOMARTICULATION</m> llll has the form <b>[<m>parameter1</m> <m>content1</m>] [<m>parameter2</m> <m>content2</m>]...</b>, where
				each <m>parameter</m> is some propriety of the custom articulation to be defined, followed by its value.
				The complete list of parameters symbols and their corresponding expected content is the following one: <br />
				– <b>fullname</b>: a symbol defining the articulation full name (e.g. "myfermata"). <br />
				– <b>shortname</b>: a symbol defining the articulation short name (e.g. "myf"). <br />
				– <b>alias</b>: up to 5 other names which will be mapped on the articulation when found in articulation slots. <br />
				– <b>font</b>: a symbol containing the font name, or "default" (in order to use the defined "articulationsfont"). <br />
				– <b>basept</b>: the basic font size (corresponding to a no-vzoom situation). <br />
				– <b>position</b>: one of the following symbols: "abovenote", "belownote", "noteside", "stemsidenearnotehead", "stemsidenearflag", "manual", determining the position of the articulation. <br />
				– <b>position</b>: one of the following symbols: "abovenote", "belownote", "noteside", "stemsidenearnotehead", "stemsidenearflag", "manual", determining the position of the articulation. <br />
				<br />
				The following specifications determine the characters used:
				– <b>mainchar</b>: symbol or unicode value determining the main articulation character (above notes). <br />
				– <b>flippedchar</b>: symbol or unicode value determining the flipped articulation character (below notes). <br />
				– <b>extchar</b>: symbol or unicode value of the articulation extension, if any (e.g.: the tilde in a trill line). <br />
				<br />
				The following specifications will refer to unzoomed situations, and will be scaled according to the zoom:
				– <b>mainxshift</b>, <b>mainyshift</b>: x and y shift of positioning for the main character (positive y shift moves up). <br />
				– <b>flippedxshift</b>, <b>flippedyshift</b>: x and y shift of positioning for the flipped character. <br />
				– <b>mainheight</b>, <b>flippedheight</b>: height of the main and flipped characters. <br />
				– <b>mainycenter</b>, <b>flippedycenter</b>: position of the vertical center of the articulation for main and flipped char. <br />
				– <b>outsidestaffynudge</b>: additional y shift to push articulation farther from staff. <br />
				– <b>extyshift</b>: horizontal offset for the beginning of the articulation extensions. <br />
				<br />
				The following specifications will set the markings used when exporting articulations to MusicXML format:
				– <b>xmlornament</b>: text to be exported as MusicXML ornament whenever the articulation is found, or "none" if no export needed (default). <br />
				– <b>xmltechnical</b>: text to be exported as MusicXML technical tag whenever the articulation is found,
				or "none" if no export needed (default), or "custom" if export must be of "other-technical" type, defining a custom technical tag.<br />
				– <b>xmlarticulations</b>: text to be exported as MusicXML articulation tag whenever the articulation is found,
				or "none" if no export needed (default), or "custom" if export must be of "other-articulation" type, defining a custom articulation tag.<br />
				<br />
				Finally, one can assign an option specification, possibly followed by a list of symbols, to set some flags.
				Symbols must be among the following ones:<br />
				· <b>avoidlines</b>: avoid staff lines.<br />
				· <b>outsidestaff</b>: always place outside staff.<br />
				· <b>centerovernote</b>: center over the notehead.<br />
				· <b>centeroverstem</b>: center over the stem.<br />
				· <b>spanties</b>: articulation extension spans sequences of tied notes.<br />
				· copywhencloned: copy articulation while copying notes.<br />
				· copywhenclonedtosamechord: copy articulation while copying notes, and also when copying notes into the same chord.<br />
				· copywhensplit: copy articulation to all notes when notes are split, or retranscribed as tied sequences.<br />
				· shiftwithbeams: shift vertically according to beams.<br />
				<br />
				– <b>noteheadinfo</b>: specifies the information about custom defined noteheads.
				The general syntax for the articulationinfo llll in a notation object header is: <b>[articulationinfo <m>CUSTOMNOTEHEAD1</m> <m>CUSTOMNOTEHEAD2</m>...]</b>.
				Each <m>CUSTOMNOTEHEAD</m> llll has the form <b>[<m>parameter1</m> <m>content1</m>] [<m>parameter2</m> <m>content2</m>]...</b>, where
				each <m>parameter</m> is some propriety of the custom notehead to be defined, followed by its value.
				The complete list of parameters symbols and their corresponding expected content is the following one: <br />
				– <b>fullname</b>: a symbol defining the articulation full name (e.g. "curly").<br />
				– <b>shortname</b>: a symbol defining the articulation short name (e.g. "cr").<br />
				– <b>alias</b>: up to 5 other names which will be mapped on the articulation when found in articulation slots.<br />
				– <b>font</b>: a symbol containing the font name, or "default" (in order to use the defined "notationfont").<br />
				– <b>basept</b>: the basic font size (corresponding to a no-vzoom situation).<br />
				– <b>char</b>: symbol or unicode value determining the notehead character. If two values are input, they refer respectively to the "black" and "white" flavours
				(assigned <o>bach.score</o> to black and white notes). If three values are input, they refer respectively to "black", "white" and "whole note" flavours.
				If four values are input they refer respectively to "black", "white", "whole note" and "double whole note". <br />
				<br />
				The following specifications will refer to unzoomed situations, and will be scaled according to the zoom: <br />
				– <b>xshift</b>: horizontal shift (positive values move right). <br />
				– <b>yshift</b>: vertical shift (positive values move up). <br />
				– <b>width</b>: the width of the notehead. <br />
				– <b>xshiftsmall</b>: same as xshift, but for grace notes. <br />
				– <b>yshiftsmall</b>: same as yshift, but for grace notes. <br />
				– <b>dlstartxshift</b>: horizontal offset for the beginning of the duration line. <br />
				<br />
				– <b>numparts</b>: specifies the information about the part assignment (see <m>numparts</m> attribute).
				– <b>loop</b>: specifies the information about the loop, as for the <m>loop</m> attribute, as a starting and ending point (in milliseconds, or as timepoints).
				For <o>bach.roll</o>, the gathered syntax for any voice, in its simplest form <b>[<m>CHORD1</m> <m>CHORD1</m>... <m>voice_flag</m>]</b>
				where each <m>CHORD</m> is an llll representing a chord in gathered syntax, and the <m>voice_flag</m> is an optional bitfield summing values of
				1 (if voice is locked), 2 (if voice is muted), 4 (if voice is solo). <br />
				For <o>bach.roll</o>, the gathered syntax for any chord, in its simplest form <b>[<m>onset_ms</m> <m>NOTE1</m> <m>NOTE2</m>... <m>chord_flag</m>]</b>
				where <m>onset_ms</m> is the onset of the chord (starting temporal point) in milliseconds each <m>NOTE</m>
				is an llll representing a note in gathered syntax, and the <m>chord_flag</m> is an optional bitfield summing values of
				1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				In its most general form, each chord can have a specification defining its name(s). This specification must be in the form
				<b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>, and must be put after the last note llll,
				before the <m>chord_flag</m>. For instance, a chord definition might
				have the form <b>[500 [7000. 500 127] [7200. 1200 100] [name paul] 0]</b>
				<br /> <br />
				For <o>bach.roll</o>, the gathered syntax for any note is, in its simplest form <b>[<m>pitch_cents</m> <m>duration</m> <m>velocity</m> <m>note_flag</m>]</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>duration</m> is measured in milliseconds, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining
				graphics, pitch breakpoints, slots, names.
				Each of these specifications is done in the form <b>[<m>specification_name</m> <m>SPECIFICATION CONTENT</m>]</b>, and must be put after the <m>velocity</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a note definition might have the form
				<b>[7300. 136. 127 [graphic 7400 -1/2] [slots [1 [0. 0. 0.] [0.294118 81.138889 0.] [0.294118 38.805556 0.] [1. 0. 0.]]] [name pippo] 0 ]</b>
				<br /> <br />
				Instead of MIDIcents (or cents), one can also instert pitches.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names are in anglo-saxon syntax ("C", "D", "E"...), and are case insentitive. Middle C is C5.
				They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>D#4</b>). <br />
				Accidentals are: <b>#</b> [sharp], <b>b</b> [flat], <b>x</b> [double sharp], <b>q</b> [quartertone sharp], <b>d</b> (quartertone flat),
				<b>^</b> [eighth-tone sharp], <b>v</b> (eighth-tone flat)
				One can also extend the accidental by setting a rational specification followed by a <b>t</b>. For instance <b>C5+1/16t</b> is
				middle C, 1/16 tone up.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>[name john george]</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>[name [high 1] [low 2]]</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.roll</o>, onsets are the only parameter assigned chordwise (they are a propriety of chords, rather than notes).
				The separate syntax for onsets will be thus structured as: an llll for each voice, containing a value for each chord.
				For instance: <b>[0 1000 2000 3000] [100 400] [250 2500]</b>. <br />
				Cents, durations, velocities and extras are all assigned notewise in <o>bach.roll</o> (they are propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>[[6000] [6000 6400] [6200] [6200 6500]] [[7200] [6500 7200 7500]] [[5500] [5400]]</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.roll</o> can properly understand
				<b>[6000 [6000 6400] 6200 [6200 6500]] [[7200] [6500 7200 7500]] [5500 5400]</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut.
				<br /> <br />
				Extras are defined in the separate syntax via lllls sent through the Extras inlet, in the form
				<b>[<m>extra_name</m> <m>GLOBAL_CONTENT</m>] [<m>extra_name</m> <m>GLOBAL_CONTENT</m>]...</b>
				where each sublist is thus composed by a name (a symbol identifying the extra, one of the following: "graphics", "breakpoints", "slots")
				and a global content, which is just an llll structured exactly according to the object's hierarchy.
				This llll is no different than any other separate parameter llll (say: Cents), only instead of having a single element (number)
				for each note, an llll is given, specifying the content of the extra associated to each note
				(a level of parentheses is needed for each note). If this latter level is dropped, and the information concerns a rest, the extra is assigned to the
				rest, if applicable (e.g. slots).
				For instance, the pitch breakpoints specification for a given note may have the form
				<b>[[0. 0. 0.] [0.5 500 0.5] [1. 0. 0.]]</b>, whereas a complete list of extras to be introduced in the Extras inlet may have the form
				<b>(breakpoints (((( 0. 0. 0. ) (0.5 500 0.5) (1. 0. 0.)) (( 0. 0. 0. ) (0.5 -500 0.5) (1. 0. 0.))) ((( 0. 0. 0. ) (0.5 -200 0.1)
				(1. 0. 0.)))) (((( 0. 0. 0. ) (0.5 500 0.5) (1. 0. 0.))) ((( 0. 0. 0. ) (0.5 -200 0.1) (1. 0. 0.))))) (slots ( (((3 10 20 30) (4 0.4))
				((3 10 20 30) (4 0.1))) (())) ())</b>. Notes, chords or voices which don't need a given extras are allowed to be represented as input by
				an empty <b>[]</b> llll. <br />
				The content of each extra is exactly the same as the gathered syntax of such extra, provided that the starting symbol is dropped.
				For instance, instead of <b>[graphics 6200 -1/2]</b>, one should just have <b>[6200 -1/2]</b> as graphic content for a given note, and so on.
				The syntax for the gathered syntax of all extras is provided below. Remember to drop the extra router symbol to obtain the content
				to be put in the separate syntax llll. <br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>[articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>]</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
				<br />				See also:<m>getmarker</m>,<m>llll</m><br />
			</description>
		</method>
		<method name="dumpnotepixelpos">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Retrieve pixel position of every chord and note
			</digest>
			<description>
				Syntax: <b>dumpnotepixelpos <m>[&lt;llll: query_label&gt;]</m> </b><br />				<br />
				The <m>dumpnotepixelpos</m> message retrieves the pixel position of any chord and note, and outputs it from the playout.
				The output answer has the syntax:
				<b>notepixelpos <m>VOICE1</m> <m>VOICE2</m>...</b>, where each <m>VOICE</m> is an llll of the form
				<b>[<m>CHORD1</m> <m>CHORD2</m>...]</b>, and where each <m>CHORD</m> is an llll accounting for the pixel position of the chord
				and all its notes, in the form:
				<b>(<m>x-pixel_onset</m> (<m>duration_in_horizontal_pixels_note1</m>  <m>duration_in_horizontal_pixels_note2</m> ...)
				(<m>y_pixel_noteheadcenter_note1</m>   <m>y_pixel_noteheadcenter_note2</m> ...)
				(<m>x_pixel_accidental_left_position_note1</m> <m>x_pixel_accidental_left_position_note2</m> ...))</b>.
				The <m>x-pixel_onset</m> is the pixel corresponding to the chord onset; each <m>duration_in_horizontal_pixels_note</m> is the
				length of eachnote duration line in pixels; each <m>y_pixel_noteheadcenter_note</m> is the vertical position (in pixels) of the center
				of the noteheads, and each <m>x_pixel_accidental_left_position_note</m> is the pixel position of the left boundary of the leftmost accidental
				for each note (or, if a note has no accidentals, the leftmost point of the notehead). <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>[label <m>label_name</m>]</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime [label john] 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
				<br />				See also:<m>dumpvoicepixelpos</m><br />
			</description>
		</method>
		<method name="dumpselection">
			<arglist />
			<digest>
				Get selected items playout syntax
			</digest>
			<description>
				Message attributes:<br />
				<m>@router</m> (symbol/llll, default: null): Sets a forced router to be used instead of the default one<br />
				<m>@start</m> (symbol, default: none): Sets a router used to mark the beginning of the dumping<br />
				<m>@end</m> (symbol, default: none): Sets a router used to mark the end of the dumping<br />
				<br />
				The <m>dumpselection</m> message sends the content of each one of selected notation items from the
				playout, in playout syntax (similarly to <m>play selection offline</m>, but in a much more direct and agile way,
				without all the intricacies of the playback sequencing system).
				You can safely rely on the fact that elements will be output ordered by onset. <br />
				If a "router" message attribute is set, then the standard router ("note", "chord") is replaced by the specified one;
				if the "router" attribute has length 2, the first symbol will be used for notes, the second one for chords. <br />
				Additional routers can be set to mark the beginning and the end of the dumping, via the message attributes <m>start</m>
				and <m>end</m>; these are both set to <b>none</b> by default, hence disabling the reporting of the beginning and end of
				the routing.
				For <o>bach.roll</o>, the playout syntax is used whenever the information about a note or chord is sent through the playout (either at playtime
				or at offline play, or selection dump).
				The playout syntax is a slight variation of the standard chord gathered syntax. Two different cases apply, according to the <m>playmode</m>
				attribute value. If the <m>playmode</m> is set to Chordwise, the information about each chord is output in the form <br />
				<b>chord <m>voice_number</m> <m>MIDI_channel</m> [<m>onset</m> <m>NOTE1</m> <m>NOTE2</m> <m>NOTE3</m> <m>chord_flag</m>] </b> <br />
				where each <b><m>NOTE</m></b> is the gathered syntax of the note (see below).
				If the <m>playmode</m> is set to Notewise, information about each note is output as if the note were the only note in the chord, i.e. in the form <br />
				<b>note <m>voice_number</m> <m>MIDI_channel</m> [<m>onset</m> <m>NOTE</m> <m>chord_flag</m>] </b> <br />
				where <b><m>NOTE</m></b> is the note gathered syntax.
				The <m>MIDI_channels</m> is the one associated with the voice to which the note or chord belongs. The <m>onset</m> is in milliseconds,
				The <m>chord_flag</m> is a bitfield summing values of 1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				The playout syntax also concerns markers: they are output in the form: <b>marker <m>NAME_OR_NAMES</m> <m>onset_ms</m> <m>role</m> <m>optional:content</m></b>
				where the <m>NAME_OR_NAMES</m> is either a single atom (if the marker has a single name) or a wrapped plain llll containing the names, and the <m>optional:content</m>
				is only output if the marker role requires it.
				<br /> <br />
				In <o>bach.roll</o>, one can assign a role for each marker, so that they can represent elements such as
				time signatures, tempi, barline, measure divisions. Time signature markers and tempi markers
				also require a "content", i.e. an llll specifying the time signature or the tempo.
				When adding a marker via the <m>addmarker</m> message, the role can be specified as third parameter,
				and the content as fourth parameter. Alternatively, roles and content can be set via the marker inspector.
				Roles can be: <br />
				<m>Time Signature</m>: set by the symbol "timesig", it represents a time signature, and expects the time signature llll as content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo timesig [4 4]</b>.<br />
				<m>Tempo</m>: set by the symbol "tempo", it represents a time signature, and expects the tempo llll as content (tempo figure and tempo
				value). For instance, a message to add such a marker could be <b>addmarker 0 foo tempo [1/8 50]</b>, meaning
				that the tempo is 1/8 = 50.<br />
				<m>Measure Barlines</m>: set by the symbol "barline", it represents a barline, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo barline</b>. <br />
				<m>Measure Division</m>: set by the symbol "division", it represents a measure division, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo division</b>. <br />
				<m>Measure Subdivision</m>: set by the symbol "subdivision", it represents a measure subdivision, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo subdivision</b>. <br />
				All these marker can be parsed by bach.quantize in order to automatically retrieve the measureinfo of the
				entire bach.roll.
				<br /> <br />
				For <o>bach.roll</o>, the gathered syntax for any note is, in its simplest form <b>[<m>pitch_cents</m> <m>duration</m> <m>velocity</m> <m>note_flag</m>]</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>duration</m> is measured in milliseconds, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining
				graphics, pitch breakpoints, slots, names.
				Each of these specifications is done in the form <b>[<m>specification_name</m> <m>SPECIFICATION CONTENT</m>]</b>, and must be put after the <m>velocity</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a note definition might have the form
				<b>[7300. 136. 127 [graphic 7400 -1/2] [slots [1 [0. 0. 0.] [0.294118 81.138889 0.] [0.294118 38.805556 0.] [1. 0. 0.]]] [name pippo] 0 ]</b>
				<br /> <br />
				Instead of MIDIcents (or cents), one can also instert pitches.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names are in anglo-saxon syntax ("C", "D", "E"...), and are case insentitive. Middle C is C5.
				They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>D#4</b>). <br />
				Accidentals are: <b>#</b> [sharp], <b>b</b> [flat], <b>x</b> [double sharp], <b>q</b> [quartertone sharp], <b>d</b> (quartertone flat),
				<b>^</b> [eighth-tone sharp], <b>v</b> (eighth-tone flat)
				One can also extend the accidental by setting a rational specification followed by a <b>t</b>. For instance <b>C5+1/16t</b> is
				middle C, 1/16 tone up.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>[name john george]</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>[name [high 1] [low 2]]</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				<br />				See also:<m>sendcommand</m>,<m>play</m><br />
			</description>
		</method>
		<method name="dumpvoicepixelpos">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Retrieve pixel position of every voice
			</digest>
			<description>
				Syntax: <b>dumpvoicepixelpos <m>[&lt;llll: query_label&gt;]</m> </b><br />				<br />
				The <m>dumpvoicepixelpos</m> message retrieves the pixel position of any voices, and outputs it from the playout.
				The output answer has the syntax:
				<b>voicepixelpos <m>VOICE1</m> <m>VOICE2</m>...</b>, where each <m>VOICE</m> is an llll of the form
				<b>[<m>y_pixel_middleC</m> <m>y_pixel_bottom_staffline</m> <m>y-pixel_top_staffline</m>]</b>. The three values are: the vertical position
				in pixels of the middle C, and the bottommost and topmost staffline position (in pixels). <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>[label <m>label_name</m>]</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime [label john] 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
				<br />				See also:<m>dumpnotepixelpos</m><br />
			</description>
		</method>
		<method name="duration">
			<arg name="duration" optional="0" type="number/llll/anything" />
			<digest>
				Modify the duration of selected items
			</digest>
			<description>
				Syntax: <b>duration <m>&lt;number/llll/anything: duration&gt;</m> </b><br />
				Examples:<br />
				• <b>duration 1000</b>   <i>→ change duration of selected items to 1s</i><br />
				• <b>duration = 1000</b>   <i>→ exactly the same</i><br />
				• <b>duration = duration - 1000</b>   <i>→ reduce duration by 1s</i><br />
				• <b>duration = 30000 - onset</b>   <i>→ make selection end together at 30s</i><br />
				• <b>duration = velocity * 2</b>   <i>→ assign durations depending on velocity</i><br />
				<br />
				The word <m>duration</m>, followed by a number, sets the new duration, in milliseconds, for all
				the selected notation items.
				If a list of numbers is given as arguments, this is applied to selected chords notewise: bottommost note will be assigned
				the first value, the one above will be assigned the next one, and so on. If less values than selected notes in the chord
				are given, last value is padded.
				Any of the numbers can be replaced by an llll containing a relative modification of the existing duration.
				If a single number is inserted, this can be replaced by a generic equation.
				All parameters, except for <o>bach.score</o>'s timepoints, also support a relative modification syntax, which modifies the existing values instead
				Relative modifications of a parameter are handled via lllls of the type <b>[<m>value</m> <m>function</m>]</b>, where
				the <m>function</m> is one of the following symbols: "plus", "minus", "times", "div". Such modification applies the corresponding
				function to the current value of the parameter and the inserted <m>value</m>. For instance, <b>[100 minus]</b> removes 100 to the current
				value of the parameter, while <b>[2. times]</b> multiplies it by two.
				<br /> <br />
				All separate parameters, except for measureinfo, ties and slots, can also be modified via a generic equation. In order to do so,
				the message symbol must be followed by an <m>=</m> sign (with spaces before and after it), and then by the desired equation.
				The standard symbolic variables are available. <br />
				Symbolic variables are variables that can be used in the conditional selection or parameter modification processes.
				These are: <m>onset</m> (in ms), <m>duration</m> (in ms), <m>velocity</m>, <m>cents</m> (pitch in MIDIcents),
				<m>pitch</m> (diatonic pitch), <m>poc</m> (pitch or cents, depending on what was defined by the user),
				<m>tail</m> (position of the note end, in ms), <m>voice</m> (voice number), <m>part</m> (part number),
				<m>voiceensemble</m> (voiceensemble number).
				For <o>bach.score</o> you can also use: <m>symduration</m> (symbolic rational duration),
				<m>symonset</m> (symbolic rational onset inside the measure), <m>symtail</m> (sum of the two previous), <m>measure</m> (the measure number),
				<m>tie</m> (which is 1 if a tie starts, 2 if a tie ends and 3 if a tie both starts and ends, 0 otherwise) and <m>grace</m> (1 for
				grace chords, 0 otherwise). <br />
				You can also use the variables <m>numnotes</m>, <m>numchords</m> and <m>nummeasures</m> to determine the number of notes/chords/measures
				that a otation item has (e.g. the number of chords in a measure, or the number of notes in a chord). <br />
				In addition, you also have the <m>index</m> symbol, corresponding to the index of the item: the index of the note in the chord (bottom-up),
				the index of the chord in the measure or voice (left to right), the index of the measures, voices, markers, pitch breakpoints, etc.
				(all left to right). In case you need to distinguish between chord index and note index, for a given note, you can explicitly use the
				<m>chordindex</m> or <m>noteindex</m> symbols. <br />
				For instance, one could define <b>velocity = duration / 100. + onset * 0.01</b> or <b>cents = cents + 200</b>, or
				<b>onset = [cents - 6000] / 100 + 2000 * [voice - 1]</b>.
				The equation syntax extends in a sense the relative modification syntax; however it is applied to the globality of the selection, and
				one cannot apply different equations to different notes inside the chord.
				<br /> <br />
				<br />				See also:<m>tail</m>,<m>legato</m><br />
			</description>
		</method>
		<method name="dynamics2velocities">
			<arg name="selection" optional="1" type="symbol" />
			<arg name="slot_number" optional="1" type="int" />
			<digest>
				Assign velocities depending on dynamics
			</digest>
			<description>
				Syntax: <b>dynamics2velocities <m>[&lt;symbol: selection&gt;]</m> <m>[&lt;int: slot_number&gt;]</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>dynamics2velocities</b>   <i>→ convert dynamics to velocities throughout the whole score</i><br />
				• <b>dynamics2velocities selection</b>   <i>→ same thing, for selected items only</i><br />
				• <b>dynamics2velocities @mapping [mp 70] [mf 80]</b>   <i>→ customly map "mp" to velocity = 70 and "mf" to velocity = 80</i><br />
				• <b>dynamics2velocities @maxchars 6</b>   <i>→ use broader dynamics spectrum (from "pppppp" to "ffffff")</i><br />
				• <b>dynamics2velocities @maxchars 2</b>   <i>→ use narrower dynamics spectrum (from "pp" to "ff")</i><br />
				• <b>dynamics2velocities @maxchars 2 @exp 0.5</b>   <i>→ use narrower spectrum and a steeper mapping curve</i><br />
				• <b>dynamics2velocities @exp 1.</b>   <i>→ use a linear mapping curve</i><br />
				<br />
				Message attributes:<br />
				<m>@maxchars</m> (int, default: 4): Width of the dynamics spectrum<br />
				<m>@exp</m> (float, default: 0.8): Exponent for the conversion<br />
				<m>@mapping</m> (llll): Custom dynamics-to-velocity mapping via <b>[<m>dynamics</m> <m>velocity</m>]</b> pairs<br />
				<m>@breakpointmode</m> (int, default: 0): Breakpoint handling (0 = handle existing ones, 1 = add new ones to match dynamics, 2 = also clear)<br />
				<br />
				A <m>dynamics2velocities</m> message will assign all the note velocities (and pitch breakpoint velocity,
				if <m>breakpointshavevelocity</m> is non-zero), depending on the current dynamics and hairpins, for the whole score or - if
				"selection" is set as first argument, for the selected items only. The dynamics sequence considered is the one contained in the slot
				linked to dynamics, if any (see <m>linkdynamicstoslot</m>), or in another slot, if given as integer argument. <br />
				Unless explicit dynamic-velocity mapping is defined, a default mapping is used. Two message attributes handle such default mapping: <br />
				• the "maxchars" attribute sets the width of the dynamics spectrum; <br />
				• the "exp" attribute sets the exponent for the conversion. <br />
				The dynamics spectrum is the sequence of standard dynamics in the piano-to-forte range.
				It is characterized by its "maxchars", i.e. the maximum number of p's and f's of the elements it contains ("mp" and "mf"
				are considered as having 0 p's and f's).
				For instance, the collection of
				{"pp", "p", "mp", "mf", "f", "ff"} makes for a spectrum of <m>maxchars</m> = 2.
				The "maxchars" property of the dynamic spectrum will factor into different conversions between dynamics and velocities,
				in combination with a conversion exponent.
				The dynamic range is set via the "maxchars" parameter, while the exponent is set via the "exp" parameter (greater than 0. and less or equal to 1.).
				If "exp" is 1., the velocity range is divided linearly between the dynamics in the spectrum; otherwise an exponential scaling is applied.
				Default exponent is 0.8, and default range width is 5 (from "pppp" to "ffff").
				Any dynamic marking outside the spectrum will be clipped to the spectrum during conversion.
				The dynamics are scaled so that "mp" will always correspond to velocity = 64.
				If i is the index of the
				If <m>i</m> is the 1-based index of the element of a spectrum containing 2D elements <br />
				vel(i) = 128 * ((1 + sgn(-1+2i/(2D+1))*|-1+2i/(2D+1)|^a)/2)^b <br />
				More clearly, once set x = x(i, D) = -1+2i/(2D+1), between -1 and 1, one has <br />
				vel(i) = 128 * ((1 + sgn(x)*|x|^a)/2)^b. <br />
				This function assumes values between 0. and 1., for x in [-1, 1].
				In any case vel(i) is clipped to 127 (128 won't be allowed).
				The parameter <m>a</m> is the "exp" parameter defined above. The parameter <m>b</m> is chosen so that vel("mp") = vel(D) = 64, which yields <br />
				b = 1/(1 - log2(1 - 1/((2D+1)^a))) <br />
				As an example, if "exp" (i.e. <m>a</m>) is 0.8 (hence <m>b</m> is about 0.745),
				consider the spectrum {"pp", "p", "mp", "mf", "f", "ff"}, having <m>maxchars</m> = 2 and <m>D</m> = 3 (containing <m>2D</m> = 6 elements).
				The dynamics "f" has index 5, hence x = x(5, 3) = -1+2i/(2D+1) = -1 + 10/7 = 3/7, hence <br />
				vel("f") = vel(5) = 128 * ((1 + (3/7)^a)/2)^b ~ 128 * 0.810 ~ 103, <br />
				while within the broader spectrum {"pppp", "ppp", "pp", "p", "mp", "mf", "f", "ff", "fff", "ffff"}, having <m>maxchars</m> = 4 and <m>D</m> = 5,
				one has x = x(7, 5) = -1+2i/(2D+1) = -1 + 14/11 = 3/11
				vel("f") = vel(7) = 128 * ((1 + (3/11)^a)/2)^b ~ 128 * 0.748 ~ 96. <br />
				Moreover, the "mapping" attribute defines a non-standard or more general mapping via an llll specification. Such parameter has syntax
				<b>[<m>dynamics1</m> <m>velocity1</m>] [<m>dynamics2</m> <m>velocity2</m>]</b>.
				You might also define a the dynamics association you want to drift from the default values; any other marking which does not show up in the
				mapping will be converted via the default conversion equation.
				<br />				See also:<m>velocities2dynamics</m>,<m>checkdynamics</m>,<m>fixdynamics</m><br />
			</description>
		</method>
		<method name="erasebreakpoints">
			<arglist />
			<digest>
				Delete pitch breakpoints of selected notes
			</digest>
			<description>
				The <m>erasebreakpoints</m> message deletes all the pitch breakpoints of the selected notes.
				@see addbreakpoint
			</description>
		</method>
		<method name="eraseslot">
			<arg name="slot_number_or_name" optional="0" type="int/symbol" />
			<digest>
				Clear a specific slot for selected items
			</digest>
			<description>
				Syntax: <b>eraseslot <m>&lt;int/symbol: slot_number_or_name&gt;</m> </b><br />
				Examples:<br />
				• <b>eraseslot active</b>   <i>→ clear currently open slot for selected items</i><br />
				• <b>eraseslot 4</b>   <i>→ clear 4th slot</i><br />
				• <b>eraseslot amplienv</b>   <i>→ clear slot named amplienv</i><br />
				• <b>eraseslot all</b>   <i>→ clear all slots</i><br />
				<br />
				An <m>eraseslot</m> message will clear the content of a specific slot for any selected note.
				The slot number of the slot to clear is given as argument.
				Instead of the slot number, you can use slot names, or you can the word "active" to refer to the currently open slot,
				or the word "all" to clear all slots.
				<br />				See also:<m>copyslot</m>,<m>moveslot</m>,<m>setslot</m>,<m>changeslotitem</m>,<m>resetslotinfo</m><br />
			</description>
		</method>
		<method name="explodechords">
			<arg name="selection" optional="1" type="symbol" />
			<digest>
				Turn all chords into 1-note-chords
			</digest>
			<description>
				Syntax: <b>explodechords <m>[&lt;symbol: selection&gt;]</m> </b><br />
				Examples:<br />
				• <b>explodechords</b>   <i>→ Explode chords for whole score</i><br />
				• <b>explodechords selection</b>   <i>→ Explode selected chords only</i><br />
				<br />
				The <m>explodechords</m> message turns any chord having more than 1 note
				in a sequence of overlapping chords each having just one note. In the end, the number
				of notes and the number of chords will coincide. If a "selection" symbol is given as argument, then
				the message only operates on selected content
				<br />				See also:<m>merge</m><br />
			</description>
		</method>
		<method name="exportimage">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Export as PNG image
			</digest>
			<description>
				Syntax: <b>exportimage <m>[&lt;symbol: filename&gt;]</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>exportimage /tmp/img.png</b>   <i>→ export score as image</i><br />
				• <b>exportimage</b>   <i>→ export score as image via dialog box</i><br />
				• <b>exportimage @view raw</b>   <i>→ export the portion of score displayed</i><br />
				• <b>exportimage @view line</b>   <i>→ export whole score</i><br />
				• <b>exportimage @view multiline @mspersystem 5000</b>   <i>→ export score as multiple images, each displaying 5 secs</i><br />
				• <b>exportimage @view scroll @mspersystem 5000</b>   <i>→ export score as single image, each system displaying 5 secs</i><br />
				• <b>exportimage @view scroll @systemvshift 10</b>   <i>→ export score as single image with 10 pixels of system separation</i><br />
				<br />
				Message attributes:<br />
				<m>@view</m> (symbol, default: line): View mode<br />
				<m>@mspersystem</m> (float, default: none): Length of a system in milliseconds<br />
				<m>@adaptwidth</m> (int, default: 0): Adapts the width of the object to preserve current zoom<br />
				<m>@dpi</m> (int, default: 72): Dots per inch<br />
				<m>@systemvshift</m> (int, default: 0): Separation between systems in pixels<br />
				<m>@fadedomain</m> (int, default: none): Fade the left part of the domain near the clefs<br />
				<m>@onsetindomain</m> (int, default: 0): Only paint notes whose onset is inside domain<br />
				<m>@postdomainpad</m> (float, default: none): Right pad for domain in pixels<br />
				<br />
				The <m>exportimage</m> message exports the content of the <o>bach.roll</o> as a single image or an image series.
				The file name (as symbol) can be given as optional first argument. If no such symbol is given, a dialog box will pop up
				allowing the choice of the location and file name for saving. Images are exported in PNG format. <br />
				Three view modes are allowed, selected via the "view" message attribute: <br />
				raw: the current view of the object is exported; <br />
				line: all the score is exported in a single horizontal system; <br />
				multiline: the score is split into multiple different files (systems); the system length is by default the object current domain, but
				can be also set via the "mspersystem" message attribute; <br />
				scroll: as the "multiline" mode, but all the systems are collected into a single file, scrollable vertically; the system length
				is by default the object current domain, but can be also set via the "mspersystem" message attribute. <br />
				The "adaptwidth" message attribute defines how the defined "mspersystem" are handled: if it is 0 (default), the horizontal zoom is changed
				so that the image width corresponds to the notation object width; if it is 1, the object width is modified in order to keep the current
				horizontal zoom.
				<br />				See also:<m>write</m>,<m>writetxt</m>,<m>exportom</m>,<m>exportmidi</m>,<m>read</m><br />
			</description>
		</method>
		<method name="exportmidi">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Export as MIDI file
			</digest>
			<description>
				Syntax: <b>exportmidi <m>[&lt;symbol: filename&gt;]</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>exportmidi</b>   <i>→ export MIDI file via dialog box</i><br />
				• <b>exportmidi mymidi.mid</b>   <i>→ export MIDI file</i><br />
				• <b>exportmidi mymidi.mid [exportmarkers 0]</b>   <i>→ the same, but don't export markers</i><br />
				• <b>exportmidi mymidi.mid [voices 1 3] [format 1]</b>   <i>→ exports voices 1 and 3 in format 1</i><br />
				• <b>exportmidi mymidi.mid [voices [[1 3]]] [format 1]</b>   <i>→ exports voices 1 through 3</i><br />
				• <b>exportmidi mymidi.mid [voices [[1 3] 4 7]] [format 1]</b>   <i>→ exports voices 1 through 3, 4 and 7</i><br />
				• <b>exportmidi mymidi.mid [resolution 1920]</b>   <i>→ exports with a resolution of 1920 ticks per beat</i><br />
				<br />
				Message attributes:<br />
				<m>@exportmarkers</m> (int, default: 1): If non-zero, exports all the markers<br />
				<m>@exportbarlines</m> (int, default: 1): Barline markers are exported as MIDI marker events, with the name "bach barline"<br />
				<m>@exportdivisions</m> (int, default: 1): Division markers are exported as MIDI marker events, with the name "bach division"<br />
				<m>@exportsubdivisions</m> (int, default: 1): Subdivision markers are exported as MIDI marker events, with the name "bach subdivision"<br />
				<m>@voices</m> (llll, default: null): Numbers of voices to be exported (<b>null</b> means: all voices)<br />
				<m>@format</m> (int, default: 1): MIDI file format (0 = single track, 1 = multiple tracks)<br />
				<m>@resolution</m> (int, default: 960): Number of MIDI ticks per beat<br />
				<br />
				The <m>exportmidi</m> message saves the content of the <o>bach.roll</o> as a MIDI file.
				The file name (as symbol) can be given as optional first argument. If no such symbol is given, a dialog box will pop up
				allowing the choice of the location and file name for saving.
				Furthermore, some exporting message attributes are available, and each has to be given as llll after the (optional) file name.
				Available attributes are: <br />
				- <b>exportmarkers</b> (default: 1): if non-0, all the markers in the score will be exported. <br />
				- <b>voices</b> [default: <b>[]</b>): if a list of voices is provided, then only the specified voices will be exported.
				If no list is provided, then all the voices of the score will be exported. Ranges can also be
				expressed, as sublists. For example, <b>[voices 1 3 5]</b> will export the first, third and fifth voice,
				while <b>[voices [1 5] 8]</b> will export all the voices from 1 to 5, and the 8th voice. <br />
				- <b>format</b> (default: 0): the MIDI file format (0 = single track, 1 = multiple tracks). <br />
				– <b>resolution</b> (default: 960): the number of MIDI ticks per beat. <br />
				- <b>exportbarlines</b> (default: 1): the barline markers are exported as MIDI marker events, with the name "bach barline". <br />
				- <b>exportdivisions</b> (default: 1): the division markers are exported as MIDI marker events, with the name "bach division". <br />
				- <b>exportsubdivisions</b> (default: 1): the subdivision markers are exported as MIDI marker events, with the name "bach subdivision". <br />
				<br />				See also:<m>write</m>,<m>writetxt</m>,<m>read</m>,<m>exportimage</m><br />
			</description>
		</method>
		<method name="exportom">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Export to OpenMusic
			</digest>
			<description>
				Syntax: <b>exportom <m>[&lt;symbol: filename&gt;]</m> </b><br />
				Example: <b>exportom forOM.txt</b>   <i>→ export file in OpenMusic format</i><br />
				<br />
				The <m>exportom</m> message saves the content of the <o>bach.roll</o> object in a way that OpenMusic will be able to open
				(by selecting "Import" and then "From bach" from the File menu). The content of a <o>bach.roll</o> can be imported into an OpenMusic's "chord-seq"
				or "multi-seq".
				The file name (as symbol) can be given as optional first argument. If no such symbol is given, a dialog box will pop up
				allowing the choice of the location and file name for saving.
				<br />				See also:<m>write</m>,<m>writetxt</m>,<m>exportpwgl</m>,<m>exportmidi</m>,<m>exportimage</m>,<m>read</m><br />
			</description>
		</method>
		<method name="exportpwgl">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Export to PWGL
			</digest>
			<description>
				Syntax: <b>exportpwgl <m>[&lt;symbol: filename&gt;]</m> </b><br />
				Examples:<br />
				• <b>exportpwgl</b>   <i>→ export file in PWGL format via dialog box</i><br />
				• <b>exportpwgl forPWGL.txt</b>   <i>→ export file in PWGL format</i><br />
				<br />
				The <m>exportpwgl</m> message saves the content of the <o>bach.roll</o> object in a way that PWGL will be able to open
				(by connecting the "import-bach" box, in the "pwgl2bach" library).
				The file name (as symbol) can be given as optional first argument. If no such symbol is given, a dialog box will pop up
				allowing the choice of the location and file name for saving.
				<br />				See also:<m>write</m>,<m>writetxt</m>,<m>exportom</m>,<m>exportmidi</m>,<m>exportimage</m>,<m>read</m><br />
			</description>
		</method>
		<method name="fixdynamics">
			<arg name="selection" optional="1" type="symbol" />
			<arg name="slot_number" optional="1" type="int" />
			<digest>
				Fix dynamics for selection
			</digest>
			<description>
				Syntax: <b>fixdynamics <m>[&lt;symbol: selection&gt;]</m> <m>[&lt;int: slot_number&gt;]</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>fixdynamics</b>   <i>→ fix all dynamics issues</i><br />
				• <b>fixdynamics selection</b>   <i>→ same thing, for selected items only</i><br />
				• <b>fixdynamics @unnecessary 0</b>   <i>→ filter out dynamics repetitions</i><br />
				<br />
				Message attributes:<br />
				<m>@inconsistent</m> (int, default: 1): If non-zero, fixes inconsistent dynamics<br />
				<m>@unnecessary</m> (int, default: 1): If non-zero, fixes unnecessary dynamics<br />
				<m>@verbose</m> (int, default: 0): If non-zero, logs warnings in the max window for each found dynamics<br />
				<br />
				A <m>fixdynamics</m> message will check the correctness of the dynamics sequence, for the whole score or - if
				"selection" is set as first argument, for the selected items only. The dynamics sequence considered is the one contained in the slot
				linked to dynamics, if any (see <m>linkdynamicstoslot</m>), or in another slot, if given as integer argument. <br />
				If incorrect dynamics are found, they are also fixed.
				Further message attributes are:
				• "inconsistent": value is expected to be 0 or 1, telling if the fixing should happen on inconsistent dynamics
				• "unnecessary": value is expected to be 0 or 1, telling if the fixing should happen on unnecessary dynamics
				• "verbose": value is expected to be 0 or 1, telling if the fixing should log warnings in the max window for each found dynamics
				<br />				See also:<m>checkdynamics</m><br />
			</description>
		</method>
		<method name="fixvzoom">
			<arglist />
			<digest>
				Fix the vertical zoom value
			</digest>
			<description>
				If the <m>vzoom</m> attribute was set to "auto", the <m>fixvzoom</m> message turns it into the
				fixed value that the vertical zoom currently have. (The vertical zoom is also a global zoom for any
				displayed item: see <m>vzoom</m> to know more.)
				<br />				See also:<m>getvzoom</m><br />
			</description>
		</method>
		<method name="getcurrentchord">
			<arglist />
			<digest>
				Get notes at cursor position
			</digest>
			<description>
				The word <m>getcurrentchord</m> outputs from the playout the pitches and velocities of the
				notes being played at the cursor position. The output syntax is: <b>currentchord <m>PITCHES</m> <m>VELOCITIES</m></b>,
				where <m>PITCHES</m> and <m>VELOCITIES</m> are respectively wrapped lists containing the midicents and the corresponding
				velocities of the notes being played at the cursor position. <br /> This is a rather quick'n'dirty method to have
				pitch and velocity information; if you need any more information at a specific timepoint, see the <m>interp</m> and
				<m>sample</m> messages.
				<br />				See also:<m>interp</m>,<m>sample</m><br />
			</description>
		</method>
		<method name="getcursor">
			<arglist />
			<digest>
				Get current playhead cursor position
			</digest>
			<description>
				The <m>getcursor</m> message retrieves the current playhead cursor position, and outputs it from the playout in the form
				<b>cursor <m>cursor_position_ms</m></b>, where the last parameter is the current position of the playhead cursor in milliseconds.
				<br />				See also:<m>setcursor</m>,<m>showcursor</m>,<m>hidecursor</m><br />
			</description>
		</method>
		<method name="getdomain">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Get the current domain
			</digest>
			<description>
				Syntax: <b>getdomain <m>[&lt;llll: query_label&gt;]</m> </b><br />				<br />
				The <m>getdomain</m> message forces <o>bach.roll</o> to output from the playout the current domain,
				i.e. the portion of <o>bach.roll</o> currently displayed inside the screen.
				The syntax of the output answer is: <b>domain <m>start_ms</m> <m>end_ms</m></b>, where the
				two elements following the "domain" symbol are the starting and ending point of the domain in milliseconds. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>[label <m>label_name</m>]</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime [label john] 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
				<br />				See also:<m>getdomainpixels</m>,<m>domain</m>,<m>getlength</m><br />
			</description>
		</method>
		<method name="getdomainpixels">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Get the pixel position of the domain
			</digest>
			<description>
				Syntax: <b>getdomainpixels <m>[&lt;llll: query_label&gt;]</m> </b><br />				<br />
				The <m>getdomainpixels</m> message forces <o>bach.roll</o> to output from the playout the current position
				(in pixels) of the domain, i.e. the starting (left) and ending (right) pixels of the currently displayed portion of music.
				These pixels are referred to the notation object box.
				The syntax of the output answer is: <b>domainpixels <m>start_pixel</m> <m>end_pixel</m></b>, where the
				two elements following the "domainpixels" symbol are the leftmost and rightmost horizontal points (in pixels) of the domain. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>[label <m>label_name</m>]</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime [label john] 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
				<br />				See also:<m>getdomain</m>,<m>domain</m><br />
			</description>
		</method>
		<method name="getlength">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Get the total length
			</digest>
			<description>
				Syntax: <b>getlength <m>[&lt;llll: query_label&gt;]</m> </b><br />				<br />
				@description The <m>getlength</m> message forces the notation object to output from the playout the total length of the musical content,
				in milliseconds.
				The syntax of the output answer is: <b>length <m>length_ms</m></b>, where the last element is indeed the total length of the
				content in milliseconds. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>[label <m>label_name</m>]</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime [label john] 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
				<br />				See also:<m>getdomain</m>,<m>getdomainpixels</m><br />
			</description>
		</method>
		<method name="getloop">
			<arglist />
			<digest>
				Get current loop region position
			</digest>
			<description>
				The <m>getloop</m> message retrieves the current loop region position, and outputs it from the playout in the form
				<b>loop <m>loop_start_ms</m> <m>loop_end_ms</m></b>, where the two last parameter
				are the beginning and end position of the loop, in milliseconds (also see the <m>loop</m> attribute).
			</description>
		</method>
		<method name="getmarker">
			<arg name="names" optional="1" type="list" />
			<digest>
				Retrieve marker information
			</digest>
			<description>
				Syntax: <b>getmarker <m>[&lt;list: names&gt;]</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>getmarker</b>   <i>→ get all markers in standard (position name role content) form</i><br />
				• <b>getmarker @namefirst 1</b>   <i>→ get all markers in (name position role content) form</i><br />
				• <b>getmarker Ringo</b>   <i>→ get the first marker named 'Ringo'</i><br />
				• <b>getmarker Ringo Starr</b>   <i>→ get the first marker named both 'Ringo' and 'Starr'</i><br />
				<br />
				Message attributes:<br />
				<m>@namefirst</m> (int, default: 0): If non-zero outputs the marker name(s) as first element<br />
				<br />
				The <m>getmarker</m>, without any further argument, will output all the markers from the playout in the form
				<b>markers <m>MARKER1</m> <m>MARKER2</m>...</b>, where each <m>MARKER</m> is an llll of the form
				<b>[<m>position_ms</m> <m>name_or_names</m> <m>role</m> <m>optional:content</m>]</b>, where the <m>content</m> is only output
				if the marker <m>role</m> requires it (see below to know more about marker roles).
				Markers are in any case always output ordered according to their positions.
				The <m>name_or_names</m> parameter is either a single symbol or integer (if the marker has a single name), or an llll containing all the names
				listed, in the form <b>[<m>name1</m> <m>name2</m> ...]</b>, where each <m>name</m> is a symbol or an integer. If a marker has no name,
				then <b>[]</b> is used.  <br />
				If you send a message <b>getmarker @namefirst 1</b>, all the markers will be output from the playout in the form
				<b>markers <m>MARKER1</m> <m>MARKER2</m>...</b>, where each <m>MARKER</m> is an llll of the form
				<b>[<m>name_or_names</m> <m>position_ms</m> <m>role</m> <m>optional:content</m>]</b>. <br />
				You can retrieve the information about a specific marker by adding the marker name or names as arguments. In this case you'll get
				from the playout an llll in the form <b>marker <m>name_or_names</m> <m>position_ms</m> <m>role</m> <m>optional:content</m></b>, where all
				the parameters are the same as above.
				If more than one marker match the introduced name(s), only the information about the first marker (in temporal order) is output.
				<br /> <br />
				In <o>bach.roll</o>, one can assign a role for each marker, so that they can represent elements such as
				time signatures, tempi, barline, measure divisions. Time signature markers and tempi markers
				also require a "content", i.e. an llll specifying the time signature or the tempo.
				When adding a marker via the <m>addmarker</m> message, the role can be specified as third parameter,
				and the content as fourth parameter. Alternatively, roles and content can be set via the marker inspector.
				Roles can be: <br />
				<m>Time Signature</m>: set by the symbol "timesig", it represents a time signature, and expects the time signature llll as content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo timesig [4 4]</b>.<br />
				<m>Tempo</m>: set by the symbol "tempo", it represents a time signature, and expects the tempo llll as content (tempo figure and tempo
				value). For instance, a message to add such a marker could be <b>addmarker 0 foo tempo [1/8 50]</b>, meaning
				that the tempo is 1/8 = 50.<br />
				<m>Measure Barlines</m>: set by the symbol "barline", it represents a barline, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo barline</b>. <br />
				<m>Measure Division</m>: set by the symbol "division", it represents a measure division, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo division</b>. <br />
				<m>Measure Subdivision</m>: set by the symbol "subdivision", it represents a measure subdivision, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo subdivision</b>. <br />
				All these marker can be parsed by bach.quantize in order to automatically retrieve the measureinfo of the
				entire bach.roll.
				<br /> <br />
				<br />				See also:<m>dump</m><br />
			</description>
		</method>
		<method name="getnumchords">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Get the number of chords
			</digest>
			<description>
				Syntax: <b>getnumchords <m>[&lt;llll: query_label&gt;]</m> </b><br />				<br />
				The <m>getnumchords</m> message forces <o>bach.roll</o> to output from the playout the number of chords, for each voice.
				The syntax of the output answer is: <b>numchords <m>num_chords_voice1</m> <m>num_chords_voice2</m>...</b>,
				i.e. after the "numchords" symbol, a list of integers is given, representing the number of chords for each one of the voices. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>[label <m>label_name</m>]</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime [label john] 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
				<br />				See also:<m>getnumvoices</m>,<m>getnumnotes</m><br />
			</description>
		</method>
		<method name="getnumnotes">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Get the number of notes
			</digest>
			<description>
				Syntax: <b>getnumnotes <m>[&lt;llll: query_label&gt;]</m> </b><br />				<br />
				The <m>getnumnotes</m> message forces <o>bach.roll</o> to output from the playout the number of notes, for each chord and for each voice.
				The syntax of the output answer is: <b>numnotes <m>VOICE1</m> <m>VOICE2</m>...</b>, where each <m>VOICE</m> is an llll of the form
				<b>[<m>num_notes_chord1</m> <m>num_notes_chord2</m>...]</b>,
				i.e. after the "numnotes" symbol, a list of lists is given: each outer list represents a voice, and innerly contains an integer for each one
				of its chords: such integer is the number of notes of the chord. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>[label <m>label_name</m>]</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime [label john] 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
				<br />				See also:<m>getnumvoices</m>,<m>getnumchords</m><br />
			</description>
		</method>
		<method name="getnumvoices">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Get the number of voices
			</digest>
			<description>
				Syntax: <b>getnumvoices <m>[&lt;llll: query_label&gt;]</m> </b><br />				<br />
				The <m>getnumvoices</m> message forces <o>bach.roll</o> to output from the playout the current number of voices.
				The syntax of the output answer is: <b>numvoices <m>num_voices</m></b>, where the last element is the number of voices. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>[label <m>label_name</m>]</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime [label john] 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
				<br />				See also:<m>getnumchords</m>,<m>getnumnotes</m><br />
			</description>
		</method>
		<method name="getvzoom">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Retrieve the current vertical zoom
			</digest>
			<description>
				Syntax: <b>getvzoom <m>[&lt;llll: query_label&gt;]</m> </b><br />				<br />
				The <m>getvzoom</m> message retrieves the current value of the vertical zoom. Such value is given as precise percentage value,
				also in case the <m>vzoom</m> attribute is set to "auto".
				The output answer is sent through the playout in the form: <b>vzoom <m>current_vzoom_value</m></b>, where the
				<m>current_vzoom_value</m> is given as percentage. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>[label <m>label_name</m>]</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime [label john] 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
				<br />				See also:<m>getzoom</m><br />
			</description>
		</method>
		<method name="getzoom">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Retrieve the current horizontal zoom
			</digest>
			<description>
				Syntax: <b>getzoom <m>[&lt;llll: query_label&gt;]</m> </b><br />				<br />
				The <m>getzoom</m> message retrieves the current value of the horizontal zoom.
				The output answer is sent through the playout in the form: <b>zoom <m>current_zoom_value</m></b>, where the
				<m>current_zoom_value</m> is given as percentage. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>[label <m>label_name</m>]</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime [label john] 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
				<br />				See also:<m>getvzoom</m>,<m>fixvzoom</m><br />
			</description>
		</method>
		<method name="glissando">
			<arg name="trim_or_extend" optional="1" type="symbol" />
			<arg name="slope" optional="1" type="float" />
			<digest>
				Make selection glissando
			</digest>
			<description>
				Syntax: <b>glissando <m>[&lt;symbol: trim_or_extend&gt;]</m> <m>[&lt;float: slope&gt;]</m> </b><br />
				Examples:<br />
				• <b>glissando</b>   <i>→ make selection monophonic, with no rests, and continuously glissando</i><br />
				• <b>glissando 0.5</b>   <i>→ the same, with a 0.5 glissando slope</i><br />
				• <b>glissando trim 0.5</b>   <i>→ the same, preserving rests</i><br />
				• <b>glissando extend 0.5</b>   <i>→ the same, preserving notes superpositions</i><br />
				<br />
				The <m>glissando</m> message works exactly like the <m>legato</m> message, but in addition to that
				modifies the midicents of the notes' tails so that they match the next notehead pitch (yielding continuous glissandi across
				selected notes). <br />
				If the <b>trim</b> symbol is given as first argument, the glissando will only shorten the notes duration, hence preserving
				all rests between chords. If the <b>extend</b> symbol is given as first argument, the glissando will only make note durations longer,
				hence preserving all superposition of notes across chords. <br />
				Another optional argument (after the possible symbol) is the glissando slope, as floating point value, from -1. to 1. (0. being linear, default).
				<br />				See also:<m>tail</m>,<m>duration</m>,<m>glissando</m><br />
			</description>
		</method>
		<method name="gluechord">
			<arg name="voice_number" optional="1" type="int" />
			<arg name="chord" optional="0" type="llll" />
			<arg name="threshold_ms" optional="1" type="float" />
			<arg name="threshold_cents" optional="1" type="float" />
			<arg name="smooth_ms" optional="1" type="atom" />
			<digest>
				Glue a chord to the existing ones
			</digest>
			<description>
				Syntax: <b>gluechord <m>[&lt;int: voice_number&gt;]</m> <m>&lt;llll: chord&gt;</m> <m>[&lt;float: threshold_ms&gt;]</m> <m>[&lt;float: threshold_cents&gt;]</m> <m>[&lt;atom: smooth_ms&gt;]</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>gluechord [3000 [6210 1000 100]]</b>   <i>→ glue the chord to a contiguous one, if any</i><br />
				• <b>gluechord [3000 [6210 1000 100]] 10 30</b>   <i>→ ...only if they join seamlessly within 10ms and 30cents</i><br />
				• <b>gluechord [3000 [6210 1000 100]] 10 30 @sel 1</b>   <i>→ ...and select the added or glued chord</i><br />
				<br />
				Message attributes:<br />
				<m>@sel</m> (int, default: 0): Also select the added or glued chord<br />
				<br />
				A <m>gluechord</m> message acts exactly like an <m>addchord</m> message, which an important difference:
				it glues the introduced chord, whenever possible, to existing notes. More precisely: if an already existing note is
				the "same" as one of the newly introduced notes, and has the tail "near" the onset of the newly introduced chord, then
				instead of creating a new note, the existing note is made longer.
				If a first integer argument is given, this is the voice number to which the new chord should be assigned; if no integer is given as
				first argument, the first voice will be used by default.
				Then an llll with the chord gathered syntax is expected. Two more optional final arguments can be given, specifying
				what the previously used word "same" and "near" mean. Such arguments are indeed two thresholds: a threshold in milliseconds
				(notes can be glued only if the existing note tail and the new note onset are less distant than this threshold), and a threshold
				in midicents (notes can be glued only if the existing note pitch and the new note pitch are less distant than this threshold). <br />
				A fifth argument can be given, representing a smooth period in milliseconds. If this number is greater than 0, then if there
				are discontinuities at glue point, such discontinuities are eased along the defined number of milliseconds. Such argument can also
				be defined as "inf" (symbol), in which case the newly added point at the discontinuity is dropped.
				For <o>bach.roll</o>, the gathered syntax for any chord, in its simplest form <b>[<m>onset_ms</m> <m>NOTE1</m> <m>NOTE2</m>... <m>chord_flag</m>]</b>
				where <m>onset_ms</m> is the onset of the chord (starting temporal point) in milliseconds each <m>NOTE</m>
				is an llll representing a note in gathered syntax, and the <m>chord_flag</m> is an optional bitfield summing values of
				1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				In its most general form, each chord can have a specification defining its name(s). This specification must be in the form
				<b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>, and must be put after the last note llll,
				before the <m>chord_flag</m>. For instance, a chord definition might
				have the form <b>[500 [7000. 500 127] [7200. 1200 100] [name paul] 0]</b>
				<br /> <br />
				For <o>bach.roll</o>, the gathered syntax for any note is, in its simplest form <b>[<m>pitch_cents</m> <m>duration</m> <m>velocity</m> <m>note_flag</m>]</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>duration</m> is measured in milliseconds, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining
				graphics, pitch breakpoints, slots, names.
				Each of these specifications is done in the form <b>[<m>specification_name</m> <m>SPECIFICATION CONTENT</m>]</b>, and must be put after the <m>velocity</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a note definition might have the form
				<b>[7300. 136. 127 [graphic 7400 -1/2] [slots [1 [0. 0. 0.] [0.294118 81.138889 0.] [0.294118 38.805556 0.] [1. 0. 0.]]] [name pippo] 0 ]</b>
				<br /> <br />
				Instead of MIDIcents (or cents), one can also instert pitches.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names are in anglo-saxon syntax ("C", "D", "E"...), and are case insentitive. Middle C is C5.
				They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>D#4</b>). <br />
				Accidentals are: <b>#</b> [sharp], <b>b</b> [flat], <b>x</b> [double sharp], <b>q</b> [quartertone sharp], <b>d</b> (quartertone flat),
				<b>^</b> [eighth-tone sharp], <b>v</b> (eighth-tone flat)
				One can also extend the accidental by setting a rational specification followed by a <b>t</b>. For instance <b>C5+1/16t</b> is
				middle C, 1/16 tone up.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>[name john george]</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>[name [high 1] [low 2]]</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				<br />				See also:<m>addchord</m><br />
			</description>
		</method>
		<method name="goto">
			<arg name="command" optional="0" type="symbol" />
			<arg name="arguments" optional="1" type="llll" />
			<digest>
				Move selection
			</digest>
			<description>
				Syntax: <b>goto <m>&lt;symbol: command&gt;</m> <m>[&lt;llll: arguments&gt;]</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>goto time 1000</b>   <i>→ set selection to items which are active at 1sec</i><br />
				• <b>goto next</b>   <i>→ select next notation item</i><br />
				• <b>goto prev</b>   <i>→ select previous notation item</i><br />
				• <b>goto next @repeat 10</b>   <i>→ select the 10th next notation item</i><br />
				• <b>goto next @type marker</b>   <i>→ select the next marker</i><br />
				• <b>goto next @until cents &gt; 6000 @type note</b>   <i>→ select next note above middle C</i><br />
				• <b>goto up</b>   <i>→ move selection up</i><br />
				• <b>goto right</b>   <i>→ move selection right</i><br />
				• <b>goto next @voicemode any @polymode overlap</b>   <i>→ navigate through score polyphonically</i><br />
				<br />
				Message attributes:<br />
				<m>@inscreen</m> (int, default: 0): If non-zero, shows selected elements inside the domain<br />
				<m>@skiprests</m> (int, default: 0): If non-zero, avoids rest<br />
				<m>@repeat</m> (int, default: 1): Repeat command a certain number of times<br />
				<m>@nullmode</m> (int, default: 1): If non-zero, notifies when no more elements are selected<br />
				<m>@voices</m> (llll, default: null): Sets the voices to be affected by selection (if <b>null</b>: all voices)<br />
				<m>@type</m> (llll, default: smart): Sets the notation item types to be accounted for<br />
				<m>@include</m> (symbol/llll, default: head): Sets which element (head or tail) to include as boundary for "time" command<br />
				<m>@tiemode</m> (symbol, default: all): If "all", select all tied sequences if any of their element is selected; if "each", select tied elements separately<br />
				<m>@voicemode</m> (symbol, default: anyactive): Sets how selection should be handled across voices for "next" and "prev" commands<br />
				<m>@polymode</m> (symbol, default: overlap): Sets how polyphony should be handled across voices for "next" and "prev" commands<br />
				<m>@from</m> (symbol, default: auto): Sets start computation point (either "head" or "tail") for "next" and "prev" commands<br />
				<m>@to</m> (symbol, default: auto): Sets end computation point (either "head" or "tail") for "next" and "prev" commands<br />
				<m>@graceshavedur</m> (int, default: 0): If non-zero, grace elements have playback duration<br />
				<m>@markershavevoices</m> (int, default: 0): If non-zero, measure-attached markers undergo the voice attributes conditions<br />
				<m>@where</m> (llll, default: null): Sets a condition to be matched by selected items (the other ones are discarded)<br />
				<m>@until</m> (llll, default: null): Sets a condition to be matched, otherwise perform the command again, until condition is met<br />
				<br />
				The <m>goto</m> message moves the selection to new items, i.e. clears the selection and select the new item. <br />
				The first argument is the go-to command, which can be one of the following symbols: <br />
				• "up", "down", "left", "right": move selection up/down/left/right, as you would with the editing
				keyboard arrows (+ Command or Control) <br />
				• "next", "prev": move selection to the following or previous elements <br />
				• "time" or "timepoint": move selection to a given point in time (either in milliseconds or as a timepoint).
				An argument is expected, either a number (millisecond position) or a timepoint, in llll form (see below for timepoint syntax). <br />
				<br />
				In addition, a certain number of behaviors can be changed via the following message attributes:
				• "repeat": expects an integer, setting the number of times for the command to be repeated. <br />
				• "nullmode": if non-zero, also notifies when there is no (longer) selection, e.g. at the end of a "next" go-to chain. <br />
				• "skiprests": if non-zero, avoids the rest while performing the selection. <br />
				• "inscreen": if non-zero, also puts the selected items inside the displayed portion of the domain. <br />
				• "voices": sets the voicenumbers for the voices to be accounted for; default is the empty llll, meaning: all voices. <br />
				• "where": sets a mathematical condition to be applied to sieve the selection each time the command is performed. Variables are the same
				as in the <m>sel note if</m> case. <br />
				• "until": sets a mathematical condition that, if not matched, will cause the command to be re-executed, until the condition is met.
				Variables are the same as in the <m>sel note if</m> case. <br />
				• "untilmode": a symbol, either "any" or "all", determining whether the <m>until</m> condition should be applied to all selected elements in order
				to be considered met, or to anyone of them (i.e. at least one). <br />
				• "type": sets a list of notation item types (as symbols) to be accounted for, among: "note", "rest", "marker", "tempo", "measure", "voice". <br />
				• "markershavevoices": if non-zero, considers measure-attached markers as belonging to the corresponding voice (and hence accounts for it
				while using the <m>voicemode</m> and <m>voices</m> message attributes). <br />
				• "graceshavedur": if non-zero, considers grace notes as having a (minimal) duration, precisely the one attributed to them by the <o>bach.score</o>
				playback system, and controllable via the related attributes. <br />
				• "tiemode": one of the following symbols, defining how selection behaves with respect to ties: <br />
				- "each": each element in a tie sequence is independent, and can be independently selected; <br />
				- "all" (default): whenever an element in a tie sequence is to be selected, all the other elements are selected too. <br />
				<br />
				For the "time" command only: <br />
				• "include": for the "time" command only: expects one or two symbols among "head" and "tail" in order to determine what extreme should be included
				when it falls exactly on the timepoint (default: head). <br />
				For the "next"/"prev" commands only: <br />
				• "voicemode": a symbol determining how the selection should be performed across different voices. Allowed values are: <br />
				- "each": go-to command is performed in each voice independently (e.g.: all voices go to next selected chord, independently); <br />
				- "any": go-to command is performed on the next/previous element, no matter in which voice it is. The sequence will walk through all
				chords in all voices; <br />
				- "all": go-to command is performed accounting for selection in all voices, but selection is allowed to always jump, starting from the
				last reached onset or tail; <br />
				- "anyactive" (default): like "any", but only applied on the voices having some selected element; <br />
				- "allactive": like "all", but only applied on the voices having some selected element. <br />
				• "polymode": a symbol determining how the polyphony should be handled. Allowed values are: <br />
				- "none": don't account for polyphony, i.e. don't "hold" (keep selected) previously selected chords; <br />
				- "overlap" (default): keep previously selected chords if they overlap with the new selection. This yields a standard walkthrough of the score; <br />
				- "overhang": keep previously selected chords if they are "temporally contained" in the new selection (i.e. if the new selection starts before
				their onset and ends after their tail). <br />
				• "from", "to": symbols (among "auto", "head" and "tail") determining from and to which point the selection should be computed.
				For instance going to the "next" chord from a given selection means, by default, looking at the farthermost selected notehead
				and searching for the first chords
				whose notehead lies after that, i.e. we search from a head to another head. The opposite is true, by default, when going to "prev" chords:
				we search from the leftmost tail the nearest previous one. This is the behavior with "from" and "to" attributes set to "auto".
				One could change these behaviors by setting "from" and "to" explicitly to some other element ("head" or "tail"). <br />
				<br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>[<m>measure_number</m>]</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>[4]</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>[<m>measure_number</m> <m>sym_onset_in_measure</m>]</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>. Sometimes <m>sym_onset_in_measure</m> is called <m>pim</m> (for point in measure)
				For instance, <b>[4 1/4]</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>[<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>]</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>[2 4 1/4]</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>[<m>float_measure_number</m>]</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>[4.2]</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>[1 4 0.2]</b> represents the point after 20% of measure 4, voice 1.
				<br />
				If the measure number is replaced by the <b>any</b> symbol, then the following rational is interpreted as a global symbolic onset inside the score.
				For instance, <b>[any 27/4]</b> represents the point at 27/4 after the beginning of the score, referred to the measureinfo of voice 1;
				<b>[3 any 27/4]</b> does the same for voice 3.
				<br /> <br />
				<br />				See also:<m>sel</m>,<m>select</m>,<m>unsel</m><br />
			</description>
		</method>
		<method name="group">
			<arglist />
			<digest>
				Group selected chords
			</digest>
			<description>
				A <m>group</m> message groups all selected items.
				<br />				See also:<m>ungroup</m><br />
			</description>
		</method>
		<method name="hidecursor">
			<arglist />
			<digest>
				Hide the playhead cursor
			</digest>
			<description>
				The <m>hidecursor</m> message hides the playhead cursor, if it was visible.
				This does not affect the playback behavior: at play time the cursor is always visible.
				<br />				See also:<m>showcursor</m>,<m>getcursor</m>,<m>setcursor</m><br />
			</description>
		</method>
		<method name="inhibitundo">
			<arglist />
			<digest>
				Temporarily disable/enable undo step creation
			</digest>
			<description>
				An <m>inhibitundo</m> message followed by any non-zero number will
				temporarily disable any undo step creation. Use the same message followed by a zero
				to re-enable undo steps.
				<br />				See also:<m>droplastundo</m>,<m>undo</m>,<m>redo</m><br />
			</description>
		</method>
		<method name="inscreen">
			<arg name="ms_or_name" optional="0" type="float/symbol" />
			<digest>
				Change scrollbar position to display a temporal point
			</digest>
			<description>
				Syntax: <b>inscreen <m>&lt;float/symbol: ms_or_name&gt;</m> </b><br />
				Examples:<br />
				• <b>inscreen 5000</b>   <i>→ display position at 5s in domain</i><br />
				• <b>inscreen john</b>   <i>→ display element named 'john' in domain</i><br />
				• <b>inscreen cursor</b>   <i>→ display playhead the domain</i><br />
				• <b>inscreen end</b>   <i>→ display end of roll the domain</i><br />
				<br />
				The message <m>inscreen</m> followed by a temporal position specified in milliseconds forces such
				position to be displayed inside the domain, by changing the scrollbar position.
				The millisecond position can be replaced by the element name or by one of the following symbols: "cursor", "end".
				<br />				See also:<m>inscreenpos</m>,<m>scroll</m><br />
			</description>
		</method>
		<method name="inscreenpos">
			<arg name="ms_or_name" optional="0" type="float/symbol" />
			<digest>
				Change scrollbar position to precisely display a temporal point
			</digest>
			<description>
				Syntax: <b>inscreenpos <m>&lt;float/symbol: ms_or_name&gt;</m> </b><br />
				Examples:<br />
				• <b>inscreenpos 0.5 5000</b>   <i>→ display 5s position at the exact domain center</i><br />
				• <b>inscreenpos 0.9 john</b>   <i>→ display element named 'john' at 90% of the domain</i><br />
				• <b>inscreenpos 0.9 cursor</b>   <i>→ display playhead at 90% of the domain</i><br />
				• <b>inscreenpos 0.9 end</b>   <i>→ display end of roll at 90% of the domain</i><br />
				<br />
				The message <m>inscreenpos</m> sets a given position in milliseconds in a given point inside the notation object domain.
				It has to be followed by two argument: a value between 0 and 1, specifying the relative location inside the screen in which the temporal
				point should be displayed (0 represents the screen beginning, 1 the screen end), and the position in milliseconds.
				The millisecond position can be replaced by the element name or by one of the following symbols: "cursor", "end".
				<br />				See also:<m>inscreen</m>,<m>scroll</m><br />
			</description>
		</method>
		<method name="insert">
			<arglist />
			<digest>
				Insert element
			</digest>
			<description>
				Generic changes in a score can be obtained via the syntax <br />
				<b>insert/remove/change <m>element_type</m> <m>element_path</m> <m>property_name</m> <m>content_as_llll</m></b> <br />
				If the initial symbol is "remove", the last two fields are irrelevant; if the initial symbol is "
				Properties are the ones displayed in the bach inspector for the specific element, plus the symbol "state", which
				sets the whole state of the element from a gathered syntax llll. <br />
			</description>
		</method>
		<method name="insertslotitem">
			<arg name="slot_number_or_name" optional="0" type="int/symbol" />
			<arg name="element_position" optional="0" type="int" />
			<arg name="slot_element" optional="0" type="llll" />
			<digest>
				Insert a slot element at a given position in a slot
			</digest>
			<description>
				Syntax: <b>insertslotitem <m>&lt;int/symbol: slot_number_or_name&gt;</m> <m>&lt;int: element_position&gt;</m> <m>&lt;llll: slot_element&gt;</m> <i>[message attributes]</i> </b><br />				<br />
				Message attributes:<br />
				<m>@modify</m> (int, default: 0): If there is a point at the introduced X coordinate, modify it instead of adding a new one<br />
				<m>@thresh</m> (float, default: 0.): X coordinate threshold for the <m>modify</m> attribute<br />
				<br />
				A <m>insertslotitem</m> message will insert a specific element at a given position in a slot.
				The position may be specified explicitly (for slots that do not bear X-axis information) or
				dropped (for slots bearing X-axis information, or time-axis information, such as functions, spat, etc.).
				The message works similarly to <m>changeslotitem</m> (see this latter to have more information).
				<br />				See also:<m>appendslotitem</m>,<m>prependslotitem</m>,<m>changeslotitem</m>,<m>deleteslotitem</m>,<m>setslot</m>,<m>eraseslot</m><br />
			</description>
		</method>
		<method name="insertvoice">
			<arg name="voice_number" optional="0" type="int" />
			<arg name="voice_or_ref" optional="1" type="llll" />
			<digest>
				Insert a voice
			</digest>
			<description>
				Syntax: <b>insertvoice <m>&lt;int: voice_number&gt;</m> <m>[&lt;llll: voice_or_ref&gt;]</m> </b><br />
				Examples:<br />
				• <b>insertvoice 2</b>   <i>→ insert a empty voice as 2nd voice</i><br />
				• <b>insertvoice 2 4</b>   <i>→ also initialize it with the properties of 4th voice</i><br />
				• <b>insertvoice 2 [[125 [6300 105 100]] [457 [7500 405 100]] [780 [7000 405 100]]]</b>   <i>→ also fill it with some content</i><br />
				<br />
				An <m>insertvoice</m> message, followed by an integer number <m>N</m>, will create a new voice and insert it as the <m>N</m>-th voice
				of the current score. If a second llll argument is set, this can be either an integer, specifying the number of reference voice from where
				the measureinfo should be copied (hence the new voice will be filled with empty measures, according to the specified reference voice),
				or an llll, containing the gathered syntax of the whole new voice, so that the new voice comes also
				filled with musical content. <br />
				For <o>bach.roll</o>, the gathered syntax for any voice, in its simplest form <b>[<m>CHORD1</m> <m>CHORD1</m>... <m>voice_flag</m>]</b>
				where each <m>CHORD</m> is an llll representing a chord in gathered syntax, and the <m>voice_flag</m> is an optional bitfield summing values of
				1 (if voice is locked), 2 (if voice is muted), 4 (if voice is solo). <br />
				For <o>bach.roll</o>, the gathered syntax for any chord, in its simplest form <b>[<m>onset_ms</m> <m>NOTE1</m> <m>NOTE2</m>... <m>chord_flag</m>]</b>
				where <m>onset_ms</m> is the onset of the chord (starting temporal point) in milliseconds each <m>NOTE</m>
				is an llll representing a note in gathered syntax, and the <m>chord_flag</m> is an optional bitfield summing values of
				1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				In its most general form, each chord can have a specification defining its name(s). This specification must be in the form
				<b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>, and must be put after the last note llll,
				before the <m>chord_flag</m>. For instance, a chord definition might
				have the form <b>[500 [7000. 500 127] [7200. 1200 100] [name paul] 0]</b>
				<br /> <br />
				For <o>bach.roll</o>, the gathered syntax for any note is, in its simplest form <b>[<m>pitch_cents</m> <m>duration</m> <m>velocity</m> <m>note_flag</m>]</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>duration</m> is measured in milliseconds, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining
				graphics, pitch breakpoints, slots, names.
				Each of these specifications is done in the form <b>[<m>specification_name</m> <m>SPECIFICATION CONTENT</m>]</b>, and must be put after the <m>velocity</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a note definition might have the form
				<b>[7300. 136. 127 [graphic 7400 -1/2] [slots [1 [0. 0. 0.] [0.294118 81.138889 0.] [0.294118 38.805556 0.] [1. 0. 0.]]] [name pippo] 0 ]</b>
				<br /> <br />
				Instead of MIDIcents (or cents), one can also instert pitches.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names are in anglo-saxon syntax ("C", "D", "E"...), and are case insentitive. Middle C is C5.
				They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>D#4</b>). <br />
				Accidentals are: <b>#</b> [sharp], <b>b</b> [flat], <b>x</b> [double sharp], <b>q</b> [quartertone sharp], <b>d</b> (quartertone flat),
				<b>^</b> [eighth-tone sharp], <b>v</b> (eighth-tone flat)
				One can also extend the accidental by setting a rational specification followed by a <b>t</b>. For instance <b>C5+1/16t</b> is
				middle C, 1/16 tone up.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>[name john george]</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>[name [high 1] [low 2]]</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				<br />				See also:<m>deletevoice</m><br />
			</description>
		</method>
		<method name="interp">
			<arg name="time" optional="0" type="number" />
			<digest>
				Obtain active notes data at a given instant
			</digest>
			<description>
				Syntax: <b>interp <m>&lt;number: time&gt;</m> </b><br />
				Example: <b>interp 1000</b>   <i>→ get info on chords being played at 1s</i><br />
				<br />
				The <m>interp</m> message, followed by a time value (in milliseconds) retrieves
				the instantaneous data of all the notes which are active at the given time instant.
				The answer is sent through the playout in the following form: <b>interp <m>VOICE1</m> <m>VOICE2</m>...</b>
				where each <m>VOICE</m> is in the form <b>[<m>CHORD1</m> <m>CHORD2</m>...]</b>, being the chords active at the
				given time instant, each in the form <b>[<m>NOTE1</m> <m>NOTE2</m>...]</b>, being the chord notes active at
				the given time instant, each in the standard note gathered syntax, with two important variations:
				there is no duration element, and for each slot marked as temporal only the slot element at the given time instant
				is output (e.g. the interpolated function point of a function slot). <br /> <br />
				For <o>bach.roll</o>, the gathered syntax for any note is, in its simplest form <b>[<m>pitch_cents</m> <m>duration</m> <m>velocity</m> <m>note_flag</m>]</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>duration</m> is measured in milliseconds, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining
				graphics, pitch breakpoints, slots, names.
				Each of these specifications is done in the form <b>[<m>specification_name</m> <m>SPECIFICATION CONTENT</m>]</b>, and must be put after the <m>velocity</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a note definition might have the form
				<b>[7300. 136. 127 [graphic 7400 -1/2] [slots [1 [0. 0. 0.] [0.294118 81.138889 0.] [0.294118 38.805556 0.] [1. 0. 0.]]] [name pippo] 0 ]</b>
				<br /> <br />
				Instead of MIDIcents (or cents), one can also instert pitches.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names are in anglo-saxon syntax ("C", "D", "E"...), and are case insentitive. Middle C is C5.
				They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>D#4</b>). <br />
				Accidentals are: <b>#</b> [sharp], <b>b</b> [flat], <b>x</b> [double sharp], <b>q</b> [quartertone sharp], <b>d</b> (quartertone flat),
				<b>^</b> [eighth-tone sharp], <b>v</b> (eighth-tone flat)
				One can also extend the accidental by setting a rational specification followed by a <b>t</b>. For instance <b>C5+1/16t</b> is
				middle C, 1/16 tone up.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>[name john george]</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>[name [high 1] [low 2]]</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				<br />				See also:<m>getcurrentchord</m>,<m>sample</m><br />
			</description>
		</method>
		<method name="lambda">
			<arg name="modification_message" optional="0" type="llll" />
			<digest>
				Perform operation on individual selected items
			</digest>
			<description>
				Syntax: <b>lambda <m>&lt;llll: modification_message&gt;</m> </b><br />
				Examples:<br />
				• <b>lamdba cents $1</b>   <i>→ assign the incoming value as note cents</i><br />
				• <b>lamdba changeslotitem $1 $2 $3</b>   <i>→ the same, for some slot value</i><br />
				<br />
				The <m>lambda</m> message is a general router which can be prepended to all the following operations:
				<m>cents</m>, <m>velocity</m>, <m>onset</m>, <m>tail</m>, <m>duration</m>, <m>voice</m>, <m>addbreakpoint</m>, <m>erasebreakpoint</m>,
				<m>setslot</m>, <m>changeslotitem</m>, <m>eraseslot</m>, <m>name</m>.
				If such router is prepended, the corresponding operation will apply on the currently output selected item.
				The idea is that when a selection dump is asked or a command is sent (also see <m>dumpselection</m> or <m>sendcommand</m>), the notation
				elements are output one by one from the playout (notewise or chordwise depending on the <m>playmode</m>): if you put a feedback loop from the playout
				to the <o>bach.roll</o>, changing one of the previously defined parameter, but prepending the "lambda" symbol inside the message,
				such modification will not apply to the whole selection, but only to the item currently being output. In such a way, you can modify
				chords one by one, depending on their parameters, even by performing a collective selection dump.
				Such feedback cycle must not have any <o>delay</o> nor <o>pipe</o> nor <o>defer</o> nor <o>deferlow</o>, nor anything which may change the thread
				or defer the modification operation. See #lambda+operation in the help center to have some examples of usage.
				<br />				See also:<m>cents</m>,<m>velocity</m>,<m>duration</m>,<m>onset</m>,<m>changeslotitem</m>,<m>setslot</m>,<m>eraseslot</m>,<m>name</m>,<m>voice</m><br />
			</description>
		</method>
		<method name="legato">
			<arg name="trim_or_extend" optional="1" type="symbol" />
			<digest>
				Make selection legato
			</digest>
			<description>
				Syntax: <b>legato <m>[&lt;symbol: trim_or_extend&gt;]</m> </b><br />
				Examples:<br />
				• <b>legato</b>   <i>→ make selection monophonic, with no rests</i><br />
				• <b>legato trim</b>   <i>→ the same, preserving rests</i><br />
				• <b>legato extend</b>   <i>→ the same, preserving notes superpositions</i><br />
				<br />
				The <m>legato</m> message shifts the tails of each one of the selected notes so that it reaches exactly the
				onset of the following chord, resulting in a sequence of chords where each one ends when the next one begins. <br />
				If the <b>trim</b> symbol is given as first argument, the legato will only shorten the notes duration, hence preserving
				all rests between chords. If the <b>extend</b> symbol is given as first argument, the legato will only make note durations longer,
				hence preserving all superposition of notes across chords.
				<br />				See also:<m>tail</m>,<m>duration</m>,<m>glissando</m>,<m>poly</m><br />
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				In the first inlet, an llll is expected to be a gathered syntax content of the entire <o>bach.roll</o> (building
				the new <o>bach.roll</o> content from scratch), or an llll containing just some header specification
				(thus not affecting the body of the object). See below for more information on the gathered syntax. <br />
				In any of the other inlets, an llll is expected to contain the separate syntax of some parameter. Namely: <br />
				- second inlet: Onsets <br />
				- third inlet: Pitches or cents <br />
				- fourth inlet: Durations <br />
				- fifth inlet: Velocities <br />
				- sixth inlet: Extras <br />
				See below for more information about the separate syntax. Also see the <m>bang</m> method to rebuild content from these separate
				parameters.<br /> <br />
				The gathered syntax of a whole <o>bach.roll</o> is in the form <b>roll <m>HEADER</m> <m>BODY</m></b>, where
				the first symbol is optional as input (but always given as output). <m>HEADER</m> is an llll containing all the
				<o>bach.roll</o> meta-information (such as key signatures, clefs, markers...),
				while <m>BODY</m> has the form of a sequence of voices: <b>[<m>VOICE1</m> <m>VOICE2</m>...]</b>
				where each voice is an llll in gathered syntax (see below for more information about this). <br /> <br />
				The header contains meta-information about the score. Such information is given in the form <b>[<m>HEADER_LLLL1</m> <m>HEADER_LLLL2</m>...]</b>
				where each <m>HEADER_LLLL</m> is in the form <b>[<m>header_element_name</m> <m>CONTENT</m>]</b>. The complete list of header element names
				and the expected content is the following one: <br />
				– <b>clefs</b>: introduces the used clefs; one clef symbol for each voice is expected. The number of voices is automatically
				updated to the number of clef symbols inserted.
				Since clefs can be set both as header element and as attribute, also see the <m>clefs</m> attribute.
				Each clef symbol can be one of the following: "G", "F", "FG", "FGG", "FFG", "FFGG", "G8va", "G15ma", "G8vb", "G15mb", "F8va", "F15ma", "F8vb", "F15mb",
				"Soprano", "Mezzo", "Alto", "Tenor", "Soprano", "Mezzo", "Tenor", "Alto", "Barytone", "Percussion", "None". <br />
				Clefs such as "FGG" correspond to multiple-staff voices: for instance, in this case, we have a standard piano staff ("FG") with an additional
				G clef superposed (transposed a 15ma above). The "G8va", "G15ma", "G8vb", "G15mb", "F8va", "F15ma", "F8vb", "F15mb" symbols correspond to
				octave-transposed clefs. For instance, "G8va" is the G clef, transposed one octave above, whereas "F15mb" is the F clef transposed two octaves below.
				<br /> <br />
				– <b>keys</b>: introduces the used key signatures; one key signature symbol for each voice is expected. If less are given, last one is padded.
				Since key signatures can be set both as header element and as attribute, also see the <m>keys</m> attribute.
				The syntax for the single key signature must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>optional:mode</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Note names are allowed both in anglo-saxon (C, D, E...) and in latin (Do, Re, Mi) format. In both ways,
				they are case insensitive ("c" or "C", "do" or "DO" is the same). <br /> <br />
				Accidentals are defined as string of ASCII characters, each identifying one accidental.
				The list of allowed characters is the following one: <br />
				"n" = natural <br />
				"#" = sharp (+1/2 tone) <br />
				"x" = double sharp (+ 1 tone) <br />
				"+" = monesis = quarter sharp (+1/4 tone) <br />
				"^" = +1/8 tone <br />
				"b" = flat (-1/2 tone) <br />
				"d" or "-" = mobemol = quarter flat (-1/4 tone) <br />
				"v" = -1/8 tone <br />
				If no accidental is defined, the natural is used by default.
				<br /> <br />
				The mode can be either "M" (major) or "m" minor. If no mode is defined, the major is used by default.
				<br /> <br />
				– <b>voicenames</b>: introduces the voice names specification, one name (atom) for each voice is expected.
				If a voice have more than one name, an llll with the list of names must be introduced. To skip names for a voice use <b>nil</b> or <b>[]</b>.
				Since voice names can be set both as header element and as attribute, also see the <m>voicenames</m> attribute.
				<br /> <br />
				– <b>midichannels</b>: introduces the MIDI channels specification, one integer for each voice is expected.
				Since MIDI channels can be set both as header element and as attribute, also see the <m>midichannels</m> attribute.
				<br /> <br />
				– <b>stafflines</b>: set the staff lines configurations. A list of elements (one for each voice) is expected. Since staff lines can be set both as header element and
				as attribute, also see the <m>stafflines</m> attribute. Each element can be in one of the following forms:
				either <b><m>number_of_stafflines</m></b>, setting the number of stafflines for the voice, which will be distributed evenly around
				the middle line of the default staff, or a wrapped llll in the form <b>[<m>index_staff_line1</m> <m>index_staff_line2</m>...]</b>
				where each index is the position of a line to be drawn. Line 1 correspond to the bottommost staffline of a standard staff;
				line 5 correspond to the topmost staffline of a standard staff. Integers need not be positive: indices like -2 or 7 will be
				extrapolated from the standard staff. The total number of lines is thus the length of such llll.
				<br /> <br />
				– <b>markers</b>: specifies the markers. A list of elements (one for each marker) is expected. For <o>bach.roll</o> markers, or for
				<o>bach.score</o> markers attached to milliseconds position, each element
				must be in the form <b>[<m>position_ms</m> <m>marker_name[s]</m> <m>role</m> <m>content</m>]</b> where the two last parameters
				are optional and only supported by <o>bach.roll</o> (ignore them in <o>bach.score</o>). The <m>position_ms</m> is a floating number
				specifying the marker position in milliseconds; the <m>marker_name(s)</m> is either a single symbol, or a wrapped llll, or
				<b>nil</b> or <b>[]</b> if marker has no name. For <o>bach.score</o> measure-attached markers the syntax is: <b>[<m>TIMEPOINT</m> <m>marker_name[s]</m>]</b>
				where <m>TIMEPOINT</m> identifies a time point.
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>[<m>measure_number</m>]</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>[4]</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>[<m>measure_number</m> <m>sym_onset_in_measure</m>]</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>. Sometimes <m>sym_onset_in_measure</m> is called <m>pim</m> (for point in measure)
				For instance, <b>[4 1/4]</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>[<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>]</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>[2 4 1/4]</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>[<m>float_measure_number</m>]</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>[4.2]</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>[1 4 0.2]</b> represents the point after 20% of measure 4, voice 1.
				<br />
				If the measure number is replaced by the <b>any</b> symbol, then the following rational is interpreted as a global symbolic onset inside the score.
				For instance, <b>[any 27/4]</b> represents the point at 27/4 after the beginning of the score, referred to the measureinfo of voice 1;
				<b>[3 any 27/4]</b> does the same for voice 3.
				<br /> <br />
				– <b>slotinfo</b>: specifies the information about the types and the global characteristics of each slot.
				The general syntax for a slotinfo llll in a notation object header is: <b>[slotinfo [<m>slot_num1</m> <m>SPECIFICATIONS1</m>] [<m>slot_num2</m> <m>SPECIFICATIONS2</m>]...]</b>,
				where the <m>slot_num</m> are the slot numbers (1 to 30), followed by their corresponding slotinfo specification. You don't need to give the information about all slots
				at input (only the one that you will use), nor the slot numbers have to be sorted in any way. On the other hand, at output, the slotinfo
				is always output for all slots, sorted in ascending order.
				Each <m>SPECIFICATIONS</m> llll has the form <b>[<m>parameter1</m> <m>content1</m>] [<m>parameter2</m> <m>content2</m>]...</b>, where
				each <m>parameter</m> is a symbol followed by some content specifying a field of the slotinfo.
				The complete list of parameters symbols and their corresponding expected content is the following one: <br />
				– <b>name</b>: expects the name you want to give to the slot (given as a unique symbol). <br />
				– <b>type</b>: expects one of the following symbols, defining the slot type: "function", "int", "float", "intlist", "floatlist", "text",
				"filelist", "llll", "spat", "togglematrix", "intmatrix", "floatmatrix", "filter, "dynfilter", "color", "3dfunction",
				"articulations", "notehead, "dynamics", "none".  <br />
				- <b>access</b>: sets the slot accessibility, and expects a symbol. Default is "readandwrite" (slot is readable and writable);
				you can also use "readonly" (slot is only readable, not writable via interface), or "none" (slot window can't even be opened, slot
				content cannot be accessed).<br />
				- <b>temporalmode</b>: sets whether the slot contains temporal information, and if so in which form.
				It expects one of the following symbols: "none" (the information is not temporal), "relative" (the information is temporal, and the X value
				of each slot item is a relative position inside the note duration, usually between 0 and 1), "milliseconds" (the information is temporal, and the X
				value of each slot item is defined as a position milliseconds with respect to the note onset). <br />
				- <b>extend</b>: toggles the ability for temporal slots to extend their content beyond the end of each corresponding note (might be also useful,
				in combination with the "milliseconds" temporalmode, in order to define continuous parameters, independently from a note duration). <br />
				– <b>range</b>: followed by two numbers, sets the minimum and maximum values the slot range (vertical axis for function and 3dfunction slots, or number
				range for number slots) may assume. <br />
				– <b>key</b>: expects the character or the ASCII value of a key to be mapped as a hotkey for the slot. <br />
				– <b>slope</b>: expects a parameter (-1 to 1, 0 = linear) to exponentially represent the displayed range values of the slot. <br />
				– <b>width</b>: expects a value determining the width of the slot window (scaled according to the object's vertical zoom). <br />
				– <b>height</b>: a value determining the height of the slot window (scaled according to the object's vertical zoom). You can also put "auto"
				if you want to leave an automatically calculated height (default). <br />
				– <b>ysnap</b>: sets, for function or 3dfunction slots, some privileged Y points to which the points will be snapped
				upon Shift+Alt+mousedrag. <br />
				– <b>zsnap</b>: sets, for 3function slots, some privileged Z points to which the points will be snapped
				upon Shift+Ctrl+Alt+mousedrag (mac). <br />
				– <b>domain</b>: followed by two numbers, for function and 3dfunction slots, replaces the standard 0 to 1 domain with any input domain (input numbers
				are minimum and maximum). <br />
				– <b>domainslope</b>: a slope (-1 to 1, 0 = linear) to exponentially rescale the domain display. <br />
				– <b>default</b>: a numeric value (for numeric slots) determining the slot default value. <br />
				– <b>representation</b>: it could expect one of the following things. 1: Symbols defining units of measurement (e.g. "Hz", "ms"...), for numeric
				slots one symbol is expected, for function slots if one symbol is given, it is applied to the Y axis, if two symbols are given they are
				applied to the X and Y axis, for 3dfunction slots up to three symbols can be given, the third one referring to the Z axis, use <b>nil</b> or
				<b>[]</b> to skip assignment for an axis. For filter and dynfilter slots, you can assign "Hz" or "cents" as unit of measurement
				and it will be used to display the cutoff frequency accordingly. 2: An enumeration list (only for int
				and intlist slots), mapping each integer to an element of this enumeration list (e.g. in an int slot from 1 to 3, a
				slot_representation "(one two three)" will display "one" at the place of 1, "two" at the place of 2, "three" at the place of 3).
				These symbols will never be output upon dump or play, they will be just displayed. 3:
				For matrix-typed slots, it can be either a llll containing the number of rows and columns, such as (3 4), or a llll containing
				the names of the rows and columns, such as ((or fee foo) (col1 col2 col3)). To give units to different axes, just list them, such as: Hz dB.
				– <b>zrange</b>: as "range", but for the Z spatial dimension (used by the 3dfunction slot: the Z dimension is the one "coming out" from the screen). <br />
				– <b>zslope</b>: as "slope", but for the Z spatial dimention (used by the 3dfunction slot). <br />
				– <b>singleslotfortiednotes</b>: (for bach.score only) tells whether tied sequences of notes have just one slot, the one corresponding
				to the first note of the sequence. <br />
				– <b>copywhensplit</b>: tells whether this slot should be copied when a note is split into a sequence of multiple notes (e.g. via quantization). <br />
				- <b>follownotehead</b>: forces to automatically modify the value of the slot depending on the notehead trimming (useful if the slot
				value is something associated to the notehead, such as the starting point for reading a sample).<br />
				<br />
				You are not obliged to input all the fields: you can give as input only the required fields.
				Also at output, only the needed fields are given (e.g. the "zrange" is only output for 3dfunction slots, and so on).
				Setting an individual field for a given will not change any other field, unless the type is changed, in which case
				a conversion on all the slots is performed (if possible, i.e. if slots are compatible) otherwise the slot data of the given slot is lost.
				While converting slots, also some other fields may be changed to default values for the new slot type. <br />
				Some more fields can be set via the slotinfo. These fields are never retrieved when the slotinfo is queried via a
				<m>dump</m> message, since they correspond to standard attribute values of the notation object: <br />
				- <b>background</b>: this should be set to 1 if one needs the slot to be constantly painted in the background or 0 otherwise.
				This information is constantly synchronized with the <m>bgslots</m> attribute. <br />
				- <b>popup</b> (except bach.slot): this should be set to 1 if one needs the slot to show up in the note+popup+menu, or to 0 otherwise.
				This information is constantly synchronized with the <m>popupmenuslots</m> attribute. <br />
				- <b>rightclick</b> (except bach.slot): this should be set to 1 if one wants that the right click (or two-fingers tap) on a note head directly
				pops up the slot window of the current slot, or to 0 otherwise.
				This information is constantly synchronized with the <m>rightclickslot</m> attribute. <br />
				- <b>linkto</b> (except bach.slot): this field defines the possible slot linkage. Slot linkage is a way to entangle some notation or
				display features to the content of a given slot. You can specify here to which feature the slot should be linked,
				via one of the following symbols: "none", "lyrics", "color", "noteheadadjust", "noteheadchar", "noteheadfont", "notesize". <br />
				<br />
				– <b>commands</b>: specifies the information about the commands. A list of elements (one for each command) is expected.
				The general syntax for an llll defining commands in a notation object header is:
				<b>[commands [<m>command_num1</m> <m>SPECIFICATIONS1</m>] [<m>command_num2</m> <m>SPECIFICATIONS2</m>]...]</b>
				where the <m>command_num1</m> are the command numbers (1 to 30), followed by their corresponding command specification. You don't need to give the information about all slots
				at input (only the one that you will use), nor the command numbers have to be sorted in any way. On the other hand, at output, the commands
				are always output for all commands, sorted in ascending order.
				Each <m>SPECIFICATIONS</m> llll has the form <b>[<m>parameter1</m> <m>content1</m>] [<m>parameter2</m> <m>content2</m>]...</b>, where
				each <m>parameter</m> is a symbol followed by some content specifying a field of the commands.
				The list of parameters symbols and their corresponding expected content is the following one: <br />
				– <b>note</b>: expects the symbol which will replace the "note" symbol in the playout (given as a unique symbol). <br />
				– <b>chord</b>: expects the symbol which will replace the "chord" symbol in the playout (given as a unique symbol). <br />
				– <b>rest</b>: expects the symbol which will replace the "rest" symbol in the playout (given as a unique symbol). <br />
				– <b>key</b>: expects the character or the ASCII value of a key to be mapped as a hotkey for the slot. <br />
				<br /> <br />
				– <b>groups</b>: (<o>bach.roll</o> only) specifies the information about the grouped chords.
				Although bach.roll syntax, as everything in bach, is transparent (and you are thus allowed to modify any element),
				there are extremely few cases where you might need to set manually the group information in llll form.
				Usually, such information is only dealt with via the interface (i.e. by grouping and ungrouping things),
				and the group header element is only a way to embed or save such information with the object.
				Nevertheless, nothing in principle prevents you from setting groups via message. The syntax is the following one:
				<b>[groups <m>GROUP1</m> <m>GROUP2</m>...]</b>, where each <m>GROUP</m> is an llll having the syntax
				<b>[<m>ADDRESS_CHORD1</m> <m>ADDRESS_CHORD2</m> <m>ADDRESS_CHORD3</m>...]</b>, where each address llll identifies one of the
				chord inside the groups, via the following syntax: <b>[<m>voice_number</m> <m>chord_index</m>]</b>,
				where the chord index is the position of the chord inside the sequence of chords of the voice (ordered by onsets).
				– <b>articulationinfo</b>: specifies the information about custom defined articulation.
				The general syntax for the articulationinfo llll in a notation object header is: <b>[articulationinfo <m>CUSTOMARTICULATION1</m> <m>CUSTOMARTICULATION2</m>...]</b>.
				Each <m>CUSTOMARTICULATION</m> llll has the form <b>[<m>parameter1</m> <m>content1</m>] [<m>parameter2</m> <m>content2</m>]...</b>, where
				each <m>parameter</m> is some propriety of the custom articulation to be defined, followed by its value.
				The complete list of parameters symbols and their corresponding expected content is the following one: <br />
				– <b>fullname</b>: a symbol defining the articulation full name (e.g. "myfermata"). <br />
				– <b>shortname</b>: a symbol defining the articulation short name (e.g. "myf"). <br />
				– <b>alias</b>: up to 5 other names which will be mapped on the articulation when found in articulation slots. <br />
				– <b>font</b>: a symbol containing the font name, or "default" (in order to use the defined "articulationsfont"). <br />
				– <b>basept</b>: the basic font size (corresponding to a no-vzoom situation). <br />
				– <b>position</b>: one of the following symbols: "abovenote", "belownote", "noteside", "stemsidenearnotehead", "stemsidenearflag", "manual", determining the position of the articulation. <br />
				– <b>position</b>: one of the following symbols: "abovenote", "belownote", "noteside", "stemsidenearnotehead", "stemsidenearflag", "manual", determining the position of the articulation. <br />
				<br />
				The following specifications determine the characters used:
				– <b>mainchar</b>: symbol or unicode value determining the main articulation character (above notes). <br />
				– <b>flippedchar</b>: symbol or unicode value determining the flipped articulation character (below notes). <br />
				– <b>extchar</b>: symbol or unicode value of the articulation extension, if any (e.g.: the tilde in a trill line). <br />
				<br />
				The following specifications will refer to unzoomed situations, and will be scaled according to the zoom:
				– <b>mainxshift</b>, <b>mainyshift</b>: x and y shift of positioning for the main character (positive y shift moves up). <br />
				– <b>flippedxshift</b>, <b>flippedyshift</b>: x and y shift of positioning for the flipped character. <br />
				– <b>mainheight</b>, <b>flippedheight</b>: height of the main and flipped characters. <br />
				– <b>mainycenter</b>, <b>flippedycenter</b>: position of the vertical center of the articulation for main and flipped char. <br />
				– <b>outsidestaffynudge</b>: additional y shift to push articulation farther from staff. <br />
				– <b>extyshift</b>: horizontal offset for the beginning of the articulation extensions. <br />
				<br />
				The following specifications will set the markings used when exporting articulations to MusicXML format:
				– <b>xmlornament</b>: text to be exported as MusicXML ornament whenever the articulation is found, or "none" if no export needed (default). <br />
				– <b>xmltechnical</b>: text to be exported as MusicXML technical tag whenever the articulation is found,
				or "none" if no export needed (default), or "custom" if export must be of "other-technical" type, defining a custom technical tag.<br />
				– <b>xmlarticulations</b>: text to be exported as MusicXML articulation tag whenever the articulation is found,
				or "none" if no export needed (default), or "custom" if export must be of "other-articulation" type, defining a custom articulation tag.<br />
				<br />
				Finally, one can assign an option specification, possibly followed by a list of symbols, to set some flags.
				Symbols must be among the following ones:<br />
				· <b>avoidlines</b>: avoid staff lines.<br />
				· <b>outsidestaff</b>: always place outside staff.<br />
				· <b>centerovernote</b>: center over the notehead.<br />
				· <b>centeroverstem</b>: center over the stem.<br />
				· <b>spanties</b>: articulation extension spans sequences of tied notes.<br />
				· copywhencloned: copy articulation while copying notes.<br />
				· copywhenclonedtosamechord: copy articulation while copying notes, and also when copying notes into the same chord.<br />
				· copywhensplit: copy articulation to all notes when notes are split, or retranscribed as tied sequences.<br />
				· shiftwithbeams: shift vertically according to beams.<br />
				<br />
				– <b>noteheadinfo</b>: specifies the information about custom defined noteheads.
				The general syntax for the articulationinfo llll in a notation object header is: <b>[articulationinfo <m>CUSTOMNOTEHEAD1</m> <m>CUSTOMNOTEHEAD2</m>...]</b>.
				Each <m>CUSTOMNOTEHEAD</m> llll has the form <b>[<m>parameter1</m> <m>content1</m>] [<m>parameter2</m> <m>content2</m>]...</b>, where
				each <m>parameter</m> is some propriety of the custom notehead to be defined, followed by its value.
				The complete list of parameters symbols and their corresponding expected content is the following one: <br />
				– <b>fullname</b>: a symbol defining the articulation full name (e.g. "curly").<br />
				– <b>shortname</b>: a symbol defining the articulation short name (e.g. "cr").<br />
				– <b>alias</b>: up to 5 other names which will be mapped on the articulation when found in articulation slots.<br />
				– <b>font</b>: a symbol containing the font name, or "default" (in order to use the defined "notationfont").<br />
				– <b>basept</b>: the basic font size (corresponding to a no-vzoom situation).<br />
				– <b>char</b>: symbol or unicode value determining the notehead character. If two values are input, they refer respectively to the "black" and "white" flavours
				(assigned <o>bach.score</o> to black and white notes). If three values are input, they refer respectively to "black", "white" and "whole note" flavours.
				If four values are input they refer respectively to "black", "white", "whole note" and "double whole note". <br />
				<br />
				The following specifications will refer to unzoomed situations, and will be scaled according to the zoom: <br />
				– <b>xshift</b>: horizontal shift (positive values move right). <br />
				– <b>yshift</b>: vertical shift (positive values move up). <br />
				– <b>width</b>: the width of the notehead. <br />
				– <b>xshiftsmall</b>: same as xshift, but for grace notes. <br />
				– <b>yshiftsmall</b>: same as yshift, but for grace notes. <br />
				– <b>dlstartxshift</b>: horizontal offset for the beginning of the duration line. <br />
				<br />
				– <b>numparts</b>: specifies the information about the part assignment (see <m>numparts</m> attribute).
				– <b>loop</b>: specifies the information about the loop, as for the <m>loop</m> attribute, as a starting and ending point (in milliseconds, or as timepoints).
				For <o>bach.roll</o>, the gathered syntax for any voice, in its simplest form <b>[<m>CHORD1</m> <m>CHORD1</m>... <m>voice_flag</m>]</b>
				where each <m>CHORD</m> is an llll representing a chord in gathered syntax, and the <m>voice_flag</m> is an optional bitfield summing values of
				1 (if voice is locked), 2 (if voice is muted), 4 (if voice is solo). <br />
				For <o>bach.roll</o>, the gathered syntax for any chord, in its simplest form <b>[<m>onset_ms</m> <m>NOTE1</m> <m>NOTE2</m>... <m>chord_flag</m>]</b>
				where <m>onset_ms</m> is the onset of the chord (starting temporal point) in milliseconds each <m>NOTE</m>
				is an llll representing a note in gathered syntax, and the <m>chord_flag</m> is an optional bitfield summing values of
				1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				In its most general form, each chord can have a specification defining its name(s). This specification must be in the form
				<b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>, and must be put after the last note llll,
				before the <m>chord_flag</m>. For instance, a chord definition might
				have the form <b>[500 [7000. 500 127] [7200. 1200 100] [name paul] 0]</b>
				<br /> <br />
				For <o>bach.roll</o>, the gathered syntax for any note is, in its simplest form <b>[<m>pitch_cents</m> <m>duration</m> <m>velocity</m> <m>note_flag</m>]</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>duration</m> is measured in milliseconds, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining
				graphics, pitch breakpoints, slots, names.
				Each of these specifications is done in the form <b>[<m>specification_name</m> <m>SPECIFICATION CONTENT</m>]</b>, and must be put after the <m>velocity</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a note definition might have the form
				<b>[7300. 136. 127 [graphic 7400 -1/2] [slots [1 [0. 0. 0.] [0.294118 81.138889 0.] [0.294118 38.805556 0.] [1. 0. 0.]]] [name pippo] 0 ]</b>
				<br /> <br />
				Instead of MIDIcents (or cents), one can also instert pitches.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names are in anglo-saxon syntax ("C", "D", "E"...), and are case insentitive. Middle C is C5.
				They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>D#4</b>). <br />
				Accidentals are: <b>#</b> [sharp], <b>b</b> [flat], <b>x</b> [double sharp], <b>q</b> [quartertone sharp], <b>d</b> (quartertone flat),
				<b>^</b> [eighth-tone sharp], <b>v</b> (eighth-tone flat)
				One can also extend the accidental by setting a rational specification followed by a <b>t</b>. For instance <b>C5+1/16t</b> is
				middle C, 1/16 tone up.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>[name john george]</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>[name [high 1] [low 2]]</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.roll</o>, onsets are the only parameter assigned chordwise (they are a propriety of chords, rather than notes).
				The separate syntax for onsets will be thus structured as: an llll for each voice, containing a value for each chord.
				For instance: <b>[0 1000 2000 3000] [100 400] [250 2500]</b>. <br />
				Cents, durations, velocities and extras are all assigned notewise in <o>bach.roll</o> (they are propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>[[6000] [6000 6400] [6200] [6200 6500]] [[7200] [6500 7200 7500]] [[5500] [5400]]</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.roll</o> can properly understand
				<b>[6000 [6000 6400] 6200 [6200 6500]] [[7200] [6500 7200 7500]] [5500 5400]</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut.
				<br /> <br />
				Extras are defined in the separate syntax via lllls sent through the Extras inlet, in the form
				<b>[<m>extra_name</m> <m>GLOBAL_CONTENT</m>] [<m>extra_name</m> <m>GLOBAL_CONTENT</m>]...</b>
				where each sublist is thus composed by a name (a symbol identifying the extra, one of the following: "graphics", "breakpoints", "slots")
				and a global content, which is just an llll structured exactly according to the object's hierarchy.
				This llll is no different than any other separate parameter llll (say: Cents), only instead of having a single element (number)
				for each note, an llll is given, specifying the content of the extra associated to each note
				(a level of parentheses is needed for each note). If this latter level is dropped, and the information concerns a rest, the extra is assigned to the
				rest, if applicable (e.g. slots).
				For instance, the pitch breakpoints specification for a given note may have the form
				<b>[[0. 0. 0.] [0.5 500 0.5] [1. 0. 0.]]</b>, whereas a complete list of extras to be introduced in the Extras inlet may have the form
				<b>(breakpoints (((( 0. 0. 0. ) (0.5 500 0.5) (1. 0. 0.)) (( 0. 0. 0. ) (0.5 -500 0.5) (1. 0. 0.))) ((( 0. 0. 0. ) (0.5 -200 0.1)
				(1. 0. 0.)))) (((( 0. 0. 0. ) (0.5 500 0.5) (1. 0. 0.))) ((( 0. 0. 0. ) (0.5 -200 0.1) (1. 0. 0.))))) (slots ( (((3 10 20 30) (4 0.4))
				((3 10 20 30) (4 0.1))) (())) ())</b>. Notes, chords or voices which don't need a given extras are allowed to be represented as input by
				an empty <b>[]</b> llll. <br />
				The content of each extra is exactly the same as the gathered syntax of such extra, provided that the starting symbol is dropped.
				For instance, instead of <b>[graphics 6200 -1/2]</b>, one should just have <b>[6200 -1/2]</b> as graphic content for a given note, and so on.
				The syntax for the gathered syntax of all extras is provided below. Remember to drop the extra router symbol to obtain the content
				to be put in the separate syntax llll. <br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>[articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>]</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
				<br />				See also:<m>dump</m><br />
			</description>
		</method>
		<method name="lock">
			<arglist />
			<digest>
				Lock selected items
			</digest>
			<description>
				The <m>lock</m> message will lock all selected items, in order to prevent their editing.
				<br />				See also:<m>unlock</m><br />
			</description>
		</method>
		<method name="merge">
			<arg name="selection" optional="1" type="sym" />
			<arg name="threshold_ms" optional="0" type="float" />
			<arg name="threshold_cents" optional="0" type="float" />
			<arg name="time_merging_policy" optional="1" type="int" />
			<arg name="pitch_vel_merging_policy" optional="1" type="int" />
			<digest>
				Merge notes or chords
			</digest>
			<description>
				Syntax: <b>merge <m>[&lt;sym: selection&gt;]</m> <m>&lt;float: threshold_ms&gt;</m> <m>&lt;float: threshold_cents&gt;</m> <m>[&lt;int: time_merging_policy&gt;]</m> <m>[&lt;int: pitch_vel_merging_policy&gt;]</m> </b><br />
				Examples:<br />
				• <b>merge 200 10</b>   <i>→ merge chords and markers &lt;= 200ms and notes &lt;= 10cents</i><br />
				• <b>merge -1 10</b>   <i>→ just merge notes &lt;= 10cents</i><br />
				• <b>merge 200 -1</b>   <i>→ just merge chords and markers &lt;= 200ms</i><br />
				• <b>merge selection 200 10</b>   <i>→ only merge elements if selected</i><br />
				• <b>sel chords, merge selection 200 -1</b>   <i>→ just merge chords &lt;= 200ms</i><br />
				• <b>merge 200 10 -1</b>   <i>→ align result to the leftmost merged chord</i><br />
				• <b>merge 200 10 1 -1</b>   <i>→ align result to the rightmost merged chord and bottommost pitch</i><br />
				<br />
				You can use the <m>merge</m> message to perform a merging of chords too near (with respect to the time),
				and/or of notes too near (with respect to the pitch). The two tasks are separate tasks: the first implies that chords
				lying within a given time threshold will be merged to a single chord; the second implies that notes whose pitches differ
				by less then a pitch threshold will be merged to a single note. <br />
				Two arguments are needed for the "merge" command: the time threshold (in milliseconds) and the pitch threshold (in cents).
				If any of the two threshold is set as negative, this means that there will be no corresponding merging: leave the time threshold as negative
				if you only want to merge in the pitch direction, leave the pitch threshold as negative if you only want to merge chords in the time coordinate. <br />
				Two additional optional arguments can be given specifying, respectively: the time merging policy (-1 = align to the leftmost chord,
				0 = align to the average of chords, 1 = align to the rightmost chord), the pitch/velocity merging policy (-1 = set pitch/velocity to the bottommost
				pitch/velocity, 0 = set pitch/velocity to the average of pitches/velocities, 1 = set pitch/velocity to the topmost pitch/velocity).
				The merging policies are optional parameters: if you don't specify them, by default they are 0 (= merge to the average). <br />
				If an optional "selection" symbol is put in front of the time threshold argument, the merging is performend only on the current selection,
				otherwise it is performed on the whole score. <br />
				Merging also applies to markers, which actually entails a deletion of markers nearer than <m>threshold_ms</m> to some other marker.
				Time position is averaged with <m>time_merging_policy</m> also. If you don't want markers to be thinned, consider selecting all chords only
				and then using <m>merge selection</m>.
				<br />				See also:<m>explodechords</m><br />
			</description>
		</method>
		<method name="moveslot">
			<arg name="slot_from" optional="0" type="int/symbol" />
			<arg name="slot_to" optional="0" type="int/symbol" />
			<digest>
				Move a slot to another one for selected items
			</digest>
			<description>
				Syntax: <b>moveslot <m>&lt;int/symbol: slot_from&gt;</m> <m>&lt;int/symbol: slot_to&gt;</m> </b><br />
				Examples:<br />
				• <b>moveslot 2 7</b>   <i>→ move the content of slot 2 to slot 7 for selected items</i><br />
				• <b>moveslot 2 active</b>   <i>→ destination slot is the active slot</i><br />
				• <b>copyslot amplienv myfunction</b>   <i>→ copy the slot named amplienv to the slot named myfunction</i><br />
				<br />
				A <m>moveslot</m> message will move the content of a given slot to another slot for any selected note.
				The slot number of the source slot and of the target slot are given as arguments.
				Instead of the slot numbers, you can use slot names, or you can the word "active" to refer to the currently open slot.
				<br />				See also:<m>copyslot</m>,<m>eraseslot</m>,<m>setslot</m>,<m>changeslotitem</m>,<m>resetslotinfo</m><br />
			</description>
		</method>
		<method name="mute">
			<arglist />
			<digest>
				Mute selected items
			</digest>
			<description>
				The <m>mute</m> message will set all selected items as "muted", so that they will not be sequenced while playing.
				<br />				See also:<m>unmute</m>,<m>solo</m>,<m>unsolo</m><br />
			</description>
		</method>
		<method name="name">
			<arg name="names" optional="0" type="llll" />
			<digest>
				Assign name(s) to selected items
			</digest>
			<description>
				Syntax: <b>name <m>&lt;llll: names&gt;</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>name George</b>   <i>→ name selected elements as 'George'</i><br />
				• <b>name George @append 1</b>   <i>→ add 'George' as name to selected elements</i><br />
				• <b>name [George Martin] [George Harrison]</b>   <i>→ assign complex llll name</i><br />
				• <b>name George @progeny 1</b>   <i>→ if chords are selected also assign name to their notes</i><br />
				<br />
				Message attributes:<br />
				<m>@incremental</m> (int, default: 0): If non-zero, assigns incremental numbering to selected markers in addition to names<br />
				<m>@progeny</m> (int, default: 0): If non-zero, assigns names to both selected chords and all their notes<br />
				<m>@append</m> (int, default: 0): If non-zero, appends name to existing ones<br />
				<br />
				The word <m>name</m>, followed by a symbol, a number or an llll, assigns such content as names for the
				selected notation items. <br />
				If markers are selected, an additional message attribute can be given in order to name them with an incremental naming system,
				keeping the first one of the introduced names, and then adding an integer as second name, so that the overall name is unique
				inside the <o>bach.roll</o>. The additional message attribute must be given in the form <b>@incremental 1</b>,
				to be appended at the end of the message. For instance <b>name foo @incremental 1</b> will name all selected elements as "foo",
				but will name all selected markers as "foo 1", "foo 2", and so on (unless one of such names was already taken, and thus it is skipped
				to guarantee the unicity). <br />
				If a <b>@progeny 1</b> attribute is added and chords are selected, not only the chord name is changed, but also the name of all its notes.
				This is handy for instance, if one needs to send <b>name @progeny 1</b> to delete all names of selected chords and notes.
				<br />				See also:<m>nameappend</m>,<m>clearnames</m>,<m>sel</m>,<m>unsel</m>,<m>select</m><br />
			</description>
		</method>
		<method name="nameappend">
			<arg name="names" optional="0" type="llll" />
			<digest>
				Append name(s) to selected items
			</digest>
			<description>
				Syntax: <b>nameappend <m>&lt;llll: names&gt;</m> </b><br />
				Examples:<br />
				• <b>name Ringo</b>   <i>→ append 'Ringo' to selected element's names</i><br />
				• <b>name [Ringo Starr] [[Low High Snare] [Sizzle Crash]]</b>   <i>→ append complex llll name</i><br />
				<br />
				Works like the <m>name</m> message, but appends the given names
				to the already existing ones (see <m>name</m>).
				<br />				See also:<m>name</m>,<m>clearnames</m><br />
			</description>
		</method>
		<method name="nametoslot">
			<arg name="slot_number_or_name" optional="0" type="int/symbol" />
			<arg name="policy" optional="1" type="symbol" />
			<digest>
				Copy name(s) to slot for selected items
			</digest>
			<description>
				Syntax: <b>nametoslot <m>&lt;int/symbol: slot_number_or_name&gt;</m> <m>[&lt;symbol: policy&gt;]</m> </b><br />				<br />
				A <m>nametoslot</m> message followed by an integer <m>N</m> copies the names of the selected
				notes inside their slot <m>N</m>. <br />
				A second argument sets the policy in case the chord containing the note also has a name. This argument
				must be one of the following symbols: <br />
				- "ignore" (default): chord name is ignored; <br />
				- "replace": chord name is always used instead of note names; <br />
				- "replacenull": chord name is used only for notes having no name (i.e. <b>null</b> name); <br />
				- "prepend": chord name is prepended to existing note names; <br />
				- "append": chord name is appended to existing note names; <br />
				- "merge" or "mergeprepend" (default): only chord names which don't already belong to the note are prepended to existing note names; <br />
				- "mergeappend": only chord names which don't already belong to note are appendend to existing note names.
				<br />				See also:<m>name</m>,<m>nameappend</m>,<m>clearnames</m>,<m>sel</m>,<m>unsel</m>,<m>select</m><br />
			</description>
		</method>
		<method name="nametoslot">
			<arg name="pitchslot" optional="0" type="int" />
			<arg name="velocityslot" optional="1" type="int" />
			<digest>
				Copy duration line breakpoint function into a slot
			</digest>
			<description>
				Syntax: <b>nametoslot <m>&lt;int: pitchslot&gt;</m> <m>[&lt;int: velocityslot&gt;]</m> </b><br />				<br />
				A <m>dltoslot</m> message copies the duration line envelope (as a breakpoint function)
				into a given slot for all the selected notes. Actually, the message copies both a pitch envelope and a velocity envelope
				into two different slots, given as arguments (use -1 to avoid assigning one of the slots).
				You should ensure that the introduced slots are of the appropriate type (in particular, they should be
				function slots, with an appropriate range and a domain between 0 and 1). <br />
				<br />				See also:<m>setslot</m><br />
			</description>
		</method>
		<method name="onset">
			<arg name="onset" optional="0" type="number/llll/anything" />
			<digest>
				Modify the onset of selected items
			</digest>
			<description>
				Syntax: <b>onset <m>&lt;number/llll/anything: onset&gt;</m> </b><br />
				Examples:<br />
				• <b>onset 1000</b>   <i>→ move selected items to 1s</i><br />
				• <b>onset = 1000</b>   <i>→ exactly the same</i><br />
				• <b>onset = onset + 1000</b>   <i>→ shift selected items by 1s forward</i><br />
				• <b>onset = [chordindex - 1] * 1000</b>   <i>→ space all chords by 1s</i><br />
				• <b>onset = "[pow[1.4, chordindex] - 1]*1000"</b>   <i>→ the same, in rallentando</i><br />
				<br />
				The word <m>onset</m>, followed by a number, sets the new onset, in milliseconds, for all
				the selected notation items. This absolute onset can be replaced by an llll containing a relative modification of the
				existing onset, or by a generic equation.
				All parameters, except for <o>bach.score</o>'s timepoints, also support a relative modification syntax, which modifies the existing values instead
				Relative modifications of a parameter are handled via lllls of the type <b>[<m>value</m> <m>function</m>]</b>, where
				the <m>function</m> is one of the following symbols: "plus", "minus", "times", "div". Such modification applies the corresponding
				function to the current value of the parameter and the inserted <m>value</m>. For instance, <b>[100 minus]</b> removes 100 to the current
				value of the parameter, while <b>[2. times]</b> multiplies it by two.
				<br /> <br />
				All separate parameters, except for measureinfo, ties and slots, can also be modified via a generic equation. In order to do so,
				the message symbol must be followed by an <m>=</m> sign (with spaces before and after it), and then by the desired equation.
				The standard symbolic variables are available. <br />
				Symbolic variables are variables that can be used in the conditional selection or parameter modification processes.
				These are: <m>onset</m> (in ms), <m>duration</m> (in ms), <m>velocity</m>, <m>cents</m> (pitch in MIDIcents),
				<m>pitch</m> (diatonic pitch), <m>poc</m> (pitch or cents, depending on what was defined by the user),
				<m>tail</m> (position of the note end, in ms), <m>voice</m> (voice number), <m>part</m> (part number),
				<m>voiceensemble</m> (voiceensemble number).
				For <o>bach.score</o> you can also use: <m>symduration</m> (symbolic rational duration),
				<m>symonset</m> (symbolic rational onset inside the measure), <m>symtail</m> (sum of the two previous), <m>measure</m> (the measure number),
				<m>tie</m> (which is 1 if a tie starts, 2 if a tie ends and 3 if a tie both starts and ends, 0 otherwise) and <m>grace</m> (1 for
				grace chords, 0 otherwise). <br />
				You can also use the variables <m>numnotes</m>, <m>numchords</m> and <m>nummeasures</m> to determine the number of notes/chords/measures
				that a otation item has (e.g. the number of chords in a measure, or the number of notes in a chord). <br />
				In addition, you also have the <m>index</m> symbol, corresponding to the index of the item: the index of the note in the chord (bottom-up),
				the index of the chord in the measure or voice (left to right), the index of the measures, voices, markers, pitch breakpoints, etc.
				(all left to right). In case you need to distinguish between chord index and note index, for a given note, you can explicitly use the
				<m>chordindex</m> or <m>noteindex</m> symbols. <br />
				For instance, one could define <b>velocity = duration / 100. + onset * 0.01</b> or <b>cents = cents + 200</b>, or
				<b>onset = [cents - 6000] / 100 + 2000 * [voice - 1]</b>.
				The equation syntax extends in a sense the relative modification syntax; however it is applied to the globality of the selection, and
				one cannot apply different equations to different notes inside the chord.
				<br /> <br />
				<br />				See also:<m>distribute</m><br />
			</description>
		</method>
		<method name="openslotwin">
			<arg name="slot_number_or_name" optional="0" type="int/symbol" />
			<digest>
				Open a slot window
			</digest>
			<description>
				Syntax: <b>openslotwin <m>&lt;int/symbol: slot_number_or_name&gt;</m> </b><br />
				Examples:<br />
				• <b>openslotwin 3</b>   <i>→ open 3rd slot window for selected note</i><br />
				• <b>openslotwin amplienv</b>   <i>→ open slot window for slot named 'amplienv'</i><br />
				<br />
				If a single note is selected, an <m>openslotwin</m> message, followed by the number of the slot whose window should be open,
				opens the corresponding slot window. If more notes are selected, nothing happens.
				Instead of the slot number, you can use slot names, so you can set a symbol as argument containing the name of the slot whose window should
				be open.
				<br />				See also:<m>setslot</m><br />
			</description>
		</method>
		<method name="paintjit">
			<arglist />
			<digest>
				Draw the score onto a jitter matrix
			</digest>
			<description>
				The <m>paintjit</m> message, followed by the name of a jitter matrix,
				mirrors the canvas of the object onto the jitter matrix.
				The matrix should have either 1 or 4 planes, and should have at least 2 dimensions.
				The first two dimensions are used; the matrix is automatically resized to the needed dimensions.
				Retina resolution is not supported (retina objects are mirrored in standard resolution).
			</description>
		</method>
		<method name="paste">
			<arg name="replace" optional="1" type="symbol" />
			<arg name="position_or_slot" optional="1" type="number/symbol" />
			<arg name="starting_voice_number" optional="1" type="int" />
			<digest>
				Paste
			</digest>
			<description>
				Syntax: <b>paste <m>[&lt;symbol: replace&gt;]</m> <m>[&lt;number/symbol: position_or_slot&gt;]</m> <m>[&lt;int: starting_voice_number&gt;]</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>paste</b>   <i>→ paste at original position</i><br />
				• <b>paste 1000</b>   <i>→ paste at 1 sec</i><br />
				• <b>paste end</b>   <i>→ paste at the end (i.e. append)</i><br />
				• <b>paste end @repeat 200</b>   <i>→ append 200 times</i><br />
				• <b>paste replace</b>   <i>→ paste replacing current selection</i><br />
				• <b>paste 1000 2</b>   <i>→ paste at 1 sec starting at voice 2</i><br />
				• <b>paste [] 2</b>   <i>→ paste at original position starting at voice 2</i><br />
				• <b>paste slot</b>   <i>→ paste copied slot(s) to selection</i><br />
				• <b>paste slot all</b>   <i>→ the same</i><br />
				• <b>paste slot 3</b>   <i>→ paste copied slot to slot 3 of selection</i><br />
				• <b>paste slot ampenv</b>   <i>→ paste copied slot to "ampenv" slot of selection</i><br />
				• <b>paste slot active</b>   <i>→ paste copied slot to currently open slot</i><br />
				• <b>paste durationline</b>   <i>→ paste copied duration line to selection</i><br />
				• <b>paste slotinfo 4</b>   <i>→ paste slotinfo onto slot 4</i><br />
				<br />
				Message attributes:<br />
				<m>@repeat</m> (int, default: 1): Number of times pasting must be performed<br />
				<br />
				Pastes the content contained in the global clipboard. <br />
				If the clipboard contains a portion of score, this score is pasted at its exact original position. Two optional arguments
				changes this behavior: the first argument is a floating point number setting the onset at which the copied portion should be pasted (use <b>[]</b>
				or <b>nil</b> to keep the original position, use the "end" symbol to paste at the end of the score,
				use the "replace" symbol to paste replacing current selection), the second argument is an integer
				setting the number of the uppermost voice for pasting (pasting will retain original voices if no second argument is set). <br />
				If the clipboard contains duration line (breakpoints) content, and the "durationline" symbol is used as first argument,
				the duration line is applied to all selected notes. <br />
				If the clipboard contains slot content, and the "slot" symbol is used as first argument,
				the slot content is applied to the selected notes. If an integer argument is given, and a single slot
				was copied, the slot content is applied only to the specified slot number. This number can be replaced with the "active" symbol, and the
				slot content will be applied to the open slot window. <br />
				Exactly analogously, a "slotinfo" symbol can be used instead of "slot", and if the clipboard contains slotinfo content, then
				the information about the structure of the slot (slotinfo) is pasted on the specificed slot (also slot names and "active"
				symbol are supported).
				<br />				See also:<m>cut</m>,<m>copy</m><br />
			</description>
		</method>
		<method name="pause">
			<arglist />
			<digest>
				Pause
			</digest>
			<description>
				The <m>pause</m> message pause any ongoing playing, if <o>bach.roll</o> was in play mode (nothing happens otherwise).
				When paused, the play head cursor is updated to its last reached position while playing, so that a new play will begin by default
				at that position.
				<br />				See also:<m>play</m>,<m>playselection</m>,<m>stop</m><br />
			</description>
		</method>
		<method name="pitch">
			<arg name="pitch" optional="0" type="number/llll/anything" />
			<digest>
				Modify the pitch of selected items
			</digest>
			<description>
				Syntax: <b>pitch <m>&lt;number/llll/anything: pitch&gt;</m> </b><br />
				Examples:<br />
				• <b>pitch C5</b>   <i>→ change selected notes to middle C's</i><br />
				• <b>pitch = C5</b>   <i>→ exactly the same</i><br />
				• <b>pitch = pitch + D0</b>   <i>→ transpose by major second</i><br />
				• <b>pitch = pitch + Eb0</b>   <i>→ transpose by minor third</i><br />
				• <b>pitch = pitch - C1</b>   <i>→ transpose one octave down</i><br />
				• <b>pitch = [pitch % C1] + C5</b>   <i>→ collapse to middle octave</i><br />
				<br />
				The word <m>pitch</m>, followed by a pitch, sets the new pitch, in midicents, for all
				the selected notation items. Differently from <m>cents</m>, the <m>pitch</m> message preserve diatonic information.
				If a list of pitches is given as arguments, this is applied to selected chords notewise: bottommost note will be assigned
				the first value, the one above will be assigned the next one, and so on. If less values than selected notes in the chord
				are given, last value is padded. <br /> <br />
				Any of the numbers in the pitch syntax can be replaced by an llll containing a relative modification of the existing pitch.
				If a single number is inserted, this can be replaced by a generic equation.
				All parameters, except for <o>bach.score</o>'s timepoints, also support a relative modification syntax, which modifies the existing values instead
				Relative modifications of a parameter are handled via lllls of the type <b>[<m>value</m> <m>function</m>]</b>, where
				the <m>function</m> is one of the following symbols: "plus", "minus", "times", "div". Such modification applies the corresponding
				function to the current value of the parameter and the inserted <m>value</m>. For instance, <b>[100 minus]</b> removes 100 to the current
				value of the parameter, while <b>[2. times]</b> multiplies it by two.
				<br /> <br />
				All separate parameters, except for measureinfo, ties and slots, can also be modified via a generic equation. In order to do so,
				the message symbol must be followed by an <m>=</m> sign (with spaces before and after it), and then by the desired equation.
				The standard symbolic variables are available. <br />
				Symbolic variables are variables that can be used in the conditional selection or parameter modification processes.
				These are: <m>onset</m> (in ms), <m>duration</m> (in ms), <m>velocity</m>, <m>cents</m> (pitch in MIDIcents),
				<m>pitch</m> (diatonic pitch), <m>poc</m> (pitch or cents, depending on what was defined by the user),
				<m>tail</m> (position of the note end, in ms), <m>voice</m> (voice number), <m>part</m> (part number),
				<m>voiceensemble</m> (voiceensemble number).
				For <o>bach.score</o> you can also use: <m>symduration</m> (symbolic rational duration),
				<m>symonset</m> (symbolic rational onset inside the measure), <m>symtail</m> (sum of the two previous), <m>measure</m> (the measure number),
				<m>tie</m> (which is 1 if a tie starts, 2 if a tie ends and 3 if a tie both starts and ends, 0 otherwise) and <m>grace</m> (1 for
				grace chords, 0 otherwise). <br />
				You can also use the variables <m>numnotes</m>, <m>numchords</m> and <m>nummeasures</m> to determine the number of notes/chords/measures
				that a otation item has (e.g. the number of chords in a measure, or the number of notes in a chord). <br />
				In addition, you also have the <m>index</m> symbol, corresponding to the index of the item: the index of the note in the chord (bottom-up),
				the index of the chord in the measure or voice (left to right), the index of the measures, voices, markers, pitch breakpoints, etc.
				(all left to right). In case you need to distinguish between chord index and note index, for a given note, you can explicitly use the
				<m>chordindex</m> or <m>noteindex</m> symbols. <br />
				For instance, one could define <b>velocity = duration / 100. + onset * 0.01</b> or <b>cents = cents + 200</b>, or
				<b>onset = [cents - 6000] / 100 + 2000 * [voice - 1]</b>.
				The equation syntax extends in a sense the relative modification syntax; however it is applied to the globality of the selection, and
				one cannot apply different equations to different notes inside the chord.
				<br /> <br />
			</description>
		</method>
		<method name="pixeltotime">
			<arg name="query_label" optional="1" type="llll" />
			<arg name="pixel_position" optional="0" type="float" />
			<digest>
				Convert a pixel position into a time position
			</digest>
			<description>
				Syntax: <b>pixeltotime <m>[&lt;llll: query_label&gt;]</m> <m>&lt;float: pixel_position&gt;</m> </b><br />
				Example: <b>pixeltotime 300</b>   <i>→ get the time position corresponding to 300pixels</i><br />
				<br />
				The <m>pixeltotime</m> message converts a position given in pixels into a position given in milliseconds, representing
				the time corresponding to the inserted pixel position.
				The output answer is sent through the playout, and its syntax is: <b>time <m>time_position_ms</m></b>, where the last element
				is indeed the time position (in milliseconds) corresponding to the inserted pixel position. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>[label <m>label_name</m>]</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime [label john] 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
				<br />				See also:<m>timetopixel</m><br />
			</description>
		</method>
		<method name="play">
			<arg name="scheduling_mode" optional="1" type="symbol" />
			<arg name="start_ms" optional="1" type="float" />
			<arg name="end_ms" optional="1" type="float" />
			<digest>
				Play
			</digest>
			<description>
				Syntax: <b>play <m>[&lt;symbol: scheduling_mode&gt;]</m> <m>[&lt;float: start_ms&gt;]</m> <m>[&lt;float: end_ms&gt;]</m> </b><br />
				Examples:<br />
				• <b>play</b>   <i>→ play from current playhead position</i><br />
				• <b>play 2000</b>   <i>→ play starting from 2s till the end</i><br />
				• <b>play 2000 4000</b>   <i>→ play starting from 2s, stop at 4s</i><br />
				• <b>play offline</b>   <i>→ play in non-realtime mode ("uzi-like")</i><br />
				• <b>play offline 2000 4000</b>   <i>→ play from 2s to 4s in non-realtime mode</i><br />
				• <b>play selection</b>   <i>→ play selected items only</i><br />
				• <b>play selection offline</b>   <i>→ the same, in non-realtime mode ("uzi-like")</i><br />
				• <b>play selection offline deferlow</b>   <i>→ play selection offline but deferlow between consecutive outputs</i><br />
				• <b>play preschedule</b>   <i>→ accurate prescheduled playback (with limitations)</i><br />
				<br />
				The <m>play</m> message plays a portion or all the <o>bach.roll</o>.
				"Playing" means that <o>bach.roll</o> sends from the "playout" outlet, at the timing corresponding to each chord onset,
				the information about all the chord, or about all the notes of the chord (depending on the <m>playmode</m> attribute, to which you
				should refer to know more). Markers are also sequenced if the <m>playmarkers</m> attribute is set to 1.
				The sequencing takes into account the solo and mute state of each element (see <m>solo</m>, <m>unsolo</m>, <m>mute</m> and <m>unmute</m> messages):
				if elements are muted, they will not be sequences; if some elements are set as "solo", just those elements will be sequenced.
				If multiple chords or notes are simultaneous, the order is from topmost voice to bottommost voice, then from lowest note to highest note.
				Sequencing can be controlled with a variable speed via the <m>clock</m> message and the <o>setclock</o> object.
				The <m>play</m> message, without any further argument, plays the <o>bach.roll</o> from the current playhead cursor position
				(by default: the beginning of the <o>bach.roll</o>) to the end. <br />
				If you put as first optional argument the "selection" symbol, only the selected content is played:
				playback starts at the beginning of the selection and ends once the last selected item is played. <br />
				If you put as additional argument the "offline" symbol, all the playing will be done in non-real-time mode, i.e. with no sequencing involved; playing messages
				will be still output from the playout, but one after another, "immediately". <br />
				If you put as additional argument the "preschedule" symbol, all the playing events will be prescheduled.
				Prescheduled playback schedules the events at the beginning of the playback, hence taking a bit more time before playback starts, but also ensuring
				ensures the best possible timing. Prescheduled playback has some limitations: <br />
				- no live modification to the roll or score is accounted for during playback; <br />
				- loops won't work;  <br />
				- lambda+modifications won't work;  <br />
				- redraw is only performed at each new event;  <br />
				- the "pause" message won't work.  <br />
				The "selection" symbol can be combined with both "offline" and "preschedule" symbols, but "offline" and
				"preschedule" are mutually exclusive. <br />
				If you use the "offline" symbol, you can follow it by a "deferlow" symbol to force a defer-low operation for every output note. <br />
				If you give a single numeric argument, it will be the starting point in milliseconds
				of the region to be played: <o>bach.roll</o> will play from that point to the end. If you give two numeric arguments, they will be the starting and
				ending point in milliseconds of the region to be played.
				<br /> <br />
				For <o>bach.roll</o>, the playout syntax is used whenever the information about a note or chord is sent through the playout (either at playtime
				or at offline play, or selection dump).
				The playout syntax is a slight variation of the standard chord gathered syntax. Two different cases apply, according to the <m>playmode</m>
				attribute value. If the <m>playmode</m> is set to Chordwise, the information about each chord is output in the form <br />
				<b>chord <m>voice_number</m> <m>MIDI_channel</m> [<m>onset</m> <m>NOTE1</m> <m>NOTE2</m> <m>NOTE3</m> <m>chord_flag</m>] </b> <br />
				where each <b><m>NOTE</m></b> is the gathered syntax of the note (see below).
				If the <m>playmode</m> is set to Notewise, information about each note is output as if the note were the only note in the chord, i.e. in the form <br />
				<b>note <m>voice_number</m> <m>MIDI_channel</m> [<m>onset</m> <m>NOTE</m> <m>chord_flag</m>] </b> <br />
				where <b><m>NOTE</m></b> is the note gathered syntax.
				The <m>MIDI_channels</m> is the one associated with the voice to which the note or chord belongs. The <m>onset</m> is in milliseconds,
				The <m>chord_flag</m> is a bitfield summing values of 1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				The playout syntax also concerns markers: they are output in the form: <b>marker <m>NAME_OR_NAMES</m> <m>onset_ms</m> <m>role</m> <m>optional:content</m></b>
				where the <m>NAME_OR_NAMES</m> is either a single atom (if the marker has a single name) or a wrapped plain llll containing the names, and the <m>optional:content</m>
				is only output if the marker role requires it.
				<br /> <br />
				In <o>bach.roll</o>, one can assign a role for each marker, so that they can represent elements such as
				time signatures, tempi, barline, measure divisions. Time signature markers and tempi markers
				also require a "content", i.e. an llll specifying the time signature or the tempo.
				When adding a marker via the <m>addmarker</m> message, the role can be specified as third parameter,
				and the content as fourth parameter. Alternatively, roles and content can be set via the marker inspector.
				Roles can be: <br />
				<m>Time Signature</m>: set by the symbol "timesig", it represents a time signature, and expects the time signature llll as content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo timesig [4 4]</b>.<br />
				<m>Tempo</m>: set by the symbol "tempo", it represents a time signature, and expects the tempo llll as content (tempo figure and tempo
				value). For instance, a message to add such a marker could be <b>addmarker 0 foo tempo [1/8 50]</b>, meaning
				that the tempo is 1/8 = 50.<br />
				<m>Measure Barlines</m>: set by the symbol "barline", it represents a barline, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo barline</b>. <br />
				<m>Measure Division</m>: set by the symbol "division", it represents a measure division, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo division</b>. <br />
				<m>Measure Subdivision</m>: set by the symbol "subdivision", it represents a measure subdivision, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo subdivision</b>. <br />
				All these marker can be parsed by bach.quantize in order to automatically retrieve the measureinfo of the
				entire bach.roll.
				<br /> <br />
				For <o>bach.roll</o>, the gathered syntax for any note is, in its simplest form <b>[<m>pitch_cents</m> <m>duration</m> <m>velocity</m> <m>note_flag</m>]</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>duration</m> is measured in milliseconds, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining
				graphics, pitch breakpoints, slots, names.
				Each of these specifications is done in the form <b>[<m>specification_name</m> <m>SPECIFICATION CONTENT</m>]</b>, and must be put after the <m>velocity</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a note definition might have the form
				<b>[7300. 136. 127 [graphic 7400 -1/2] [slots [1 [0. 0. 0.] [0.294118 81.138889 0.] [0.294118 38.805556 0.] [1. 0. 0.]]] [name pippo] 0 ]</b>
				<br /> <br />
				Instead of MIDIcents (or cents), one can also instert pitches.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names are in anglo-saxon syntax ("C", "D", "E"...), and are case insentitive. Middle C is C5.
				They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>D#4</b>). <br />
				Accidentals are: <b>#</b> [sharp], <b>b</b> [flat], <b>x</b> [double sharp], <b>q</b> [quartertone sharp], <b>d</b> (quartertone flat),
				<b>^</b> [eighth-tone sharp], <b>v</b> (eighth-tone flat)
				One can also extend the accidental by setting a rational specification followed by a <b>t</b>. For instance <b>C5+1/16t</b> is
				middle C, 1/16 tone up.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>[name john george]</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>[name [high 1] [low 2]]</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				<br />				See also:<m>stop</m>,<m>pause</m>,<m>setcursor</m><br />
			</description>
		</method>
		<method name="poc">
			<arg name="pitch_or_cents" optional="0" type="number/pitch/llll/anything" />
			<digest>
				Modify the pitch or cents of selected items
			</digest>
			<description>
				Syntax: <b>poc <m>&lt;number/pitch/llll/anything: pitch_or_cents&gt;</m> </b><br />				<br />
				The word <m>poc</m> is an acronym for "pitch or cents", and will change either the pitch or the cents of the selected notes
				depending if the note has user-defined enharmonicities or not. If a note has user-defined enharmonicities, <m>poc</m> will
				essentially work like the <m>pitch</m> message; if not, it will work like the <m>cents</m> message (see both messages to know more). <br /> <br />
				All parameters, except for <o>bach.score</o>'s timepoints, also support a relative modification syntax, which modifies the existing values instead
				Relative modifications of a parameter are handled via lllls of the type <b>[<m>value</m> <m>function</m>]</b>, where
				the <m>function</m> is one of the following symbols: "plus", "minus", "times", "div". Such modification applies the corresponding
				function to the current value of the parameter and the inserted <m>value</m>. For instance, <b>[100 minus]</b> removes 100 to the current
				value of the parameter, while <b>[2. times]</b> multiplies it by two.
				<br /> <br />
				All separate parameters, except for measureinfo, ties and slots, can also be modified via a generic equation. In order to do so,
				the message symbol must be followed by an <m>=</m> sign (with spaces before and after it), and then by the desired equation.
				The standard symbolic variables are available. <br />
				Symbolic variables are variables that can be used in the conditional selection or parameter modification processes.
				These are: <m>onset</m> (in ms), <m>duration</m> (in ms), <m>velocity</m>, <m>cents</m> (pitch in MIDIcents),
				<m>pitch</m> (diatonic pitch), <m>poc</m> (pitch or cents, depending on what was defined by the user),
				<m>tail</m> (position of the note end, in ms), <m>voice</m> (voice number), <m>part</m> (part number),
				<m>voiceensemble</m> (voiceensemble number).
				For <o>bach.score</o> you can also use: <m>symduration</m> (symbolic rational duration),
				<m>symonset</m> (symbolic rational onset inside the measure), <m>symtail</m> (sum of the two previous), <m>measure</m> (the measure number),
				<m>tie</m> (which is 1 if a tie starts, 2 if a tie ends and 3 if a tie both starts and ends, 0 otherwise) and <m>grace</m> (1 for
				grace chords, 0 otherwise). <br />
				You can also use the variables <m>numnotes</m>, <m>numchords</m> and <m>nummeasures</m> to determine the number of notes/chords/measures
				that a otation item has (e.g. the number of chords in a measure, or the number of notes in a chord). <br />
				In addition, you also have the <m>index</m> symbol, corresponding to the index of the item: the index of the note in the chord (bottom-up),
				the index of the chord in the measure or voice (left to right), the index of the measures, voices, markers, pitch breakpoints, etc.
				(all left to right). In case you need to distinguish between chord index and note index, for a given note, you can explicitly use the
				<m>chordindex</m> or <m>noteindex</m> symbols. <br />
				For instance, one could define <b>velocity = duration / 100. + onset * 0.01</b> or <b>cents = cents + 200</b>, or
				<b>onset = [cents - 6000] / 100 + 2000 * [voice - 1]</b>.
				The equation syntax extends in a sense the relative modification syntax; however it is applied to the globality of the selection, and
				one cannot apply different equations to different notes inside the chord.
				<br /> <br />
			</description>
		</method>
		<method name="poly">
			<arg name="maxnumvoices" optional="0" type="int" />
			<digest>
				Force maximum polyphony and/or assign voicing numbers for selection
			</digest>
			<description>
				Syntax: <b>poly <m>&lt;int: maxnumvoices&gt;</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>poly 1</b>   <i>→ make selection monophonic...</i><br />
				• <b>poly 1 @resume 1</b>   <i>→ ...and resume notes if needed</i><br />
				• <b>poly 0 @voicingslot 5</b>   <i>→ detect and write voice index in slot 5</i><br />
				• <b>poly 0 @reassign 1</b>   <i>→ reassign selection to independent monophonic voices</i><br />
				• <b>poly 1 @droppriority oldest</b>   <i>→ make selection monophonic, dropping oldest notes first</i><br />
				• <b>poly 4</b>   <i>→ make selection playable with at most 4 monophonic instruments</i><br />
				<br />
				Message attributes:<br />
				<m>@droppriority</m> (symbol, default: closest): Handle which notes should be terminated<br />
				<m>@voicingslot</m> (int, default: 0): Slot number where voice index will be stored<br />
				<m>@reassign</m> (int, default: 0): Reassign notes in detected voices<br />
				<m>@voicingslot</m> (int, default: 0): Slot number where voice index will be stored<br />
				<m>@notify</m> (int, default: 1): Notify maximum number of used voices through the playout<br />
				<m>@resume</m> (int, default: 0): Resume terminated notes if possible<br />
				<m>@resumepriority</m> (symbol, default: closest): Handle which notes should be resumed<br />
				<m>@resumevoicing</m> (int, default: 1): Only resume notes with their original voicing<br />
				<br />
				The <m>poly</m> message followed by a number <m>N</m> forces the selected material to be playable with at most <m>N</m> independent
				monophonic voices.
				Importantly, this currently only works if the selected material is on a single voice.
				For instance <m>poly 1</m> will force the selection to be monophonic, <m>poly 2</m> will force it to be playable with
				two voices, and so on. Use <m>N</m> = 0 in order to avoid forcing a maximum number of voices - and, possibly, instead using the other following features
				of the <m>poly</m> message. <br />
				During the process, each note is assigned its own voice index.
				If the <m>voicingslot</m> message attribute is set to 1, such index is also put inside such slot;
				if the <m>reassign</m> message attribute is set to 1, each voice is
				repositioned in the voice corresponding to its index. Hence, for instance, use <m>poly 0 @reassign 1</m> to reassign the selection to
				a certain number of (automatically created) independent monophonic voices.  <br />
				Unless the <m>notify</m> message attribute is unset, the maximum number of used voices (always less or equal to <m>N</m>, unless <m>N</m> is 0)
				is output through the playout preceded by the "maxpoly" symbol. <br />
				The <m>droppriority</m> message attribute decides which notes should be terminated whenever the maximum number of voices is reached;
				it can be one of the following symbols: "oldest" (drop oldest first), "newest" (drop newest first),
				"closest" (drop closest notes in pitch first, default), "loudest" (drop loudest first), "quietest" (drop quietest first), "longest" (drop longest first)
				"shortest" (drop shortest first). <br />
				If the <m>resume</m> message attribute is set to 1, notes can be resumed if they have been terminated. In this case, the <m>resumepriority</m>
				message sets the priority for resuming, as one of the same symbols: "oldest" (resume oldest), "newest" (resume newest first),
				"closest" (resume closest notes in pitch first, default). Unless the <m>resumevoicing</m> message attribute is explicitly set to 0,
				resuming can only happen for notes on the voicing they initially had (i.e. with the same voice index).
				<br />				See also:<m>legato</m><br />
			</description>
		</method>
		<method name="prependslotitem">
			<arg name="slot_number_or_name" optional="0" type="int/symbol" />
			<arg name="slot_element" optional="0" type="llll" />
			<digest>
				Prepend a slot element at the beginning of a slot
			</digest>
			<description>
				Syntax: <b>prependslotitem <m>&lt;int/symbol: slot_number_or_name&gt;</m> <m>&lt;llll: slot_element&gt;</m> <i>[message attributes]</i> </b><br />				<br />
				Message attributes:<br />
				<m>@modify</m> (int, default: 0): If there is a point at the introduced X coordinate, modify it instead of adding a new one<br />
				<m>@thresh</m> (float, default: 0.): X coordinate threshold for the <m>modify</m> attribute<br />
				<br />
				A <m>prependslotitem</m> message will prepend a specific element at the beginning of a slot.
				The message works similarly to <m>changeslotitem</m> (see this latter to have more information).
				<br />				See also:<m>appendslotitem</m>,<m>changeslotitem</m>,<m>insertslotitem</m>,<m>deleteslotitem</m>,<m>setslot</m>,<m>eraseslot</m><br />
			</description>
		</method>
		<method name="quantize">
			<arg name="selective_quantize_options" optional="1" type="list" />
			<digest>
				Send quantization data
			</digest>
			<description>
				Syntax: <b>quantize <m>[&lt;list: selective_quantize_options&gt;]</m> </b><br />
				Examples:<br />
				• <b>quantize @content quantize whole content</b><br />
				• <b>quantize body @content quantize but keep no header elements</b><br />
				• <b>quantize body keys markers @content as previously, but also keep keys and markers</b><br />
				<br />
				The <m>quantize</m> message outputs all the content of <o>bach.roll</o> from the first outlet,
				in a form which is understandable by <o>bach.quantize</o>.
				You should just connect the first outlet of <o>bach.roll</o> to the second inlet of <o>bach.quantize</o>, to have this latter
				properly get all the information (refer to the <o>bach.quantize</o> help and documentation; also see #quantize in the help center). <br />
				By default, the <m>quantize</m> message also outputs all the header information, but as for the <m>dump</m> message,
				if one needs to only dump specific header elements, the <m>quantize</m> message may also accept a list of symbols referring to them.
				Namely, the possibilities are the following ones: "keys", "clefs", "voicenames", "midichannels", "markers", "slotinfo", "command", "groups".
				Also the "body" symbol should always be added, in order to also dump the music content (otherwise no real quantization can be performed).
				For instance, <b>quantize keys slotinfo body</b> will dump the key signatures, the slotinfo and will send the quantization data of the
				music content.
			</description>
		</method>
		<method name="read">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Open file
			</digest>
			<description>
				Syntax: <b>read <m>[&lt;symbol: filename&gt;]</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>read</b>   <i>→ open file via dialog box</i><br />
				• <b>read rollexample.txt</b>   <i>→ open specific bach text file</i><br />
				• <b>read goldberg3.mid @markmeasures 1</b>   <i>→ open MIDI file and convert barlines to markers</i><br />
				• <b>read goldberg3.mid @markmeasures 1 @markdivisions 1</b>   <i>→ also convert beats to markers</i><br />
				<br />
				Message attributes:<br />
				<m>@tracks2voices</m> (int, default: 1): For MIDI files, if non-zero, each MIDI track will be converted into a separate voice (default: )<br />
				<m>@chans2voices</m> (int, default: 0): For MIDI files, if non-zero, each MIDI channel will be converted into a separate voice<br />
				<m>@markmeasures</m> (int, default: 1): For MIDI files, if non-zero, adds barline markers. Ignored if <m>importbarlines</m> is on and barline markers are actually imported.<br />
				<m>@markdivisions</m> (int, default: 0): For MIDI files, if non-zero, adds divisions markers. Ignored if <m>importdivisions</m> is on and division markers are actually imported.<br />
				<m>@importbarlines</m> (int, default: 1): For MIDI files, if non-zero, MIDI markers named "bach barline" are imported as barline markers<br />
				<m>@importdivisions</m> (int, default: 1): For MIDI files, if non-zero, MIDI markers named "bach division" are imported as division markers<br />
				<br />
				The <m>read</m> message will open any file that <o>bach.roll</o> is able to read.
				The file name (as symbol) can be given as optional first argument. If no such symbol is given, a dialog box will pop up
				allowing the choice of the file to open.
				Supported file types are: <br />
				- Previously saved <o>bach.roll</o> content, either in native or in text format (see <m>write</m> and <m>writetxt</m> messages).
				These might include also files exported in bach format from OpenMusic or PWGL.<br />
				- MIDI files. In this case, some message attributes are available to tailor importing. Available attributes are: <br />
				* <b>tracks2voices</b>: if non-0, each track in the MIDI
				file will be converted into a separate voice. <br />
				* <b>chans2voices</b>: if non-0, each channel in
				the MIDI file will be converted into a separate voice. <br />
				* <b>markmeasures</b> and <b>markdivisions</b>: if non-0, a special "barline" or "division" marker will be added for each measure/division
				in the MIDI file, according to the current time signature (this is especially recommended if you need to later quantize the <o>bach.roll</o> content) <br />
				* <b>importbarlines</b> (default: 1): all the MIDI markers named "bach barline" are imported as barline markers.
				* <b>importdivisions</b> (default: 1): all the MIDI markers named "bach division" are imported as division markers.
				* <b>importsubdivisions</b> (default: 1): all the MIDI markers named "bach subdivision" are imported as subdivision markers.
				If importbarlines and markmeasures are on at the same time, and barline markers are present, markmeasures is ignored. <br />
				If importdivision and markdivisions are on at the same time, and division markers are present, markdivisions is ignored. <br />
				<br />				See also:<m>write</m>,<m>writetxt</m><br />
			</description>
		</method>
		<method name="realtime">
			<arg name="realtime_mode" optional="0" type="int" />
			<digest>
				Toggle real-time mode
			</digest>
			<description>
				Syntax: <b>realtime <m>&lt;int: realtime_mode&gt;</m> </b><br />
				Examples:<br />
				• <b>realtime 1</b>   <i>→ turn real-time mode on</i><br />
				• <b>realtime 0</b>   <i>→ turn real-time mode off</i><br />
				<br />
				The <m>realtime 1</m> message will toggle the real-time mode, i.e. will change some attribute values in order to
				disable the play highlight, the undo system and the legend. This will increase the object performance for real-time tasks.
				A subsequent <m>realtime 0</m> message will disable real-time mode, reverting the value of all attribute to the previous ones.
			</description>
		</method>
		<method name="redo">
			<arglist />
			<digest>
				Perform a redo step
			</digest>
			<description>
				A <m>redo</m> message will perform a redo step.
				<br />				See also:<m>undo</m>,<m>inhibitundo</m>,<m>droplastundo</m><br />
			</description>
		</method>
		<method name="refresh">
			<arglist />
			<digest>
				Force recomputation and redraw
			</digest>
			<description>
				The <m>refresh</m> message forces the recomputation of all the features and forces the object box to be redrawn.
			</description>
		</method>
		<method name="remove">
			<arglist />
			<digest>
				Remove element
			</digest>
			<description>
				Generic changes in a score can be obtained via the syntax <br />
				<b>insert/remove/change <m>element_type</m> <m>element_path</m> <m>property_name</m> <m>content_as_llll</m></b> <br />
				If the initial symbol is "remove", the last two fields are irrelevant; if the initial symbol is "
				Properties are the ones displayed in the bach inspector for the specific element, plus the symbol "state", which
				sets the whole state of the element from a gathered syntax llll. <br />
			</description>
		</method>
		<method name="resetslotinfo">
			<arglist />
			<digest>
				Reset the custom articulations definition to the default one
			</digest>
			<description>
				A <m>resetarticulationinfo</m> message will reset the all the <m>articulationinfo</m> to the original one, i.e. will delete
				all the user-defined articulations.
			</description>
		</method>
		<method name="resetslotinfo">
			<arglist />
			<digest>
				Reset the custom notehead definition to the default one
			</digest>
			<description>
				A <m>resetnoteheadinfo</m> message will reset the all the <m>noteheadinfo</m> to the original one, i.e. will delete
				all the user-defined noteheads.
			</description>
		</method>
		<method name="resetslotinfo">
			<arglist />
			<digest>
				Reset the commands to the default one
			</digest>
			<description>
				A <m>resetcommands</m> message will reset the all the <m>comnands</m> to the original ones
			</description>
		</method>
		<method name="resetslotinfo">
			<arglist />
			<digest>
				Reset the slotinfo to the default one
			</digest>
			<description>
				A <m>resetslotinfo</m> message will reset the all the <m>slotinfo</m> to the original one.
				Beware that this may entail slot type conversions, which might result in loss of data if slot types are not compatible.
				The slotinfo is the information about the types, ranges and many further characteristics of each one of the slots.
				For bach.roll and bach.score, it is a global information: changing the slotinfo for a given slot will
				affect such slot for all the notes inside the notation object. See the <m>llll</m> method to know more about its syntax.
				<br />				See also:<m>eraseslot</m><br />
			</description>
		</method>
		<method name="respell">
			<arglist />
			<digest>
				Respell selected notes automatically
			</digest>
			<description>
				Examples:<br />
				• <b>respell</b>   <i>→ respell according to key and/or enharmonic tables</i><br />
				• <b>respell @algorithm atonal</b>   <i>→ respell via the atonal algorithm</i><br />
				• <b>respell @algorithm atonal @flattest Gb @sharpest A#</b>   <i>→ the same, but avoid E#, B#, Cb, Fb</i><br />
				• <b>respell @algorithm atonal @flattest Fbb @sharpest Bx</b>   <i>→ the same, also allowing double sharps and double flats</i><br />
				• <b>respell @algorithm chewandchen</b>   <i>→ respell via the Chew and Chen algorithm</i><br />
				<br />
				Message attributes:<br />
				<m>@selection</m> (int, default: 0): If non-zero, only operates on selection<br />
				<m>@algorithm</m> (symbol, default: default): Select the algorithm: "default", "chewandchen" or "atonal"<br />
				<m>@voicewise</m> (int, default: 1): If non-zero, operate on one voice at a time<br />
				<m>@sharpest</m> (symbol/pitch, default: B#): Sets the "sharpest" note available (the farthest right on the line of fifths)<br />
				<m>@flattest</m> (symbol/pitch, default: Fb): Sets the "flattest" note available (the farthest left on the line of fifths)<br />
				<m>@verbose</m> (int, default: 0): Toggle verbose mode for debug<br />
				<m>@winsize</m> (double, default: 500): For Chew and Chen algorithm, sets the window size in milliseconds<br />
				<m>@spiralr</m> (double, default: 1.4142): For Chew and Chen algorithm, sets the pitch spiral radius<br />
				<m>@spiralh</m> (double, default: 3.8729): For Chew and Chen algorithm, sets the pitch spiral vertical step<br />
				<m>@numsliding</m> (int, default: 8): For Chew and Chen algorithm, sets the number of sliding windows<br />
				<m>@numselfreferential</m> (int, default: 2): For Chew and Chen algorithm, sets the number of selfreferential windows<br />
				<m>@discardalteredrepetitions</m> (int, default: 1): For Atonal algorithm, try to avoid repetitions of the same diatonic step with different alterations<br />
				<m>@stdevthresh</m> (llll/symbol, default: 21/(numnotes+1)): For Atonal algorithm, sets the equation for the threshold of the standard deviation of positions on the line of fifth<br />
				<m>@ignorelocked</m> (int, default: 1): If non-zero, locked notes are left unchanged (default)<br />
				<br />
				The <m>respell</m> message reset the enharmonicity ("graphics") specification of each selected note to a default one.
				Three algorithms are available, which can be set using the "algorithm" message attribute: a default algorithm,
				the algorithm provided by Chew and Chen, and an algorithm targeting atonal diatonic behaviors. The three algorithms
				are described below. For the two non-trivial algorithms some additional attributes may fine tune respelling properties: <br />
				• "selection" (int, default 0): toggles the ability to operate on selection only (also works for default algorithm); <br />
				• "voicewise" (int, default 1): toggles the ability to respell one voice at a time; <br />
				• "sharpest" (symbol/pitch, default: B#): sets the "sharpest" note available (the farthest right on the line of fifths); <br />
				• "flattest" (symbol/pitch, default: Fb): sets the "flattest" note available (the farthest left on the line of fifths); <br />
				• "verbose" (int, default: 0): toggle a verbose mode (mostly for debug). <br />
				The algorithms characteristics are the following ones:
				- Default algorithm ("default"): just respell the notes according to the current key and enharmonicity tables. <br />
				- Chew and Chen algorithm ("chewandchen"): implements the algorithm provided by Chew and Chen in the article
				"Determining Context-Defining Windows: Pitch Spelling using the Spiral Array". Additional parameters, defined via message attributes,
				are: <br />
				• "winsize" (double, default: 500): window size in milliseconds; <br />
				• "spiralr" (double, default: sqrt(2)): spiral radius; <br />
				• "spiralh" (double, default: sqrt(15)): spiral vertical step (i.e. the distance parallel to the axis of the helix corresponding
				to one step along the spiral array; <br />
				• "numsliding" (int, default: 8): number of sliding windows; <br />
				• "numselfreferential" (int, default: 2): number of self referential windows (see article); <br />
				• "locality" (double, default: 0.5): a value of 1 only takes self-referential window into account, a value of 0 only takes global context
				into account; any number in between will result in a linear combination of the two (this is the parameter <m>f</m> of the Chew and Chen article); <br />
				- Atonal algorithm ("atonal"): respell the notes in a tree-like fashion (closest ones first), optimizing their position on the line of fifths. <br />
				• "discardalteredrepetitions" (int, default: 1): discard solutions having subsequent repetitions of the same diatonic
				step with different alterations (e.g. F#4 F4, or Bb5 B5); <br />
				• "stdevthresh" (llll/symbol, default: 21/(numnotes+1)): sets a formula for a maximum standard deviation that the group of notes
				being retranscribed must have (interpreted as their projection onto the line of fifths); <br />
				<br />				See also:<m>snappitchtogrid</m><br />
			</description>
		</method>
		<method name="rippledelete">
			<arglist />
			<digest>
				Ripple-delete current selected items
			</digest>
			<description>
				Examples:<br />
				• <b>rippledelete</b>   <i>→ ripple-delete current selection</i><br />
				• <b>rippledelete @transferslots 20 21</b>   <i>→ ripple-delete current selection, and transfer content of slot 20 and 21 to another chord note, if possible</i><br />
				• <b>rippledelete @transferslots all</b>   <i>→ ripple-delete current selection, and transfer all slots</i><br />
				• <b>rippledelete @transferslots all @empty 1</b>   <i>→ ripple-delete current selection, and transfer all slots, even the empty ones</i><br />
				<br />
				Message attributes:<br />
				<m>@transferslots</m> (llll, default: null): If non-null, when deleting notes from a chord, these slots will be transfered to another chord note whenever possible<br />
				<m>@empty</m> (int, default: 0): Also transfer empty slots<br />
				<br />
				The message <m>rippledelete</m> deletes all the currently selected items, and shifts all the following one
				backwards in order to fill the gap. <br />
				When deleting notes from a chord, use the "@transferslots" specification to define a set of slots to be transfered to a neighbour note in the same chord,
				whenever possible. Use also "all" to transfer all slots, and "auto" to transfer a standard set of slots (dynamics, lyrics, articulations, annotations);
				use "dynamics", "lyrics", "noteheads", "articulations", "annotation" instead of slot numbers.
				Use the additional "@empty" message argument in order to tell with a 0/1 integer whether empty slots should also be transfered (by default: 0 = false).
				<br />				See also:<m>rippledelete</m>,<m>eraseslot</m><br />
			</description>
		</method>
		<method name="role">
			<arg name="role" optional="0" type="symbol" />
			<arg name="content" optional="1" type="llll" />
			<digest>
				Assign role to selected markers
			</digest>
			<description>
				Syntax: <b>role <m>&lt;symbol: role&gt;</m> <m>[&lt;llll: content&gt;]</m> </b><br />
				Examples:<br />
				• <b>role barline</b>   <i>→ assign 'barline' role to selected markers</i><br />
				• <b>role timesig [3 4]</b>   <i>→ assign a 3/4 'time signature' role</i><br />
				• <b>role none</b>   <i>→ reset roles to none</i><br />
				<br />
				Changes or assigns a role to all selected markers. The role has to be specified by the argument, and should be a symbol
				among the following ones: "none", "tempo", "timesig" "barline", "division", "subdivision". If the role also requires a value or content
				(which might be the case for
				tempi and time signatures), this latter can be specified via a further argument as a wrapped llll.
				<br />				See also:<m>name</m>,<m>sel</m>,<m>unsel</m>,<m>select</m><br />
			</description>
		</method>
		<method name="sample">
			<arg name="num_samples" optional="0" type="number" />
			<arg name="ms" optional="1" type="symbol" />
			<digest>
				Sample score data
			</digest>
			<description>
				Syntax: <b>sample <m>&lt;number: num_samples&gt;</m> <m>[&lt;symbol: ms&gt;]</m> </b><br />
				Examples:<br />
				• <b>sample 10</b>   <i>→ sample score in 10 equally spaced points</i><br />
				• <b>sample 1000 ms</b>   <i>→ sample score each second</i><br />
				<br />
				The <m>sample</m> message, followed by a integer (the number of sampling points),
				samples the note data (exactly as <m>interp</m> does) throughout the score, at the (uniformly taken) sampling point.
				The answer is sent through the playout in the following form: <b>sample [<m>t1</m> <m>t2</m>...] [<m>RES1</m> <m>RES2</m>...]...</b>
				where each <m>t</m> is an instant in milliseconds, and each <m>RES</m> is the result of the <m>interp</m> message performed
				on such instant (see <m>interp</m> to know more). <br />
				If the <b>ms</b> symbol is given as second argument, the first numeric argument (which can also be non-integer, in
				this case) is considered to be the distance between samples (in milliseconds), and not the number of samples.
				<br />				See also:<m>interp</m>,<m>getcurrentchord</m><br />
			</description>
		</method>
		<method name="scroll">
			<arg name="amount" optional="0" type="float" />
			<digest>
				Scroll the object horizontally or vertically
			</digest>
			<description>
				Syntax: <b>scroll <m>&lt;float: amount&gt;</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>scroll vertical 10</b>   <i>→ scroll 10 pixels vertically</i><br />
				• <b>scroll vertical 0.5 @unit relative</b>   <i>→ scroll vertically in the center</i><br />
				• <b>scroll horizontal 0.5 @unit relative</b>   <i>→ the same, horizontally</i><br />
				<br />
				Message attributes:<br />
				<m>@direction</m> (symbol, default: horizontal): Scrolling direction<br />
				<m>@unit</m> (symbol, default: pixel): Amount unit ("pixel", "normalizedpixel" or "relative")<br />
				<m>@delta</m> (int, default: 0): Scroll amount is relative<br />
				<br />
				The message <m>scroll</m> moves the portion of displayed object either horizontally or vertically,
				in a similar way of moving horizontal or vertical scrollbars.
				<br />				See also:<m>inscreenpos</m>,<m>inscreen</m><br />
			</description>
		</method>
		<method name="sel">
			<arg name="arguments" optional="0" type="llll" />
			<digest>
				Select items
			</digest>
			<description>
				Syntax: <b>sel <m>&lt;llll: arguments&gt;</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>sel all</b>   <i>→ select everything</i><br />
				• <b>sel chords</b>   <i>→ select all chords</i><br />
				• <b>sel markers</b>   <i>→ select all markers</i><br />
				• <b>sel markers @role none</b>   <i>→ select all markers that have no role</i><br />
				• <b>sel markers @role barline</b>   <i>→ select all markers with barline role</i><br />
				• <b>sel breakpoints</b>   <i>→ select all breakpoints</i><br />
				• <b>sel tails</b>   <i>→ select all tails</i><br />
				• <b>sel chord 3</b>   <i>→ select 3rd chord (of 1st voice)</i><br />
				• <b>sel chord 2 4</b>   <i>→ select 4th chord of 2nd voice</i><br />
				• <b>sel chord -1 -1</b>   <i>→ select last chord of last voice</i><br />
				• <b>sel note 3 4 -1</b>   <i>→ select last note of 4th chord of 3rd voice</i><br />
				• <b>sel marker 5</b>   <i>→ select 5th marker</i><br />
				• <b>sel marker -2</b>   <i>→ select one-but-last marker</i><br />
				• <b>sel marker [1] [-2] [5]</b>   <i>→ select multiple markers</i><br />
				• <b>sel voice 2</b>   <i>→ select 2nd voice</i><br />
				• <b>sel note if voice == 2</b>   <i>→ select notes in 2nd voice</i><br />
				• <b>sel chord if "random(0,100)&lt;50"</b>   <i>→ randomly select half of the chords</i><br />
				• <b>sel chords [1 3] [2 2] [-2 5]</b>   <i>→ select multiple chord</i><br />
				• <b>sel notes [1 3 2] [1 3 3] [2 4 5]</b>   <i>→ select multiple notes</i><br />
				• <b>sel John</b>   <i>→ select all items named 'John'</i><br />
				• <b>sel John Lennon</b>   <i>→ select all items named both 'John' and 'Lennon'</i><br />
				• <b>sel 1000 3000 6000 7200</b>   <i>→ select notes between 1s and 3s, and between 6000 and 7200cents</i><br />
				• <b>sel 1000 3000 6000 7200 2</b>   <i>→ same, for second voice only</i><br />
				• <b>sel 1000 3000 6000 7200 [1 3 4]</b>   <i>→ same, for voices 1, 3 and 4</i><br />
				• <b>sel 1000 3000 [] []</b>   <i>→ select notes between 1s and 3s</i><br />
				• <b>sel [] [] 4800 6000</b>   <i>→ select notes below middle C</i><br />
				• <b>sel [] [] [] [] -1</b>   <i>→ select every note in last voice</i><br />
				• <b>sel note if cents == 6000</b>   <i>→ select all middle C's</i><br />
				• <b>sel note if [cents % 1200] == 0</b>   <i>→ select all C's</i><br />
				• <b>sel note if [cents &lt; 6000] &amp;&amp; [duration &lt; 1000]</b>   <i>→ select all notes &lt;1s below middle C</i><br />
				• <b>sel marker if onset &gt; 5000</b>   <i>→ select all markers with onset &gt;5s</i><br />
				• <b>sel breakpoint if [cents &gt; 7200] &amp;&amp; [velocity &gt; 100]</b>   <i>→ select all pitch breakpoints &gt;7200cents with velocity &gt; 100</i><br />
				• <b>sel tail if cents &gt; 6000</b>   <i>→ select all tails above middle C</i><br />
				<br />
				Message attributes:<br />
				<m>@role</m> (symbol, default: all): Role for markers to be selected<br />
				<br />
				The word <m>sel</m> add some notation items to the current selection. In the basic behavior,
				the word must be followed by four elements, specifying: <br />
				- the starting temporal point of the selection, in milliseconds (leave <b>nil</b> or <b>[]</b> if you want to select from the beginning); <br />
				- the ending temporal point of the selection, in milliseconds (leave <b>nil</b> or <b>[]</b> if you want to select until the end); <br />
				- the minimum pitch of the selection, in cents (leave <b>nil</b> or <b>[]</b> if you don't want to put a lower bound on pitches); <br />
				- the maximum pitch of the selection, in cents (leave <b>nil</b> or <b>[]</b> if you don't want to put an upper bound on pitches). <br />
				Other selection modes are possible: <br />
				- If the word <m>sel</m> is followed by the symbol <b>all</b>, all notes, chords and markers are selected. <br />
				- If the word <m>sel</m> is followed by a category plural symbol, all the corresponding elements are selected.
				Category plural symbols are: <b>markers</b>, <b>notes</b>, <b>chords</b>, <b>breakpoints</b>, <b>tails</b>, <b>voices</b>.
				In case of markers, an additional "role" message attribute specify a specific role for markers to be selected (defaulting to "all", i.e.
				all marker will be selected, regardless of their role). <br />
				- If the word <m>sel</m> is followed by the symbol <b>voice</b> followed by one or more integers, the corresponding voices are selected
				(negative numbers count from the last voice). <br />
				- If the word <m>sel</m> is followed by the symbol <b>chord</b> followed by one or two integers (representing an address), a certain chord is selected.
				The full syntax for the integers is: <m>voice_number</m> <m>chord_index</m>. If just an element is given, the voice number is considered
				to be by default 1. The chord index is the index of chords, sorted by onset.
				For instance, <b>sel chord 2</b> selects the second chord [of first voice], while <b>sel chord 3 2</b> does the same with the third voice.
				Negative positions are also allowed, counting backwards. Multiple chords can be selected at once, provided that instead of a list integers one gives
				a sequence of wrapped lists of integers, for instance <b>sel chord [1 1] [1 2] [1 3] [2 1] [3 -1]</b>.<br />
				- If the word <m>sel</m> is followed by the symbol <b>note</b> followed by one, two or three integers (representing an address), a certain note is selected.
				The full syntax for the integers is: <m>voice_number</m> <m>chord_index</m> <m>note_index</m>. If less elements are given, the first ones are considered
				to be by default 1's. The chord index is the index of chords, sorted by onset; the note index is taken from the lowest to the highest.
				For instance, <b>sel note 2 3</b> selects the third note of second chord [of first voice], while <b>sel note 4 2 3</b> does the same with the fourth voice.
				Negative positions are also allowed, counting backwards. Multiple notes can be selected at once, provided that instead of a list integers one gives
				a sequence of wrapped lists of integers, for instance <b>sel note [5 2 4] [1 1 -1]</b>.<br />
				- If the word <m>sel</m> is followed by the symbol <b>region</b> and then a name or list of names, the marker corresponding to the
				input names is expected to be a region marker, and all the elements inside the region are selected.<br />
				- If the word <m>sel</m> is followed by the symbols <b>note if</b>, <b>chord if</b>, <b>voice if</b>, <b>measure if</b>,
				<b>marker if</b>, <b>breakpoint if</b> or <b>tail if</b> followed by a
				condition to be verified, a conditional selection on notes,  markers or pitch breakpoints (respectively) is performed.
				and notes/markers/pitch breakpoints matching such condition are selected.
				The condition must be an expr-like expression returning 1 if notes have to be selected, 0 otherwise.
				You can use symbolic variables inside such expressions. <br />
				Symbolic variables are variables that can be used in the conditional selection or parameter modification processes.
				These are: <m>onset</m> (in ms), <m>duration</m> (in ms), <m>velocity</m>, <m>cents</m> (pitch in MIDIcents),
				<m>pitch</m> (diatonic pitch), <m>poc</m> (pitch or cents, depending on what was defined by the user),
				<m>tail</m> (position of the note end, in ms), <m>voice</m> (voice number), <m>part</m> (part number),
				<m>voiceensemble</m> (voiceensemble number).
				For <o>bach.score</o> you can also use: <m>symduration</m> (symbolic rational duration),
				<m>symonset</m> (symbolic rational onset inside the measure), <m>symtail</m> (sum of the two previous), <m>measure</m> (the measure number),
				<m>tie</m> (which is 1 if a tie starts, 2 if a tie ends and 3 if a tie both starts and ends, 0 otherwise) and <m>grace</m> (1 for
				grace chords, 0 otherwise). <br />
				You can also use the variables <m>numnotes</m>, <m>numchords</m> and <m>nummeasures</m> to determine the number of notes/chords/measures
				that a otation item has (e.g. the number of chords in a measure, or the number of notes in a chord). <br />
				In addition, you also have the <m>index</m> symbol, corresponding to the index of the item: the index of the note in the chord (bottom-up),
				the index of the chord in the measure or voice (left to right), the index of the measures, voices, markers, pitch breakpoints, etc.
				(all left to right). In case you need to distinguish between chord index and note index, for a given note, you can explicitly use the
				<m>chordindex</m> or <m>noteindex</m> symbols. <br />
				For instance <b>sel note if velocity == 100</b> selects all notes whose
				velocity is exactly equal to 100, while <b>round[cents / 100.] % 12 == 0</b> select all the C's.<br />
				- If the word <m>sel</m> is followed by any other symbol or sequence of symbols, these are interpreted as names, and the notation items
				matching all these names (or a single name, if just one symbol is entered) are selected. <br />
				<br />				See also:<m>unsel</m>,<m>select</m>,<m>subsel</m>,<m>clearselection</m><br />
			</description>
		</method>
		<method name="select">
			<arg name="arguments" optional="0" type="llll" />
			<digest>
				Involutively select items
			</digest>
			<description>
				Syntax: <b>select <m>&lt;llll: arguments&gt;</m> </b><br />				<br />
				The message <m>select</m> works as <m>sel</m> but in an involutive manner: i.e. it selects non-selected items
				and deselect already selected items. This is essentially what happens when you draw a
				selection rectangle on the notation object, and then draw another overlapping one keeping the Shift key pressed.
				Refer to the message <m>sel</m> to know more about the syntax, since it is exactly the same.
				The only exception is for the <m>select all</m> message, which does not work involutively and always select all the notation items.
				<br />				See also:<m>sel</m>,<m>unsel</m>,<m>subsel</m>,<m>clearselection</m><br />
			</description>
		</method>
		<method name="sendcommand">
			<arg name="command_number" optional="0" type="int" />
			<digest>
				Send a command to selected items
			</digest>
			<description>
				Syntax: <b>sendcommand <m>&lt;int: command_number&gt;</m> </b><br />
				Example: <b>sendcommand 3</b>   <i>→ send 3rd command</i><br />
				<br />
				The <m>sendcommand</m> message sends a given command to the selected notation items,
				whose content is then immediately output from the playout in playout syntax (see <m>dumpselection</m>)
				but with a router different from the standard playout syntax router, i.e. the router defined by the given command.
				It expects as argument the number of the command to be sent (1 to 5).
				You can safely rely on the fact that elements will be output ordered by onset.
				Commands are a mechanism to output selected content with given labels.
				You can define up to 5 user commands which will send user-defined messages upon a note or chord evaluation.
				The idea is that you can map each command to a hotkey: if one triggers the hot key (when something is selected),
				this will cause the output of the notes/chord content from the playouts, exactly as if such notes/chords were played.
				The only difference with the simple play situation, is that the router of those messages is not the "note" or "chord" symbol,
				but rather the custom symbol defined at the command declaration. This allows you to properly detect and route the message.
				<br /> <br />
				For <o>bach.roll</o>, the playout syntax is used whenever the information about a note or chord is sent through the playout (either at playtime
				or at offline play, or selection dump).
				The playout syntax is a slight variation of the standard chord gathered syntax. Two different cases apply, according to the <m>playmode</m>
				attribute value. If the <m>playmode</m> is set to Chordwise, the information about each chord is output in the form <br />
				<b>chord <m>voice_number</m> <m>MIDI_channel</m> [<m>onset</m> <m>NOTE1</m> <m>NOTE2</m> <m>NOTE3</m> <m>chord_flag</m>] </b> <br />
				where each <b><m>NOTE</m></b> is the gathered syntax of the note (see below).
				If the <m>playmode</m> is set to Notewise, information about each note is output as if the note were the only note in the chord, i.e. in the form <br />
				<b>note <m>voice_number</m> <m>MIDI_channel</m> [<m>onset</m> <m>NOTE</m> <m>chord_flag</m>] </b> <br />
				where <b><m>NOTE</m></b> is the note gathered syntax.
				The <m>MIDI_channels</m> is the one associated with the voice to which the note or chord belongs. The <m>onset</m> is in milliseconds,
				The <m>chord_flag</m> is a bitfield summing values of 1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				The playout syntax also concerns markers: they are output in the form: <b>marker <m>NAME_OR_NAMES</m> <m>onset_ms</m> <m>role</m> <m>optional:content</m></b>
				where the <m>NAME_OR_NAMES</m> is either a single atom (if the marker has a single name) or a wrapped plain llll containing the names, and the <m>optional:content</m>
				is only output if the marker role requires it.
				<br /> <br />
				In <o>bach.roll</o>, one can assign a role for each marker, so that they can represent elements such as
				time signatures, tempi, barline, measure divisions. Time signature markers and tempi markers
				also require a "content", i.e. an llll specifying the time signature or the tempo.
				When adding a marker via the <m>addmarker</m> message, the role can be specified as third parameter,
				and the content as fourth parameter. Alternatively, roles and content can be set via the marker inspector.
				Roles can be: <br />
				<m>Time Signature</m>: set by the symbol "timesig", it represents a time signature, and expects the time signature llll as content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo timesig [4 4]</b>.<br />
				<m>Tempo</m>: set by the symbol "tempo", it represents a time signature, and expects the tempo llll as content (tempo figure and tempo
				value). For instance, a message to add such a marker could be <b>addmarker 0 foo tempo [1/8 50]</b>, meaning
				that the tempo is 1/8 = 50.<br />
				<m>Measure Barlines</m>: set by the symbol "barline", it represents a barline, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo barline</b>. <br />
				<m>Measure Division</m>: set by the symbol "division", it represents a measure division, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo division</b>. <br />
				<m>Measure Subdivision</m>: set by the symbol "subdivision", it represents a measure subdivision, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo subdivision</b>. <br />
				All these marker can be parsed by bach.quantize in order to automatically retrieve the measureinfo of the
				entire bach.roll.
				<br /> <br />
				For <o>bach.roll</o>, the gathered syntax for any note is, in its simplest form <b>[<m>pitch_cents</m> <m>duration</m> <m>velocity</m> <m>note_flag</m>]</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>duration</m> is measured in milliseconds, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining
				graphics, pitch breakpoints, slots, names.
				Each of these specifications is done in the form <b>[<m>specification_name</m> <m>SPECIFICATION CONTENT</m>]</b>, and must be put after the <m>velocity</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a note definition might have the form
				<b>[7300. 136. 127 [graphic 7400 -1/2] [slots [1 [0. 0. 0.] [0.294118 81.138889 0.] [0.294118 38.805556 0.] [1. 0. 0.]]] [name pippo] 0 ]</b>
				<br /> <br />
				Instead of MIDIcents (or cents), one can also instert pitches.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names are in anglo-saxon syntax ("C", "D", "E"...), and are case insentitive. Middle C is C5.
				They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>D#4</b>). <br />
				Accidentals are: <b>#</b> [sharp], <b>b</b> [flat], <b>x</b> [double sharp], <b>q</b> [quartertone sharp], <b>d</b> (quartertone flat),
				<b>^</b> [eighth-tone sharp], <b>v</b> (eighth-tone flat)
				One can also extend the accidental by setting a rational specification followed by a <b>t</b>. For instance <b>C5+1/16t</b> is
				middle C, 1/16 tone up.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>[name john george]</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>[name [high 1] [low 2]]</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				<br />				See also:<m>dumpselection</m><br />
			</description>
		</method>
		<method name="setcursor">
			<arg name="position" optional="0" type="list" />
			<digest>
				Move the playhead cursor
			</digest>
			<description>
				Syntax: <b>setcursor <m>&lt;list: position&gt;</m> </b><br />
				Examples:<br />
				• <b>setcursor 2000</b>   <i>→ set the playhead at 2s</i><br />
				• <b>setcursor John</b>   <i>→ set the cursor at the onset of the first item named 'John'</i><br />
				• <b>setcursor John Lennon</b>   <i>→ set the cursor at the onset of the first item named 'John' and 'Lennon'</i><br />
				<br />
				The <m>setcursor</m> message moves the playhead cursor to a specific position, given as argument in milliseconds.
				This can be replaced by a symbol or a list of symbols containing the name(s) of a marker, whose position has to be the playhead cursor position.
				If more than one markers match the name(s), the cursor will be moved to the first one.
				<br />				See also:<m>getcursor</m>,<m>showcursor</m>,<m>hidecursor</m><br />
			</description>
		</method>
		<method name="setdl">
			<arg name="breakpoints" optional="0" type="llll" />
			<digest>
				Set the duration line for selected items
			</digest>
			<description>
				Syntax: <b>setdl <m>&lt;llll: breakpoints&gt;</m> </b><br />
				Example: <b>setdl [0 0 0] [0.5 200 0.2] [1 500 0]</b>   <i>→ sets duration line breakpoints to selection</i><br />
				<br />
				A <m>setedurationline</m> message will replace the duration line of all the selected notes with the introduced breakpoints
				The syntax is
				<b>setdurationline [<m>relative_x</m> <m>delta_mc</m> <m>slope</m>] [<m>relative_x</m> <m>delta_mc</m> <m>slope</m>]...</b>. <br />
				<br />				See also:<m>addbreakpoint</m>,<m>erasebreakpoints</m><br />
			</description>
		</method>
		<method name="setnotationcolors">
			<arg name="red" optional="0" type="float" />
			<arg name="green" optional="0" type="float" />
			<arg name="blue" optional="0" type="float" />
			<arg name="alpha" optional="0" type="float" />
			<digest>
				Change all notation colors at once
			</digest>
			<description>
				Syntax: <b>setnotationcolors <m>&lt;float: red&gt;</m> <m>&lt;float: green&gt;</m> <m>&lt;float: blue&gt;</m> <m>&lt;float: alpha&gt;</m> </b><br />
				Example: <b>setallnotationcolors 1. 0. 0. 1.</b>   <i>→ turn all notation red</i><br />
				<br />
				Set all the notation colors at once (accidentals, annotations, articulations, clefs, key signatures, lyrics,
				main and auxiliary staff, notes, stems, rests, tempi), in RGBA format.
			</description>
		</method>
		<method name="setslot">
			<arg name="slots" optional="0" type="llll" />
			<digest>
				Set the content of one or more slots for selected items
			</digest>
			<description>
				Syntax: <b>setslot <m>&lt;llll: slots&gt;</m> </b><br />
				Examples:<br />
				• <b>setslot [6 0.512]</b>   <i>→ fill (float) slot 6 with number 0.512</i><br />
				• <b>setslot [5 42]</b>   <i>→ fill (int) slot 5 with number 42</i><br />
				• <b>setslot [7 "Lorem Ipsum" ]</b>   <i>→ fill (text) slot 7 with some text</i><br />
				• <b>setslot [10 [John George [Ringo] [Brian]] ]</b>   <i>→ fill (llll) slot 10 with an llll</i><br />
				• <b>setslot [3 10 20 30]</b>   <i>→ fill (intlist) slot 3 of selected notes with list of values 10, 20, 30</i><br />
				• <b>setslot [2 [0 0 0] [0.5 0 1] [1 1 0.2]</b>   <i>→ fill (function) slot 2 with a breakpoint function in (x y slope) form</i><br />
				• <b>setslot [amplienv [0 0 0] [0.5 0 1] [1 1 0.2]]</b>   <i>→ the same for slot named 'amplienv'</i><br />
				• <b>setslot [active [0 0 0] [0.5 0 1] [1 1 0.2]]</b>   <i>→ the same for currently open slot</i><br />
				• <b>setslot [3 10 20 30] [2 [0 0 0] [0.5 0 1] [1 1 0.2]]</b>   <i>→ set more slots at once</i><br />
				<br />
				A <m>setslot</m> message (or <m>addslot</m> for backward compatibility)
				will replace the content of one or more slots, for all the selected notes.
				The syntax is <b>setslot [<m>slot_number</m> <m>SLOT_CONTENT</m>] [<m>slot_number</m> <m>SLOT_CONTENT</m>]...</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				<br />				See also:<m>changeslotitem</m>,<m>eraseslot</m><br />
			</description>
		</method>
		<method name="showcursor">
			<arglist />
			<digest>
				Show the playhead cursor
			</digest>
			<description>
				The <m>showcursor</m> message shows the playhead cursor, if it was hidden.
				In any case, during playback the cursor is always visible.
				<br />				See also:<m>hidecursor</m>,<m>getcursor</m>,<m>setcursor</m><br />
			</description>
		</method>
		<method name="slice">
			<arg name="positions" optional="0" type="number/llll" />
			<arg name="voices" optional="1" type="llll" />
			<digest>
				Slice all the notes at a given instant
			</digest>
			<description>
				Syntax: <b>slice <m>&lt;number/llll: positions&gt;</m> <m>[&lt;llll: voices&gt;]</m> </b><br />
				Examples:<br />
				• <b>slice 1000</b>   <i>→ slice score at 1s</i><br />
				• <b>slice [2000 3000 5000]</b>   <i>→ slice score at 1s, 2s and 5s</i><br />
				• <b>slice [2000 3000 5000] [1 3]</b>   <i>→ the same, but only voices 1 and 3</i><br />
				<br />
				A <m>slice</m> message followed by a number (considered a position in milliseconds) will split all the notes
				inside the <b>bach.roll</b> which exist at the given position into two notes: a left- and a right-sided note. All breakpoints and temporal slots will be
				properly split accordingly. The argument can also be a wrapped llll of numbers, in which case a sequence of slice will be performed at different positions.
				Finally, one can give as a second argument the wrapped list of voices whose chords have to be slice. If such argument is not given, or if it is empty,
				all voices will be slice by default.
			</description>
		</method>
		<method name="slottoname">
			<arg name="slot_number_or_name" optional="0" type="int/symbol" />
			<digest>
				Assign name(s) to selected items from slot content
			</digest>
			<description>
				Syntax: <b>slottoname <m>&lt;int/symbol: slot_number_or_name&gt;</m> </b><br />				<br />
				A <m>slottoname</m> message followed by an integer <m>N</m> overwrites the names of selected
				notes and rests with the content of their slot <m>N</m>. Slot <m>N</m> is expected to be a text or llll slot.
				N.B.: While setting notes' names, the message also clears the corresponding chords' names.
				<br />				See also:<m>name</m>,<m>nameappend</m>,<m>clearnames</m>,<m>sel</m>,<m>unsel</m>,<m>select</m><br />
			</description>
		</method>
		<method name="snaponsettogrid">
			<arglist />
			<digest>
				Snap selected chords' onsets to the current temporal grid
			</digest>
			<description>
				The <m>snaponsettogrid</m> message snaps the onset of each selected chord (or
				of each chord in which at least one note is selected) to the current temporal grid (if any).
				Also see the <m>grid</m> attribute.
				<br />				See also:<m>snappitchtogrid</m>,<m>snaptailtogrid</m><br />
			</description>
		</method>
		<method name="snappitchtogrid">
			<arglist />
			<digest>
				Snap selected notes' pitches to the current microtonal grid
			</digest>
			<description>
				The <m>snappitchtogrid</m> message snaps the midicents of each selected note to the
				currently active microtonal grid (see the <m>tonedivision</m> attribute).
				<br />				See also:<m>respell</m>,<m>snaponsettogrid</m>,<m>snaptailtogrid</m><br />
			</description>
		</method>
		<method name="snaptailtogrid">
			<arglist />
			<digest>
				Snap selected notes' tails to the current temporal grid
			</digest>
			<description>
				The <m>snaptailtogrid</m> message snaps the tails of each selected note to the current temporal grid (if any).
				Also see the <m>grid</m> attribute.
				<br />				See also:<m>snappitchtogrid</m>,<m>snaponsettogrid</m><br />
			</description>
		</method>
		<method name="solo">
			<arglist />
			<digest>
				Set selected items as solo
			</digest>
			<description>
				The <m>solo</m> message will set all selected items as "solo". If solo items exist, they are the only one sequenced during playing.
				<br />				See also:<m>unsolo</m>,<m>mute</m>,<m>unmute</m><br />
			</description>
		</method>
		<method name="stop">
			<arglist />
			<digest>
				Stop
			</digest>
			<description>
				The <m>stop</m> message stops any ongoing playing, if <o>bach.roll</o> was in play mode (nothing happens otherwise).
				<br />				See also:<m>pause</m>,<m>play</m>,<m>playselection</m><br />
			</description>
		</method>
		<method name="subroll">
			<arg name="voices" optional="0" type="llll" />
			<arg name="time_lapse" optional="0" type="llll" />
			<arg name="selective_options" optional="1" type="llll" />
			<digest>
				Output a portion of <o>bach.roll</o>
			</digest>
			<description>
				Syntax: <b>subroll <m>&lt;llll: voices&gt;</m> <m>&lt;llll: time_lapse&gt;</m> <m>[&lt;llll: selective_options&gt;]</m> </b><br />
				Examples:<br />
				• <b>subroll [1 2 4] [1000 3000]</b>   <i>→ extract voices 1, 2 and 4 from 1s to 3s</i><br />
				• <b>subroll [] [1000 3000]</b>   <i>→ extract all voices from 1s to 3s</i><br />
				• <b>subroll [] MyRegion</b>   <i>→ crop the region marker MyRegion</i><br />
				• <b>subroll [1 2] []</b>   <i>→ extract voices 1 and 2 for the whole duration</i><br />
				• <b>subroll [1 3] [2000 -1]</b>   <i>→ extract voices 1 and 3 from 2s to the end</i><br />
				• <b>subroll onset [1 3] [2000 -1]</b>   <i>→ only extract notes whose onset is after 2s (no partial notes)</i><br />
				• <b>subroll [4 5] [1000 3000] [body]</b>   <i>→ only dump the body</i><br />
				• <b>subroll [4 5] [1000 3000] [clefs markers body]</b>   <i>→ only dump clefs, markers and body</i><br />
				<br />
				The <m>subroll</m> message outputs the gathered syntax information of a portion of the <o>bach.roll</o>,
				namely it outputs only certain voices and within a certain time interval.
				The syntax for the <m>subroll</m> message is:
				<b>subroll <m>VOICES</m> <m>TIME_LAPSE</m> <m>optional:SELECTIVE_OPTIONS</m></b>,
				<m>VOICES</m> is an llll of the kind <b>[<m>voice_number1</m> <m>voice_number2</m>...]</b>
				containing the number of the voices to be output; leave <b>nil</b> or <b>[]</b> if you want to output all voices. <br />
				<m>TIME_LAPSE</m> is an llll of the kind <b>[<m>start_ms</m> <m>end_ms</m>]</b> containing the time lapse that
				has to be output. Leave such list as <b>nil</b> or <b>[]</b> if you want this lapse to be all the length of the <o>bach.roll</o>.
				Otherwise <m>start_ms</m> is the beginning of the portion of <o>bach.roll</o> to be output (in milliseconds), and
				<m>end_ms</m> is the end of the portion of <o>bach.roll</o> to be output (in milliseconds); leave any negative value
				for <m>end_ms</m> if you want the portion of <o>bach.roll</o> to be output to go till the end of the notation object.
				To infer the starting and ending point from a region marker, set <m>TIME_LAPSE</m> either as a single symbol
				or as a wrapped list of symbols (names). <br />
				The third llll, <m>optional:SELECTIVE_OPTIONS</m>, is optional, and if given might contain a symbol or list of symbols
				which handle what part of the header should be dumped. By default all header is output. Options for these symbols are exactly
				the same as for the <m>dump</m> message (see its documentation to know more). For instance <b>subroll [4 5] [1000 3000] [clefs markers body]</b>
				output voices 4 and 5 in the portion of the <o>bach.roll</o> going from 1000ms to 3000ms, and outputs in addition to the musical content (the body)
				the information about clefs and the markers.
				Leave <b>[body]</b> as third parameter if you only want to dump the music content, and no header information
				<br />				See also:<m>dump</m><br />
			</description>
		</method>
		<method name="subsel">
			<arg name="arguments" optional="0" type="llll" />
			<digest>
				Restrict selection
			</digest>
			<description>
				Syntax: <b>subsel <m>&lt;llll: arguments&gt;</m> </b><br />				<br />
				The message <m>subsel</m> works as the <m>sel</m> message, but restricting the existing selection.
				More specifically, elements are only kept as selected if they verify the specified property.
				In other words, the <m>subsel</m> message create an intersection between the specified selection and the existing one.
				Refer to the message <m>sel</m> to know more about the syntax, since it is exactly the same.
				<br />				See also:<m>sel</m>,<m>unsel</m>,<m>select</m>,<m>clearselection</m><br />
			</description>
		</method>
		<method name="tail">
			<arg name="tail_position_ms" optional="0" type="number/llll/anything" />
			<digest>
				Modify the tail position of selected items
			</digest>
			<description>
				Syntax: <b>tail <m>&lt;number/llll/anything: tail_position_ms&gt;</m> </b><br />
				Examples:<br />
				• <b>tail 1000</b>   <i>→ set selected items' tail at 1s</i><br />
				• <b>tail = 1000</b>   <i>→ exactly the same</i><br />
				• <b>tail = tail + 1000</b>   <i>→ lengthen selected notes by 1s</i><br />
				• <b>tail = 30000</b>   <i>→ make selection end together at 30s</i><br />
				• <b>tail = "onset + random[0, 1000]"</b>   <i>→ assign duration randomly</i><br />
				<br />
				The word <m>tail</m>, followed by a number, sets the new position of the tail, in milliseconds, for all
				the selected notation items. Such position must fall, for every chord, after the chord onset, otherwise it is clipped to the chord onset
				(no chords with negative durations are allowed).
				If a list of numbers is given as arguments, this is applied to selected chords notewise: bottommost note will be assigned
				the first value, the one above will be assigned the next one, and so on. If less values than selected notes in the chord
				are given, last value is padded.
				Any of the numbers can be replaced by an llll containing a relative modification of the existing tail position.
				If a single number is inserted, this can be replaced by a generic equation.
				All parameters, except for <o>bach.score</o>'s timepoints, also support a relative modification syntax, which modifies the existing values instead
				Relative modifications of a parameter are handled via lllls of the type <b>[<m>value</m> <m>function</m>]</b>, where
				the <m>function</m> is one of the following symbols: "plus", "minus", "times", "div". Such modification applies the corresponding
				function to the current value of the parameter and the inserted <m>value</m>. For instance, <b>[100 minus]</b> removes 100 to the current
				value of the parameter, while <b>[2. times]</b> multiplies it by two.
				<br /> <br />
				All separate parameters, except for measureinfo, ties and slots, can also be modified via a generic equation. In order to do so,
				the message symbol must be followed by an <m>=</m> sign (with spaces before and after it), and then by the desired equation.
				The standard symbolic variables are available. <br />
				Symbolic variables are variables that can be used in the conditional selection or parameter modification processes.
				These are: <m>onset</m> (in ms), <m>duration</m> (in ms), <m>velocity</m>, <m>cents</m> (pitch in MIDIcents),
				<m>pitch</m> (diatonic pitch), <m>poc</m> (pitch or cents, depending on what was defined by the user),
				<m>tail</m> (position of the note end, in ms), <m>voice</m> (voice number), <m>part</m> (part number),
				<m>voiceensemble</m> (voiceensemble number).
				For <o>bach.score</o> you can also use: <m>symduration</m> (symbolic rational duration),
				<m>symonset</m> (symbolic rational onset inside the measure), <m>symtail</m> (sum of the two previous), <m>measure</m> (the measure number),
				<m>tie</m> (which is 1 if a tie starts, 2 if a tie ends and 3 if a tie both starts and ends, 0 otherwise) and <m>grace</m> (1 for
				grace chords, 0 otherwise). <br />
				You can also use the variables <m>numnotes</m>, <m>numchords</m> and <m>nummeasures</m> to determine the number of notes/chords/measures
				that a otation item has (e.g. the number of chords in a measure, or the number of notes in a chord). <br />
				In addition, you also have the <m>index</m> symbol, corresponding to the index of the item: the index of the note in the chord (bottom-up),
				the index of the chord in the measure or voice (left to right), the index of the measures, voices, markers, pitch breakpoints, etc.
				(all left to right). In case you need to distinguish between chord index and note index, for a given note, you can explicitly use the
				<m>chordindex</m> or <m>noteindex</m> symbols. <br />
				For instance, one could define <b>velocity = duration / 100. + onset * 0.01</b> or <b>cents = cents + 200</b>, or
				<b>onset = [cents - 6000] / 100 + 2000 * [voice - 1]</b>.
				The equation syntax extends in a sense the relative modification syntax; however it is applied to the globality of the selection, and
				one cannot apply different equations to different notes inside the chord.
				<br /> <br />
				<br />				See also:<m>duration</m>,<m>legato</m><br />
			</description>
		</method>
		<method name="timetopixel">
			<arg name="query_label" optional="1" type="llll" />
			<arg name="position_ms" optional="0" type="float" />
			<digest>
				Convert a time position into a pixel position
			</digest>
			<description>
				Syntax: <b>timetopixel <m>[&lt;llll: query_label&gt;]</m> <m>&lt;float: position_ms&gt;</m> </b><br />
				Example: <b>timetopixel 4000</b>   <i>→ get the pixel position corresponding to 4s</i><br />
				<br />
				The <m>timetopixel</m> message converts a position given in milliseconds (as argument) into a position given in pixels, representing
				the pixel at which such time position happens, in the current domain.
				The output answer is sent through the playout, and its syntax is: <b>pixel <m>pixel_position</m></b>, where the last element
				is indeed the position in pixels corresponding to the inserted position in milliseconds. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>[label <m>label_name</m>]</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime [label john] 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
				<br />				See also:<m>pixeltotime</m><br />
			</description>
		</method>
		<method name="transaction">
			<arglist />
			<digest>
				Process multiple insert/remove/change messages
			</digest>
			<description>
				A generic transaction is a sequence of generic messages executed seamlessly, without refreshing the order of chords, notes
				and markers, and without refreshing the display in the middle. <br />
				Transactions are obtained via the syntax
				<b>transaction <m>transaction_name</m> [<m>change_message1</m> <m>change_message2</m> ...]</b> <br />
				where <m>transaction_name</m> is a symbol associated with the transaction and each one of the <m>change_message</m>s has
				the syntax of a generic change, described in the following paragraph. <br />
				Generic changes in a score can be obtained via the syntax <br />
				<b>insert/remove/change <m>element_type</m> <m>element_path</m> <m>property_name</m> <m>content_as_llll</m></b> <br />
				If the initial symbol is "remove", the last two fields are irrelevant; if the initial symbol is "
				Properties are the ones displayed in the bach inspector for the specific element, plus the symbol "state", which
				sets the whole state of the element from a gathered syntax llll. <br />
			</description>
		</method>
		<method name="undo">
			<arglist />
			<digest>
				Perform an undo step
			</digest>
			<description>
				An <m>undo</m> message will perform an undo step.
				<br />				See also:<m>redo</m>,<m>inhibitundo</m>,<m>droplastundo</m><br />
			</description>
		</method>
		<method name="ungroup">
			<arglist />
			<digest>
				Ungroup selected items
			</digest>
			<description>
				A <m>ungroup</m> message breaks all the groups of selected chords.
				<br />				See also:<m>group</m><br />
			</description>
		</method>
		<method name="unlock">
			<arglist />
			<digest>
				Unlock selected items
			</digest>
			<description>
				The <m>unlock</m> message will unlock all locked selected items, in order to allow their editing anew.
				<br />				See also:<m>lock</m><br />
			</description>
		</method>
		<method name="unmute">
			<arglist />
			<digest>
				Unmute selected items
			</digest>
			<description>
				The <m>unmute</m> message will remove the "mute" status to any muted selected items, so that they will be sequenced anew while playing.
				<br />				See also:<m>mute</m>,<m>solo</m>,<m>unsolo</m><br />
			</description>
		</method>
		<method name="unsel">
			<arg name="arguments" optional="0" type="llll" />
			<digest>
				Deselect items
			</digest>
			<description>
				Syntax: <b>unsel <m>&lt;llll: arguments&gt;</m> </b><br />				<br />
				The message <m>unsel</m> works in the opposite way of the message <m>sel</m>, i.e. deselect
				notation items (removes them from the current selection). Refer to the message <m>sel</m> to know more about the
				syntax, since it is exactly the same.
				<br />				See also:<m>sel</m>,<m>select</m>,<m>subsel</m>,<m>clearselection</m><br />
			</description>
		</method>
		<method name="unsolo">
			<arglist />
			<digest>
				Remove solo status from selected items
			</digest>
			<description>
				The <m>unsolo</m> message will remove the "solo" status to any selected items having it.
				<br />				See also:<m>solo</m>,<m>mute</m>,<m>unmute</m><br />
			</description>
		</method>
		<method name="velocities2dynamics">
			<arg name="selection" optional="1" type="symbol" />
			<arg name="slot_number" optional="1" type="int" />
			<digest>
				Infer dynamics depending on velocities
			</digest>
			<description>
				Syntax: <b>velocities2dynamics <m>[&lt;symbol: selection&gt;]</m> <m>[&lt;int: slot_number&gt;]</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>velocities2dynamics</b>   <i>→ convert velocities to dynamics throughout the whole score</i><br />
				• <b>velocities2dynamics selection</b>   <i>→ same thing, for selected items only</i><br />
				• <b>velocities2dynamics @mapping [p 40] [mp 70] [mf 90] [f 110]</b>   <i>→ use only "p", "mp", "mf", "f" symbols, with the defined mappings</i><br />
				• <b>velocities2dynamics @maxchars 6</b>   <i>→ use broader dynamics spectrum (from "pppppp" to "ffffff")</i><br />
				• <b>velocities2dynamics @maxchars 2</b>   <i>→ use narrower dynamics spectrum (from "pp" to "ff")</i><br />
				• <b>velocities2dynamics @maxchars 2 @exp 0.5</b>   <i>→ use narrower spectrum and a steeper mapping curve</i><br />
				• <b>velocities2dynamics @exp 1.</b>   <i>→ use a linear mapping curve</i><br />
				• <b>dynamics2velocities @thresh 10.</b>   <i>→ allow coarse hairpin detection</i><br />
				• <b>velocities2dynamics @thresh 0. @unnecessary 0</b>   <i>→ assign a dynamic marking to each chord, no hairpins</i><br />
				<br />
				Message attributes:<br />
				<m>@maxchars</m> (int, default: 4): Width of the dynamics spectrum<br />
				<m>@exp</m> (float, default: 0.8): Exponent for the conversion<br />
				<m>@mapping</m> (llll): Custom dynamics-to-velocity mapping via <b>[<m>dynamics</m> <m>velocity</m>]</b> pairs<br />
				<m>@unnecessary</m> (int, default: 1): If non-zero, drops unnecessary dynamic markings<br />
				<m>@thresh</m> (float, default: 1.): Hairpin detection threshold<br />
				<m>@mindyn</m> (symbol, default: none): Dynamic marking for velocities less than or equal to 1 (or none if empty symbol)<br />
				<m>@maxdyn</m> (symbol, default: none): Dynamic marking for velocities greater than or equal to 127 (or none if empty symbol)<br />
				<br />
				A <m>velocities2dynamics</m> message will infer and assign chord dynamics and hairpins, depending on the current velocities,
				for the whole score or - if "selection" is set as first argument, for the selected items only.
				The dynamics sequence considered is the one contained in the slot
				linked to dynamics, if any (see <m>linkdynamicstoslot</m>), or in another slot, if given as integer argument. <br />
				Unless explicit dynamic-velocity mapping is defined, a default mapping is used. Two message attributes handle such default mapping: <br />
				• the "maxchars" attribute sets the width of the dynamics spectrum; <br />
				• the "exp" attribute sets the exponent for the conversion. <br />
				The dynamics spectrum is the sequence of standard dynamics in the piano-to-forte range.
				It is characterized by its "maxchars", i.e. the maximum number of p's and f's of the elements it contains ("mp" and "mf"
				are considered as having 0 p's and f's).
				For instance, the collection of
				{"pp", "p", "mp", "mf", "f", "ff"} makes for a spectrum of <m>maxchars</m> = 2.
				The "maxchars" property of the dynamic spectrum will factor into different conversions between dynamics and velocities,
				in combination with a conversion exponent.
				The dynamic range is set via the "maxchars" parameter, while the exponent is set via the "exp" parameter (greater than 0. and less or equal to 1.).
				If "exp" is 1., the velocity range is divided linearly between the dynamics in the spectrum; otherwise an exponential scaling is applied.
				Default exponent is 0.8, and default range width is 5 (from "pppp" to "ffff").
				Any dynamic marking outside the spectrum will be clipped to the spectrum during conversion.
				The dynamics are scaled so that "mp" will always correspond to velocity = 64.
				If i is the index of the
				If <m>i</m> is the 1-based index of the element of a spectrum containing 2D elements <br />
				vel(i) = 128 * ((1 + sgn(-1+2i/(2D+1))*|-1+2i/(2D+1)|^a)/2)^b <br />
				More clearly, once set x = x(i, D) = -1+2i/(2D+1), between -1 and 1, one has <br />
				vel(i) = 128 * ((1 + sgn(x)*|x|^a)/2)^b. <br />
				This function assumes values between 0. and 1., for x in [-1, 1].
				In any case vel(i) is clipped to 127 (128 won't be allowed).
				The parameter <m>a</m> is the "exp" parameter defined above. The parameter <m>b</m> is chosen so that vel("mp") = vel(D) = 64, which yields <br />
				b = 1/(1 - log2(1 - 1/((2D+1)^a))) <br />
				As an example, if "exp" (i.e. <m>a</m>) is 0.8 (hence <m>b</m> is about 0.745),
				consider the spectrum {"pp", "p", "mp", "mf", "f", "ff"}, having <m>maxchars</m> = 2 and <m>D</m> = 3 (containing <m>2D</m> = 6 elements).
				The dynamics "f" has index 5, hence x = x(5, 3) = -1+2i/(2D+1) = -1 + 10/7 = 3/7, hence <br />
				vel("f") = vel(5) = 128 * ((1 + (3/7)^a)/2)^b ~ 128 * 0.810 ~ 103, <br />
				while within the broader spectrum {"pppp", "ppp", "pp", "p", "mp", "mf", "f", "ff", "fff", "ffff"}, having <m>maxchars</m> = 4 and <m>D</m> = 5,
				one has x = x(7, 5) = -1+2i/(2D+1) = -1 + 14/11 = 3/11
				vel("f") = vel(7) = 128 * ((1 + (3/11)^a)/2)^b ~ 128 * 0.748 ~ 96. <br />
				Moreover, the "mapping" attribute defines a non-standard or more general mapping via an llll specification. Such parameter has syntax
				<b>[mapping [<m>dynamics1</m> <m>velocity1</m>] [<m>dynamics2</m> <m>velocity2</m>]...]</b>.
				Differently from <m>dynamics2velocities</m>, if you define a mapping, you need to define the velocity association for each of the dynamic marking
				you want to use. <br />
				An "unnecessary" attribute toggles whether unnecessary dynamic markings should by default be
				dropped (default is 1: yes, use 0 to turn this of). <br />
				A "thresh" attribute sets a threshold for hairpin detection (default is 1., 0. meaning: no hairpin detection). <br />
				Two attributes, "mindyn" and "maxdyn", allow setting special symbols to be assigned to velocities below 1 and above 127 respectively
				(both numbers included).
				If "none" is provided (default), there will be no special symbol for these cases.
				<br />				See also:<m>dynamics2velocities</m>,<m>checkdynamics</m>,<m>fixdynamics</m><br />
			</description>
		</method>
		<method name="velocity">
			<arg name="velocity" optional="0" type="int/llll/anything" />
			<digest>
				Modify the velocity of selected items
			</digest>
			<description>
				Syntax: <b>velocity <m>&lt;int/llll/anything: velocity&gt;</m> </b><br />
				Examples:<br />
				• <b>velocity 120</b>   <i>→ set selected items' velocity to 120</i><br />
				• <b>velocity = 120</b>   <i>→ exactly the same</i><br />
				• <b>velocity = velocity * 1.2</b>   <i>→ increase velocity</i><br />
				• <b>velocity = duration/1000.</b>   <i>→ assign velocity depending on duration</i><br />
				• <b>velocity = "random[40, 121]"</b>   <i>→ assign velocity randomly</i><br />
				<br />
				The word <m>velocity</m>, followed by a number, sets the new velocity (from 1 to 127) for all
				the selected notation items.
				If a list of numbers is given as arguments, this is applied to selected chords notewise: bottommost note will be assigned
				the first value, the one above will be assigned the next one, and so on. If less values than selected notes in the chord
				are given, last value is padded.
				Any of the numbers can be replaced by an llll containing a relative modification of the existing velocity.
				If a single number is inserted, this can be replaced by a generic equation.
				All parameters, except for <o>bach.score</o>'s timepoints, also support a relative modification syntax, which modifies the existing values instead
				Relative modifications of a parameter are handled via lllls of the type <b>[<m>value</m> <m>function</m>]</b>, where
				the <m>function</m> is one of the following symbols: "plus", "minus", "times", "div". Such modification applies the corresponding
				function to the current value of the parameter and the inserted <m>value</m>. For instance, <b>[100 minus]</b> removes 100 to the current
				value of the parameter, while <b>[2. times]</b> multiplies it by two.
				<br /> <br />
				All separate parameters, except for measureinfo, ties and slots, can also be modified via a generic equation. In order to do so,
				the message symbol must be followed by an <m>=</m> sign (with spaces before and after it), and then by the desired equation.
				The standard symbolic variables are available. <br />
				Symbolic variables are variables that can be used in the conditional selection or parameter modification processes.
				These are: <m>onset</m> (in ms), <m>duration</m> (in ms), <m>velocity</m>, <m>cents</m> (pitch in MIDIcents),
				<m>pitch</m> (diatonic pitch), <m>poc</m> (pitch or cents, depending on what was defined by the user),
				<m>tail</m> (position of the note end, in ms), <m>voice</m> (voice number), <m>part</m> (part number),
				<m>voiceensemble</m> (voiceensemble number).
				For <o>bach.score</o> you can also use: <m>symduration</m> (symbolic rational duration),
				<m>symonset</m> (symbolic rational onset inside the measure), <m>symtail</m> (sum of the two previous), <m>measure</m> (the measure number),
				<m>tie</m> (which is 1 if a tie starts, 2 if a tie ends and 3 if a tie both starts and ends, 0 otherwise) and <m>grace</m> (1 for
				grace chords, 0 otherwise). <br />
				You can also use the variables <m>numnotes</m>, <m>numchords</m> and <m>nummeasures</m> to determine the number of notes/chords/measures
				that a otation item has (e.g. the number of chords in a measure, or the number of notes in a chord). <br />
				In addition, you also have the <m>index</m> symbol, corresponding to the index of the item: the index of the note in the chord (bottom-up),
				the index of the chord in the measure or voice (left to right), the index of the measures, voices, markers, pitch breakpoints, etc.
				(all left to right). In case you need to distinguish between chord index and note index, for a given note, you can explicitly use the
				<m>chordindex</m> or <m>noteindex</m> symbols. <br />
				For instance, one could define <b>velocity = duration / 100. + onset * 0.01</b> or <b>cents = cents + 200</b>, or
				<b>onset = [cents - 6000] / 100 + 2000 * [voice - 1]</b>.
				The equation syntax extends in a sense the relative modification syntax; however it is applied to the globality of the selection, and
				one cannot apply different equations to different notes inside the chord.
				<br /> <br />
			</description>
		</method>
		<method name="voice">
			<arg name="voice_number" optional="0" type="int/llll/anything" />
			<digest>
				Modify the voice of selected items
			</digest>
			<description>
				Syntax: <b>voice <m>&lt;int/llll/anything: voice_number&gt;</m> </b><br />
				Examples:<br />
				• <b>voice 2</b>   <i>→ put selected notes in second voice</i><br />
				• <b>voice = 2</b>   <i>→ exactly the same</i><br />
				• <b>voice = voice + 1</b>   <i>→ shift voices</i><br />
				• <b>voice = "random[1, 4]"</b>   <i>→ assign voice randomly between 1 and 3</i><br />
				• <b>voice = [3 - voice]*[voice &lt;= 2] + voice * [voice &gt; 2]</b>   <i>→ swap first two voices</i><br />
				<br />
				The word <m>voice</m>, followed by a number, sets the new voice number for all
				the selected notes or chords.
				Any of the numbers in the voice syntax can be replaced by an llll containing a relative modification of the existing voice.
				If a single number is inserted, this can be replaced by a generic equation. <br /> <br />
				All parameters, except for <o>bach.score</o>'s timepoints, also support a relative modification syntax, which modifies the existing values instead
				Relative modifications of a parameter are handled via lllls of the type <b>[<m>value</m> <m>function</m>]</b>, where
				the <m>function</m> is one of the following symbols: "plus", "minus", "times", "div". Such modification applies the corresponding
				function to the current value of the parameter and the inserted <m>value</m>. For instance, <b>[100 minus]</b> removes 100 to the current
				value of the parameter, while <b>[2. times]</b> multiplies it by two.
				<br /> <br />
				All separate parameters, except for measureinfo, ties and slots, can also be modified via a generic equation. In order to do so,
				the message symbol must be followed by an <m>=</m> sign (with spaces before and after it), and then by the desired equation.
				The standard symbolic variables are available. <br />
				Symbolic variables are variables that can be used in the conditional selection or parameter modification processes.
				These are: <m>onset</m> (in ms), <m>duration</m> (in ms), <m>velocity</m>, <m>cents</m> (pitch in MIDIcents),
				<m>pitch</m> (diatonic pitch), <m>poc</m> (pitch or cents, depending on what was defined by the user),
				<m>tail</m> (position of the note end, in ms), <m>voice</m> (voice number), <m>part</m> (part number),
				<m>voiceensemble</m> (voiceensemble number).
				For <o>bach.score</o> you can also use: <m>symduration</m> (symbolic rational duration),
				<m>symonset</m> (symbolic rational onset inside the measure), <m>symtail</m> (sum of the two previous), <m>measure</m> (the measure number),
				<m>tie</m> (which is 1 if a tie starts, 2 if a tie ends and 3 if a tie both starts and ends, 0 otherwise) and <m>grace</m> (1 for
				grace chords, 0 otherwise). <br />
				You can also use the variables <m>numnotes</m>, <m>numchords</m> and <m>nummeasures</m> to determine the number of notes/chords/measures
				that a otation item has (e.g. the number of chords in a measure, or the number of notes in a chord). <br />
				In addition, you also have the <m>index</m> symbol, corresponding to the index of the item: the index of the note in the chord (bottom-up),
				the index of the chord in the measure or voice (left to right), the index of the measures, voices, markers, pitch breakpoints, etc.
				(all left to right). In case you need to distinguish between chord index and note index, for a given note, you can explicitly use the
				<m>chordindex</m> or <m>noteindex</m> symbols. <br />
				For instance, one could define <b>velocity = duration / 100. + onset * 0.01</b> or <b>cents = cents + 200</b>, or
				<b>onset = [cents - 6000] / 100 + 2000 * [voice - 1]</b>.
				The equation syntax extends in a sense the relative modification syntax; however it is applied to the globality of the selection, and
				one cannot apply different equations to different notes inside the chord.
				<br /> <br />
			</description>
		</method>
		<method name="write">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Save file in native format
			</digest>
			<description>
				Syntax: <b>write <m>[&lt;symbol: filename&gt;]</m> </b><br />
				Examples:<br />
				• <b>write</b>   <i>→ save file in native format via dialog box</i><br />
				• <b>write myfile.llll</b>   <i>→ save bach file in native format</i><br />
				<br />
				The <m>write</m> message saves all the <o>bach.roll</o> content in native format (with extension .llll).
				The file name (as symbol) can be given as optional first argument. If no such symbol is given, a dialog box will pop up
				allowing the choice of the location and file name for saving.
				<br />				See also:<m>writetxt</m>,<m>exportmidi</m>,<m>read</m>,<m>exportimage</m><br />
			</description>
		</method>
		<method name="writetxt">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Save file in text format
			</digest>
			<description>
				Syntax: <b>writetxt <m>[&lt;symbol: filename&gt;]</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>writetxt</b>   <i>→ export as a text file, opening a dialog box for the file name</i><br />
				• <b>writetxt myfile.txt</b>   <i>→ export as a text file with the provided file name</i><br />
				• <b>writetxt myfile.txt @maxdecimals 3</b>   <i>→ export with a floating-point precision of 3 decimal digits</i><br />
				• <b>writetxt myfile.txt @maxdecimals 3 @wrap 40</b>   <i>→ as the above, limiting the length of each line to 40 characters</i><br />
				• <b>writetxt myfile.txt @maxdepth 1</b>   <i>→ no indentation is performed</i><br />
				<br />
				Message attributes:<br />
				<m>@indent</m> (atom, default: tab): Number of spaces for indentation or "tab" symbol<br />
				<m>@maxdepth</m> (int, default: -1): Maximum depth for new lines<br />
				<m>@wrap</m> (int, default: 0): Maximum number of characters per line (0 means: no wrapping)<br />
				<br />
				The <m>writetxt</m> message saves all the <o>bach.roll</o> content, as llll, in text format (with extension .txt).
				This will result in a readable text file, but it might also lead to some very slight loss of precision. This is usually negligible, but
				if it bothers you, use the <m>write</m> message instead. <br />
				Text format is easily editable in any text editor,
				but representation of floating-point numbers is approximate.
				No limit in size is given for saving a file in text format (differently from what happens while outputting lllls as text in Max).
				If no file name is provided, a dialog box will open.
				Furthermore, some message attributes are available, for fine-tuning of the text formatting.
				Available attributes are: <br />
				- <b>maxdecimals</b> (default: 10): the precision for floating-point numbers. <br />
				- <b>indent</b> [default: <b>tab</b>]: if set to <m>tab</m>, every sublist that is encountered [up to <b>maxdepth</b>, see below)
				will be placed on a new line, indented by a number of tabs equal to the depth level of the sublist itself.
				If set to an integer, the indentation for each depth level will be the corresponding number of spaces.<br />
				- <b>maxdepth</b> (default: -1, i.e. no limitation): the maximum depth at which sublists are placed in new lines.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				- <b>wrap</b> (default: 0, i.e. no wrapping): the maximum number of characters to be placed on each line.<br />
				- <b>filename</b> (default: not set): the name of the file to be written.
				If set, this specification overrides the file name set as the first message argument.
				<br />				See also:<m>write</m>,<m>exportmidi</m>,<m>read</m>,<m>exportimage</m><br />
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="accidentalcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Accidental Color
			</digest>
			<description>
				Sets the color of accidentals, in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Accidental Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="accidentaldecay" get="1" set="1" type="float" size="1">
			<digest>
				Accidental Decay Time
			</digest>
			<description>
				Sets the decay time (in milliseconds) for non-classical accidental display, e.g. for naturalization of altered notes:
				notes within the said threshold are naturalized, beyond this threshold, the naturalization decays, as if a new measure had started.
				Leave 0 for "no decay" (accidentals are valid till the end of the roll, as if the whole roll were a single long measure).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Notation" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Accidental Decay Time" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="accidentalsfont" get="1" set="1" type="symbol" size="1">
			<digest>
				Accidentals Font
			</digest>
			<description>
				@description Sets the font used to display accidentals.
				The official notation bach font is "November for bach", created by Robert Piéchaud (www.poeticprocessing.net) and
				automatically loaded at bach startup. "November for bach" is a light version of the famous November font.
				The full November font covers a wide range of music symbols, from Renaissance to the XXI century, and gives a unique,
				warm and lively look to your music scores. It is fully compatible with Finale, Sibelius and other notation softwares.
				You can purchase November from this web address: www.klemm-music.de/notation/november/.
				Other supported fonts are: Accidentals (up to the eighth-tones), Tamburo (up to the quartertones),
				Maestro, Petrucci, Boulez, Engraver Font Set (up to the semitones).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="symbol" size="1" value="\" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Accidentals Font" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="font" />
			</attributelist>
		</attribute>
		<attribute name="accidentalsgraphic" get="1" set="1" type="int" size="1">
			<digest>
				Accidental Graphic
			</digest>
			<description>
				Sets the way of displaying accidentals: <br />
				- None: no accidental is displayed. <br />
				- Classical: accidentals are displayed with the classical symbols (sharps, flats...).
				This option is only available if <m>tonedivision</m> is 2, 4 or 8. <br />
				- Fraction: accidentals are displayed as fractions of tone (e.g. "-1/4" for quartertone flat or "+1/2" for
				an ordinary sharp). <br />
				- Unreduced Fraction: as the previous one, but fractions are never reduced. For instance, if <m>tonedivision</m> is
				48 one would have "+2/8" and not "+1/4". Denominator of each fraction is the <m>tonedivision</m>
				(thus a tonedivision 2 has denominators 2, as expected for standard sharps and flats). <br />
				- Cents: accidentals are displayed as cents differences with respect to the diatonic note.
				Remark that, unless <m>tonedivision</m> is 100, the displayed cents difference will not in general correspond to the
				real cents difference: the first one will be indeed a cents difference snapped to the chosen microtonal grid.
				For instance, if <m>tonedivision</m> is 8, a note having midicents 6027 will be displayed as a middle C with a "+25cents" accidental.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Accidental Graphic" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="accidentalspreferences" get="1" set="1" type="int" size="1">
			<digest>
				Accidental Preferences
			</digest>
			<description>
				Sets how non-natural notes should be represented: <br />
				- Auto: let bach choose a default representation. <br />
				- Sharps: always choose sharp accidentals (more precisely, in general: always
				choose a representation such that the displayed diatonic pitch is below the actual note). <br />
				- Flats: always choose flat accidentals (more precisely, in general: always
				choose a representation such that the displayed diatonic pitch is above the actual note). <br />
				- Custom: use a custom enharmonic table, defined via the <m>enharmonictable</m> attribute.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Accidental Preferences" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="activepart" get="1" set="1" type="int" size="1">
			<digest>
				Active Part
			</digest>
			<description>
				Sets the active part number for editing (in case of voice ensembles displaying multiple parts at once, see the <m>part</m> attribute).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Active Part" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="additionalstartpad" get="1" set="1" type="float" size="1">
			<digest>
				Additional Start Pad
			</digest>
			<description>
				Sets an additional left pad to the domain display start, in pixels (rescaled according to the <m>vzoom</m>),
				This pad is located right after each clef, before the music content starts.
				In <o>bach.roll</o>, this pad is extremely useful if you have chords around 0ms
				having a lot of accidentals. In this case you can shift, via this pad, the position of the 0ms on the screen, so that all accidentals
				are correctly displayed. Also see the message <m>adjustadditionalstartpad</m>.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="0." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Additional Start Pad" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="align" get="1" set="1" type="int" size="1">
			<digest>
				Chords Alignment Mode
			</digest>
			<description>
				Sets the alignment mode for chords: <br />
				- Stems: chords are aligned by their stem (whether or not it is displayed: see the <m>showstems</m> attribute). Two chords falling on the same time
				instant will have their stems vertically aligned. <br />
				- Notehead Center (default): means that chords are aligned by the center of the main notehead. This is similar to what happens in <o>bach.score</o>:
				two chords falling on the same time instant, one with stem up and one with stem down, will be aligned according to the position of their noteheads, and not
				the position of their stems. The noteheads will result aligned. <br />
				- Notehead End: chords are aligned by the ending point of their noteheads. In this case, the duration line perfectly spans the time duration of the notes.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Chords Alignment Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="allowcopypaste" get="1" set="1" type="int" size="1">
			<digest>
				Allow Copy/Paste
			</digest>
			<description>
				Toggles the ability to copy and paste data via the interface copy/paste commands.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Copy/Paste" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="allowglissandi" get="1" set="1" type="int" size="1">
			<digest>
				Allow Glissando Breakpoints
			</digest>
			<description>
				Toggles the possibility, for duration lines, to have pitch breakpoints, creating glissando-like behaviors.
				If this is hidden, all breakpoints are not displayed.
				This defaults to 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Glissando Breakpoints" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="allowlock" get="1" set="1" type="int" size="1">
			<digest>
				Allow Lock
			</digest>
			<description>
				Toggles the ability to lock notation items.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Lock" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="allowmute" get="1" set="1" type="int" size="1">
			<digest>
				Allow Mute
			</digest>
			<description>
				Toggles the ability to mute notation items.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Mute" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="allowslothzoom" get="1" set="1" type="int" size="1">
			<digest>
				Allow Slot Horizontal Zooming
			</digest>
			<description>
				Toggles the ability to allow the horizontal slot zooming and navigation (via mousewheel and <m>Cmd</m>+mousewheel, as standard zoom)
				for slots of type function, 3dfunction, spat and dynfilter. However, for <o>bach.roll</o> and <o>bach.score</o>,
				if the slot is defined to be "temporal", no slot zooming will be allowed,
				as the zoom will be passed to the underlying notation object.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Slot Horizontal Zooming" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="allowsolo" get="1" set="1" type="int" size="1">
			<digest>
				Allow Solo
			</digest>
			<description>
				Toggles the ability to set notation items as "solo".
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Solo" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="annotationcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Annotation Color
			</digest>
			<description>
				Sets the color of text annotations, in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Annotation Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="annotationfontsize" get="1" set="1" type="float" size="1">
			<digest>
				Annotation Font Size
			</digest>
			<description>
				Sets the font size for textual annotations over the staff (handled via slot linkage).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="10" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Annotation Font Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="annotationsfont" get="1" set="1" type="symbol" size="1">
			<digest>
				Annotations Font
			</digest>
			<description>
				@description Sets the font used to display annotations (default is Arial).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="symbol" size="1" value="Arial" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Annotations Font" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="font" />
			</attributelist>
		</attribute>
		<attribute name="applyslope" get="1" set="1" type="int" size="1">
			<digest>
				Apply Range Slopes During Playback
			</digest>
			<description>
				Toggle the ability to change the slopes in function slots in order to possibly apply range slopes.
				The new slopes will hence account for the visual range slope too. By default it is active.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Apply Range Slopes During Playback" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="articulationcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Articulation Color
			</digest>
			<description>
				Sets the color of articulations, in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Articulation Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="articulationsfont" get="1" set="1" type="symbol" size="1">
			<digest>
				Articulations Font
			</digest>
			<description>
				@description Sets the font used to display articulations.
				The official notation bach font is "November for bach", created by Robert Piéchaud (www.poeticprocessing.net) and
				automatically loaded at bach startup. "November for bach" is a light version of the famous November font.
				The full November font covers a wide range of music symbols, from Renaissance to the XXI century, and gives a unique,
				warm and lively look to your music scores. It is fully compatible with Finale, Sibelius and other notation softwares.
				You can purchase November from this web address: www.klemm-music.de/notation/november/.
				Other supported fonts are: Boulez, Maestro, Petrucci, Engraver Font Set. Not all articulations are supported by all fonts.
				You can however always define custom articulations with any font of your choice.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="symbol" size="1" value="\" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Articulations Font" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="font" />
			</attributelist>
		</attribute>
		<attribute name="autoclear" get="1" set="1" type="int" size="1">
			<digest>
				Autoclear
			</digest>
			<description>
				Toggles the ability to clear the notation object automatically when a new
				separate syntax information is entered, and a bang is sent through the first inlet.
				This defaults to 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Autoclear" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="autojump" get="1" set="1" type="int" size="1">
			<digest>
				Auto Jump To Next Chord While Linear Editing
			</digest>
			<description>
				Toggles the ability to automatically jump to the next chord, while adding or modifying chords in the linear editing system.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Auto Jump To Next Chord While Linear Editing" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="automessage" get="1" set="1" type="atom_array" size="10">
			<digest>
				Automatically Send Message When Changed
			</digest>
			<description>
				Sets a message which is sent automatically to the notation object
				each time any change happens in the interface (right after the bang is sent through the last outlet).
				Use this with caution, since it creates a sort of hidden feedback connection!
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Automatically Send Message When Changed" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="autosize" get="1" set="1" type="int" size="1">
			<digest>
				Automatically Adapt Number Of Voices
			</digest>
			<description>
				Toggles the ability to automatically adapt the number of voices of the
				notation object depending on the number of voice lllls given as input.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Automatically Adapt Number Of Voices" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="auxclefcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Auxiliary Clef Color
			</digest>
			<description>
				Sets the color of 15ma/15vb clefs used inside clef combinations such as <b>FFGG</b>, <b>FGG</b>, <b>FFG</b>, etc..
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Auxiliary Clef Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="auxstaffcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Auxiliary Staff Color
			</digest>
			<description>
				Sets the color of the auxiliary staves (the ones extending the standard G and F clefs above or below) in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.4 0.4 0.4 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Auxiliary Staff Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="bgcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Background Color
			</digest>
			<description>
				Sets the color of the background in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="1. 1. 1. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Background Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="bgslotfontsize" get="1" set="1" type="float" size="1">
			<digest>
				Background Slot Font Size
			</digest>
			<description>
				Sets the font size of background slots displayed as text (rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="8" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Background Slot Font Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="bgslots" get="1" set="1" type="int_array" size="0">
			<digest>
				Slots In Background
			</digest>
			<description>
				Sets the slots to be displayed on the background even when slots windows are not open.
				The attribute expects a list of integers, each representing a slot number.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Slots In Background" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="bgslottextshift" get="1" set="1" type="float_array" size="0">
			<digest>
				Background Slot Text Shift
			</digest>
			<description>
				Sets an horizontal and vertical shift coefficients for the slot text displayed
				for slots kept in background.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float_array" size="0" value="0 0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Background Slot Text Shift" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="bgslotzoom" get="1" set="1" type="float" size="1">
			<digest>
				Zoom For Slot In Background
			</digest>
			<description>
				Sets the independent zoom factor relative to the slots displayed in background.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="100" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Zoom For Slot In Background" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="bordercolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Border Color
			</digest>
			<description>
				Sets the color of the border in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.6 0.6 0.6 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Border Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="breakpointshavenoteheads" get="1" set="1" type="int" size="1">
			<digest>
				Breakpoints Have Noteheads
			</digest>
			<description>
				Toggles the ability to display pitch breakpoints as real notes (possibly with accidentals).
				If this is not set, pitch breakpoints are displayed as small diamonds.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Breakpoints Have Noteheads" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="breakpointshavevelocity" get="1" set="1" type="int" size="1">
			<digest>
				Breakpoints Have Velocity
			</digest>
			<description>
				Toggles the ability, for pitch breakpoints, to have their own independent velocity.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Breakpoints Have Velocity" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="breakpointsize" get="1" set="1" type="float" size="1">
			<digest>
				Pitch Breakpoint Size
			</digest>
			<description>
				Sets the size of diamond shaped breakpoints (when displayed: see <m>breakpointshavenoteheads</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="3." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Pitch Breakpoint Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="catchplay" get="1" set="1" type="int" size="1">
			<digest>
				Catch Play Head
			</digest>
			<description>
				Toggles the ability to follow the playhead in the domain during playback.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Catch Play Head" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="clefcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Clef Color
			</digest>
			<description>
				Sets the color of clefs in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Clef Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="clefs" get="1" set="1" type="sym_array" size="0">
			<digest>
				Clefs
			</digest>
			<description>
				Sets the clefs. A list of symbols is expected, the length of the list will also automatically change the <m>numvoices</m> attribute
				and update the number of voices.
				Each clef symbol can be one of the following: "G", "F", "FG", "FGG", "FFG", "FFGG", "G8va", "G15ma", "G8vb", "G15mb", "F8va", "F15ma", "F8vb", "F15mb",
				"Soprano", "Mezzo", "Alto", "Tenor", "Soprano", "Mezzo", "Tenor", "Alto", "Barytone", "Percussion", "None". <br />
				Clefs such as "FGG" correspond to multiple-staff voices: for instance, in this case, we have a standard piano staff ("FG") with an additional
				G clef superposed (transposed a 15ma above). The "G8va", "G15ma", "G8vb", "G15mb", "F8va", "F15ma", "F8vb", "F15mb" symbols correspond to
				octave-transposed clefs. For instance, "G8va" is the G clef, transposed one octave above, whereas "F15mb" is the F clef transposed two octaves below.
				<br /> <br />
				A special message <b>clefs auto</b> will detect automatically the most appropriate clefs to display
				the musical content, and will set them: such message will apply to all the existing voices, and will not change the number of voices.
				You can use the "auto" symbol instead of any symbol in order to have bach detect automatically the most appropriate clefs
				for the given voice, depending on its notes (e.g. <b>clefs auto G FG</b>). However, in this case the message will also change the
				<m>numvoices</m> attribute, as for the standard case. You can restrict the clef to be automatically chosen among a set of clefs by wrapping
				them between parentheses, preceded by the "auto" symbol. For instance, <b>clefs G F [auto F G] auto</b> will choose the 3rd clef only between
				F and G, while the fourth clef is chosen among a standard set of predefined clefs.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="sym_array" size="0" value="G" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Clefs" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="customspacing" get="1" set="1" type="int" size="1">
			<digest>
				Custom Spacing Mode
			</digest>
			<description>
				Toggles the custom spacing mode. If active, this mode will send requests in the form
				<b>timetopixel <m>ms</m></b> and <b>pixeltotime <m>pix</m></b> from the playout, which the user
				should answer by re-injecting a response respectively in the form <b>pixel <m>pix</m></b> and
				<b>time <m>ms</m></b> in the first inlet. This mechanisms allows the object to paint elements
				according to the customly specified conversions. <br /> Three modes are available: <br />
				None: no custom spacing (default). <br />
				Absolute: pixels are considered inside the object box (0 being the leftmost line of the object box).
				This solution will not automatically account for the scrollbar; this is especially handy if the spacing
				needs to be retrieved from another notation object, such as a <o>bach.score</o>. <br />
				Relative: pixels are considered from the standard 0 position onwards, and the user is not asked
				to account for the scrollbar. <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Custom Spacing Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="defaultmarkername" get="1" set="1" type="symbol" size="1">
			<digest>
				Default Marker Name
			</digest>
			<description>
				Sets the default name for a newly created marker (by default it is "marker").
				Although names in bach can be general lllls, the default name must be a simple single symbol.
				Marker will be then incrementally numbered starting from this default name.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="symbol" size="1" value="marker" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Default Marker Name" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="defaultnoteslots" get="1" set="1" type="llll" size="1">
			<digest>
				Default Note Slots
			</digest>
			<description>
				Sets the default slots for a newly created note (in the standard slot syntax).
				This only applies to notes created via mouse and keyboard.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Default Note Slots" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="defaultvelocity" get="1" set="1" type="int" size="1">
			<digest>
				Default Velocity
			</digest>
			<description>
				Sets the default velocity for a newly created note.
				This only applies to notes created via mouse and keyboard.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="100" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Default Velocity" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="dumpplaycmd" get="1" set="1" type="atom_array" size="1">
			<digest>
				Play Offline Commands
			</digest>
			<description>
				Determines which keys or command are enabled to send the offline play output (up to 16 choices).
				You can use lowercase letters only and/or one of the following symbols: "click" "rightclick" "doubleclick".
				Defaults to "v".
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="atom_array" size="1" value="v" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Play Offline Commands" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="durationlinewidth" get="1" set="1" type="float" size="1">
			<digest>
				Duration Line Width
			</digest>
			<description>
				Sets the width of the duration lines (when displayed: see <m>showdurations</m>).
				In case the <m>showvelocity</m> attribute handles velocities via duration line width, this width is the maximum possible
				width (corresponding to a velocity of 127), and will be rescaled according to the note (or breakpoint) velocity.
				Defaults to 2.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="2." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Duration Line Width" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="dynamicscolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Dynamics Color
			</digest>
			<description>
				Sets the color of dynamics, in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Dynamics Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="dynamicsexprfontsize" get="1" set="1" type="float" size="1">
			<digest>
				Dynamics Expressions Font Size
			</digest>
			<description>
				Sets the font size of dynamic-like textual expressions (rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="12" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Dynamics Expressions Font Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="dynamicsfontsize" get="1" set="1" type="float" size="1">
			<digest>
				Dynamics Font Size
			</digest>
			<description>
				Sets the font size of dynamics (rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="24" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Dynamics Font Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="dynamicsoutputmode" get="1" set="1" type="int" size="1">
			<digest>
				Dynamics Output Mode
			</digest>
			<description>
				Sets the way in which information in slots of type dynamics is output (N.B.: this does not affect the
				behavior at input, since in this case all syntaxes are supported):
				0 = Plain: dynamics are output as a plain list. Manual positioning are obtained by
				having dynamic markings preceded by a
				floating point number (the relative positioning, between 0 and 1); breakpoint attachments are signaled with symbols bearing the
				breakpoint index preceded by '@' (e.g. "@3"). This is the most humanly readable option; <br />
				1 = Structured: syntax is an llll containing the information structured in an llll; each dynamic marking is represented by
				an llll, whose form depends on the attachment mode. If the marking attachment is "auto", then the form is
				<b>[auto <m>dynamic_marking</m> <m>hairpin_to_next</m>]</b>; if the marking attachment is "manual", then the form is
				<b>[<m>relative_position</m> <m>dynamic_marking</m> <m>hairpin_to_next</m>]</b>; if the marking attachment is "breakpoint", then
				the form is
				<b>[[breakpoint <m>breakpoint_index</m>] <m>dynamic_marking</m> <m>hairpin_to_next</m>]</b>.
				This option is useful when you prefer to handle lllls, but, differently from the following one, it only bears
				the minimum amount of information to assign the dynamics correctly (e.g.: no need for a relative position if we are attaching
				the dynamic to a breakpoint); <br />
				2 = Full (default): syntax is an llll containing, but always output all the information,
				as a sequence of dynamic markings each represented
				by an llll in the form
				<b>[[<m>attachment_mode</m> <m>breakpoint_attachment</m> <m>relative_position</m>] <m>dynamic_marking</m> <m>hairpin_to_next</m>]</b>.
				If a dynamic marking is set to be attached to a breakpoint ("breakpoint" attachment mode),
				both the breakpoint number and the relative position of the breakpoint are correctly output.
				If the attachment mode is "manual" or "auto", then <m>breakpoint_attachment</m> is meaningless (and left to 0),
				but in both cases the <m>relative_position</m> is correct.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Dynamics Output Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="dynamicsvadj" get="1" set="1" type="float" size="1">
			<digest>
				Dynamics Vertical Adjustment
			</digest>
			<description>
				Sets the vertical shift (in pixels, rescaled depending on the <m>vzoom</m>) of the
				dynamics display. 0 will set the dynamics line coinciding with the bottommost staff line.
				The default is -20.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="-20" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Dynamics Vertical Adjustment" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="embed" get="1" set="1" type="int" size="1">
			<digest>
				Save Data With Patcher
			</digest>
			<description>
				Toggles the ability to save the notation object content within the patch.
				By default this is active.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Save Data With Patcher" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="enhancedstems" get="1" set="1" type="int" size="1">
			<digest>
				Enhanced Stem Display
			</digest>
			<description>
				Toggle a neater display for stems, but this means at the same time that vertical alignment of
				synchronous notes might be less precise.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Enhanced Stem Display" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="enharmonictable" get="1" set="1" type="sym_array" size="0">
			<digest>
				Custom Enharmonic Table
			</digest>
			<description>
				An enharmonic table is a string of elements defining the accidentals to be used for each step of the chromatic scale.
				A symbol for each voice (containing such string of characters) is expected. If less symbols than the number of voices
				are defined, the last one is padded.
				The number of elements in the string depends on the <m>tonedivision</m>; more precisely it is the <m>tonedivision</m> multiplied by 6.
				Standard case is <m>tonedivision</m> = 2, and thus the full 12 steps must be defined.
				Elements are sequencies of characters associated to accidentals.
				For instance "bb" is associated to a double flat, while "#+" is associated to a three quarter tones sharp.
				Such elements are to be separated by white spaces. For instance, if <m>tonedivision</m> is 12, a string like
				<b>enharmonictable "n # n b n n b n b n b x"</b> says that the C must be represented as natural, the note above will
				be a C# (and not a Db), the one above a D natural, the one above a Eb (and not a D#), and so on. Last note says that
				the B will actually be a Ax (A double diesis). <br />
				In the bach environment, accidentals can be written or output as ascii using the following symbols: <br />
				# for stanard 1/2 tone sharp <br />
				b for stanard 1/2 tone flat <br />
				x for stanard tone sharp <br />
				bb for stanard tone flat <br />
				+ for 1/4 tone sharp; <br />
				d or - for 1/4 tone flat; <br />
				#+ for 3/4 tone sharp; <br />
				db for 3/4 tone flat; <br />
				^ for 1/8 tone up; <br />
				v for 1/8 tone down. <br />
				Of course, these symbols can be combined, like in #+^ or dv.
				The 1/8 symbols are used also for smaller intervals (at output time).
				<br /> <br />
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="sym_array" size="0" value="default" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Custom Enharmonic Table" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text_large" />
			</attributelist>
		</attribute>
		<attribute name="fadedomain" get="1" set="1" type="int" size="1">
			<digest>
				Fade Domain Over Clefs
			</digest>
			<description>
				Toggles the ability to fade the portion of the score at left of the domain, near the clefs, with a transparency gradient
				(also see <m>highlightdomain</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Fade Domain Over Clefs" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="fontface" get="1" set="1" type="" size="1">
			<digest>
				
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="fontname" get="1" set="1" type="" size="1">
			<digest>
				
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="fontsize" get="1" set="1" type="" size="1">
			<digest>
				
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="grid" get="1" set="1" type="int" size="1">
			<digest>
				Show Grid
			</digest>
			<description>
				Toggles the display of the grid.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Grid" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="gridcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Grid Color
			</digest>
			<description>
				Sets the color of the main grid lines ("divisions") in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 0.3" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Grid Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="gridperiodms" get="1" set="1" type="float" size="1">
			<digest>
				Ruler/Grid Period (ms)
			</digest>
			<description>
				Sets the ruler and grid main period ("divisions"), in milliseconds. Defaults to 1000.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="1000" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Ruler/Grid Period (ms)" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="hidevoices" get="1" set="1" type="char_array" size="0">
			<digest>
				Hide Voices
			</digest>
			<description>
				Decide which voices must be shown or hidden. A list of 0/1 integers is expected, one for each voice.
				0 means that the voice is visibile, 1 means that it is hidden.
				If less symbols are entered, the other elements are considered to be 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="char_array" size="0" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Hide Voices" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="highlightdomain" get="1" set="1" type="int" size="1">
			<digest>
				Highlight Domain
			</digest>
			<description>
				Toggles the ability to highlight the domain with the <m>selectioncolor</m>. This is useful, for instance, in order to
				align other Max UI objects on the top of bach notation objects.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Highlight Domain" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="highlightplay" get="1" set="1" type="int" size="1">
			<digest>
				Highlight Played Notes
			</digest>
			<description>
				Toggle the ability to highlight the played notes with the <m>playcolor</m>.
				By default this is 0; if you turn it on be aware that it takes significant CPU time with scores with many notes.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Highlight Played Notes" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="inset" get="1" set="1" type="int" size="1">
			<digest>
				Border Inset
			</digest>
			<description>
				Sets the stafflines inset at left and right borders of notation object, in pixels (rescaled according to the
				<m>vzoom</m>). Defaults to 7.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="7" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Border Inset" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="jitmatrix" get="1" set="1" type="symbol" size="1">
			<digest>
				Mirror To Jitter Matrix
			</digest>
			<description>
				Sets the name of a jitter matrix to which the canvas should be mirrored
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Mirror To Jitter Matrix" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="keepselectioniflostfocus" get="1" set="1" type="int" size="1">
			<digest>
				Keep Selection If Lost Focus
			</digest>
			<description>
				Toggles the ability to keep the current selection when the object lose the focus.
				This defaults to 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Keep Selection If Lost Focus" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="keys" get="1" set="1" type="sym_array" size="0">
			<digest>
				Keys
			</digest>
			<description>
				Sets the key signatures. A list of symbols is expected, one symbol for each voice.
				If less symbols are entered, the last one is padded.
				The syntax for the single key signature must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>optional:mode</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Note names are allowed both in anglo-saxon (C, D, E...) and in latin (Do, Re, Mi) format. In both ways,
				they are case insensitive ("c" or "C", "do" or "DO" is the same). <br /> <br />
				Accidentals are defined as string of ASCII characters, each identifying one accidental.
				The list of allowed characters is the following one: <br />
				"n" = natural <br />
				"#" = sharp (+1/2 tone) <br />
				"x" = double sharp (+ 1 tone) <br />
				"+" = monesis = quarter sharp (+1/4 tone) <br />
				"^" = +1/8 tone <br />
				"b" = flat (-1/2 tone) <br />
				"d" or "-" = mobemol = quarter flat (-1/4 tone) <br />
				"v" = -1/8 tone <br />
				If no accidental is defined, the natural is used by default.
				<br /> <br />
				The mode can be either "M" (major) or "m" minor. If no mode is defined, the major is used by default.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="sym_array" size="0" value="CM" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Keys" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="keysigcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Key Signature Color
			</digest>
			<description>
				Sets the color of the key signature, in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Key Signature Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="labelfamilies" get="1" set="1" type="int" size="1">
			<digest>
				Show Label Families
			</digest>
			<description>
				Chooses the way in which elements bearing the same names should be visually tagged: <br />
				- None (default): don't show label families. <br />
				- Singleton: enclose each single notation item in a shape (circle for notes, rectangles for chords and measures)
				bearing the same color for each family. <br />
				- Bounding Box: enclose all items of a certain family in a rectangle bounding box. IMPORTANT: in this case,
				you might end up with having other notes (not belonging to that family) inside the bounding box. <br />
				- Venn: enclose families in an unique closed curve. This will usually work well if points are not too much scattered among other points.
				Notice that in this case, points not belonging to the label family lie outside the curve. BEW
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Label Families" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="legend" get="1" set="1" type="int" size="1">
			<digest>
				Show Legend
			</digest>
			<description>
				Chooses if and where the legend should be displayed:
				- Never: no legend is ever shown. <br />
				- Only For Selection: only selection legend is displayed. Selection legend is
				located in the upper left corner of the notation object, and is shown whenever a single
				notation item (e.g. a note) is selected. <br />
				- Always: in addition to selection legend, also the mouseover legend is displayed.
				Mouseover legend is located in the bottom right corner of the notation object, and is shown whenever the mouse
				moves over the notation object. <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Legend" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="legendcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Mouseover Legend Color
			</digest>
			<description>
				Sets the color of the mouseover legend (displayed at the bottom right corner of the notation object)
				in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.5 0.5 0.5 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Mouseover Legend Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="legendfontsize" get="1" set="1" type="float" size="1">
			<digest>
				Legend Font Size
			</digest>
			<description>
				Sets the font size of mouseover and selection legends (rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="13" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Legend Font Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linearedit" get="1" set="1" type="int" size="1">
			<digest>
				Allow Linear Editing
			</digest>
			<description>
				Toggles the ability to allow entering in the linear editing mode via <m>Ctrl</m>+clicking (mac)
				or <m>Shift</m>+<m>Ctrl</m>+clicking (win) on the staff.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Linear Editing" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="lineareditcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Edit Color
			</digest>
			<description>
				Sets the color corresponding to linear editing mode, in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.78 0.63 0.04 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Edit Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="linearedittimemultipliers" get="1" set="1" type="float_array" size="1">
			<digest>
				Linear Editing Time Multipliers
			</digest>
			<description>
				In linear editing, sets the array of 10 multipliers which will be assigned to keys 1 through 9 plus 0 (meaning 10), and which will be
				multiplied by the <m>linearedittimestep</m> in order to obtain the duration of a newly created note.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="float_array" size="1" value="1 2 3 4 5 6 7 8 9 10" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Linear Editing Time Multipliers" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linearedittimestep" get="1" set="1" type="float" size="1">
			<digest>
				Linear Editing Base Time Step
			</digest>
			<description>
				In linear editing, sets the base time step in milliseconds
				(corresponding by default to the duration associated with the key '1' and to the
				cursor time shifting obtained by using the left/right keyboard arrows).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="100" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Linear Editing Base Time Step" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linkannotationtoslot" get="1" set="1" type="int" size="1">
			<digest>
				Link Text Annotation To Slot
			</digest>
			<description>
				Sets the slot number of the slot whose content is to be displayed as annotation over the staff.
				0 (default) means: none.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Link Text Annotation To Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linkarticulationstoslot" get="1" set="1" type="int" size="1">
			<digest>
				Link Articulations To Slot
			</digest>
			<description>
				Sets the slot number of the slot (of type "articulations") whose content is linked with the articulations display.
				0 means: none.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Link Articulations To Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linkdlcolortoslot" get="1" set="1" type="int" size="1">
			<digest>
				Link Duration Line Color To Slot
			</digest>
			<description>
				Sets the slot number of the slot whose content is to be associated with the color
				of the corresponding duration line. An int, float, floatlist or color slot is expected. Int slots are mapped on default colors,
				float slots are mapped on the color spectrum, floatlist slots are interpreted as RGBA coordinates
				while color slots are simply taken as they are.
				0 (default) means: none.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Link Duration Line Color To Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linkdynamicstoslot" get="1" set="1" type="int" size="1">
			<digest>
				Link Dynamics To Slot
			</digest>
			<description>
				Sets the slot number of the slot whose content is to be displayed as dynamics under the staff.
				0 means: none.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Link Dynamics To Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linklyricstoslot" get="1" set="1" type="int" size="1">
			<digest>
				Link Lyrics To Slot
			</digest>
			<description>
				Sets the slot number of the slot whose content is to be displayed as lyrics.
				A text slot is expected.
				0 (default) means: none.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Link Lyrics To Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linknotecolortoslot" get="1" set="1" type="int" size="1">
			<digest>
				Link Note Color To Slot
			</digest>
			<description>
				Sets the slot number of the slot whose content must be linked to the note colors.
				An int, float, floatlist or color slot is expected. Int slots are mapped on default colors,
				float slots are mapped on the color spectrum, floatlist slots are interpreted as RGBA coordinates
				while color slots are simply taken as they are.
				0 (default) means: none.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Link Note Color To Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linknoteheadadjusttoslot" get="1" set="1" type="int" size="1">
			<digest>
				Link Note Head Adjust To Slot
			</digest>
			<description>
				Sets the slot number of the slot whose content is associated with noteheads
				horizontal and vertical adjustments. An intlist or floatlist slot is expected.
				0 (default) means: none.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Link Note Head Adjust To Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linknoteheadfonttoslot" get="1" set="1" type="int" size="1">
			<digest>
				Link Note Head Font To Slot
			</digest>
			<description>
				Sets the slot number of the slot whose content is the name of the font with which
				the note should be displayed. A text slot is expected.
				0 (default) means: none.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Link Note Head Font To Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linknoteheadtoslot" get="1" set="1" type="int" size="1">
			<digest>
				Link Note Head To Slot
			</digest>
			<description>
				Sets the slot number of the slot whose content is to be associated with the notehead
				characters of each note. A slot of type "notehead" (or, for backward compatibility, "int") is expected.
				0 means: none.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Link Note Head To Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linknotesizetoslot" get="1" set="1" type="int" size="1">
			<digest>
				Link Note Size To Slot
			</digest>
			<description>
				Sets the slot number of the slot whose content is linked with a note size factor,
				as a percentage (100 being the usual size). A float slot is expected (to change both note
				and accidentals size at the same time), or also a floatlist slot can be used, in which case
				two factor are expected: one for the note size and one for the accidentals size.
				0 (default) means: none.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Link Note Size To Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="lockcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Lock Color
			</digest>
			<description>
				Sets the color of locked items in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.83 0.04 0.04 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Lock Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="loop" get="1" set="1" type="llll" size="1">
			<digest>
				Loop Region
			</digest>
			<description>
				Sets the loop region. Two numbers are expected: the starting and ending points of the loop region,
				in milliseconds. You can substitute to the first number the "start" symbol to have the loop region start from the beginning (equivalent to 0).
				You can substitute to the second number the "end" symbol to have the loop region last till the end of the <o>bach.roll</o>.
				You can simply set a <b>loop all</b> to loop the entire <o>bach.roll</o>.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Loop Region" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text_large" />
			</attributelist>
		</attribute>
		<attribute name="loopcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Loop Color
			</digest>
			<description>
				Sets the color of the loop region in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.68 0.48 0.69 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Loop Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="lyricsalignment" get="1" set="1" type="int" size="1">
			<digest>
				Lyrics Alignment
			</digest>
			<description>
				Sets how the lyrics syllables must be aligned with respect to the chord to which they refer.
				Possibilities are: "Auto", "Left", "Center", "Right". Currently "Auto" completely coincides with "Center",
				but it might be improved in a future version.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Lyrics Alignment" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="lyricscolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Lyrics Color
			</digest>
			<description>
				Sets the color of lyrics in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Lyrics Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="lyricsfont" get="1" set="1" type="symbol" size="1">
			<digest>
				Lyrics Font
			</digest>
			<description>
				@description Sets the font used to display lyrics (default is Arial).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="symbol" size="1" value="Arial" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Lyrics Font" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="font" />
			</attributelist>
		</attribute>
		<attribute name="lyricsfontsize" get="1" set="1" type="float" size="1">
			<digest>
				Lyrics Font Size
			</digest>
			<description>
				Sets the font size of lyrics (rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="12" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Lyrics Font Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="lyricsvadj" get="1" set="1" type="float" size="1">
			<digest>
				Lyrics Vertical Adjustment
			</digest>
			<description>
				Sets the vertical shift (in pixels, rescaled depending on the <m>vzoom</m>) of the
				lyrics display. 0 will set the lyrics top line coinciding with the bottommost staff line.
				The default is -16.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="-16" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Lyrics Vertical Adjustment" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="markersfont" get="1" set="1" type="symbol" size="1">
			<digest>
				Markers Font
			</digest>
			<description>
				Sets the font size of markers
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="symbol" size="1" value="Arial" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Markers Font" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="font" />
			</attributelist>
		</attribute>
		<attribute name="markersfontsize" get="1" set="1" type="float" size="1">
			<digest>
				Markers Font Size
			</digest>
			<description>
				Sets the font size of marker names (rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="9" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Markers Font Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxundosteps" get="1" set="1" type="atom" size="1">
			<digest>
				Maximum Number Of Undo Steps
			</digest>
			<description>
				Sets the maximum number of undo steps. 0 means that undo/redo system will be made inactive.
				The "inf" symbol means unlimited undo steps.
				Defaults to 50. You should change it to 0 if you perform heavy operations in real-time.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="atom" size="1" value="50" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Number Of Undo Steps" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="midichannels" get="1" set="1" type="int_array" size="0">
			<digest>
				MIDI Channels
			</digest>
			<description>
				Sets the MIDI channels, which are a property of voices: a list with one integer for each voice is expected.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int_array" size="0" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="MIDI Channels" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="minlength" get="1" set="1" type="float" size="1">
			<digest>
				Minimum Length In Milliseconds
			</digest>
			<description>
				Sets a minimum length, so that scores having less than the defined length will still be displayed with a scrollbar
				until the defined minimum length.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Minimum Length In Milliseconds" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="mousehover" get="1" set="1" type="int" size="1">
			<digest>
				Allow Mouse Hovering
			</digest>
			<description>
				Toggles mouse hovering capabilities.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Mouse Hovering" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="mutecolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Mute Color
			</digest>
			<description>
				Sets the color of muted items in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.29 0.29 0.72 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Mute Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="nonantialiasedstafflines" get="1" set="1" type="int" size="1">
			<digest>
				Only Non-Antialiased Staff
			</digest>
			<description>
				Toggles the ability to force stafflines to precisely lie on pixels on the screen.
				If this attribute is 1, the <m>vzoom</m> attribute will be snapped to the closest value allowing stafflines to be drawn
				precisely on a pixel row. This also means that the staffline-to-staffline distance is an integer (e.g. 4 pixels).
				If this attribute is 0, all <m>vzoom</m> values are possible, and stafflines will be displayed
				with any floating-point distance the <m>vzoom</m> will require.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Only Non-Antialiased Staff" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="notationfont" get="1" set="1" type="symbol" size="1">
			<digest>
				Notation Font
			</digest>
			<description>
				@description Sets the font used to display all notation elements except accidentals.
				The official notation bach font is "November for bach", created by Robert Piéchaud (www.poeticprocessing.net) and
				automatically loaded at bach startup. "November for bach" is a light version of the famous November font.
				The full November font covers a wide range of music symbols, from Renaissance to the XXI century, and gives a unique,
				warm and lively look to your music scores. It is fully compatible with Finale, Sibelius and other notation softwares.
				You can purchase November from this web address: www.klemm-music.de/notation/november/.
				Other supported fonts are: Boulez, Maestro, Petrucci, Engraver Font Set.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="symbol" size="1" value="\" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Notation Font" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="font" />
			</attributelist>
		</attribute>
		<attribute name="notecolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Note Color
			</digest>
			<description>
				Sets the color (in RGBA format) of noteheads, duration lines, note tails, rests, etc.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Note Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="notifycontinuously" get="1" set="1" type="int" size="1">
			<digest>
				Notify Continuously
			</digest>
			<description>
				Toggles the ability to notify continuously via the last outlet
				while the mouse is down and dragging something. Also the <m>automessage</m>, if any, is sent continuously.
				This defaults to 0.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Notification" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Notify Continuously" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="notifymessages" get="1" set="1" type="int" size="1">
			<digest>
				Notifications When Changed Via Messages
			</digest>
			<description>
				Toggles the ability to send notifications caused by actions coming from messages, and not only from the interface.
				For instance, a <m>inscreenpos</m> message will toggle a <m>domain</m> notification, and so on.
				By default this is inactive.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Notification" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Notifications When Changed Via Messages" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="notifypaint" get="1" set="1" type="int" size="1">
			<digest>
				Notifications When Display Is Refreshed
			</digest>
			<description>
				Toggles the ability to send a notification (in the form of the "painted" symbol) from the playout
				whenever the object display is refreshed (repainted). Beware: this could be CPU consuming.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Notification" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Notifications When Display Is Refreshed" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="notifywith" get="1" set="1" type="int" size="1">
			<digest>
				Notify Interface Changes Via
			</digest>
			<description>
				Chooses the notification type for interface changes: <br />
				- 0 (bang, default): the simplest and less CPU-consuming alternative, only notifies with a bang when anything changes; <br />
				- 1 (Operation): notify with an operation label; <br />
				- 2 (Redo Transaction): notify verbosely with the operation label plus a sequence of change messages ('ticks') encapsulated
				in a transaction (set of instructions across which orders are not refreshed).
				This is the message you can directly provide to another notation object in order to reproduce the same effect; <br />
				- 3 (Undo Data): same as the previous, but providing undo information instead.
				- 4 (Redo Data): same as "Redo Transaction" but without the encapsulation, so the notification is a sequence of individual ticks (with a
				starting operation label).
				The practical difference between "Redo Transaction" and "Redo Data" is not just the leading "transaction" symbol, but more crucially
				the path of the items, which in this last case does indeed account for any update of chords/markers/notes order between the change ticks; <br />
				- 5 (Undo Data): same as the previous, but providing undo information instead. <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Notification" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Notify Interface Changes Via" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="numgridsubdivisions" get="1" set="1" type="int" size="1">
			<digest>
				Number of Ruler/Grid Subdivisions
			</digest>
			<description>
				Sets the number of subdivisions for each ruler and grid period. Defaults to 10.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="10" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number of Ruler/Grid Subdivisions" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="numparts" get="1" set="1" type="int_array" size="0">
			<digest>
				Number of Voices per Part
			</digest>
			<description>
				Sets the part grouping for voices, i.e. the lis.
				Voices can be assigned to the same staff via this <m>numparts</m> attribute. If multiple voices are assigned to the
				same staff, this staff is called a "staff ensemble".
				In this <m>numparts</m> attribute, each integer specifies the number of voices to be displayed on the same staff (or multistaff).
				For instance, if a score has 4 voices, assigning <m>parts</m> as <b>1 1 1 1</b>
				means that every voice ensemble (displayed staff) has a single voice - or, in other words, that every part is separate voice.
				If, on the other hand, one assigns <b>2 2</b> two staff ensembles are created: voices 1 and 2 are displayed on the same staff (or multistaff),
				and the same is true for voices 3 and 4. One might even set <b>4</b>
				to show all voices in a single staff or multistaff.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int_array" size="0" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number of Voices per Part" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="numvoices" get="1" set="1" type="int" size="1">
			<digest>
				Number Of Voices
			</digest>
			<description>
				Sets the number of voices of the notation object.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number Of Voices" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="outputpitchesgathered" get="1" set="1" type="int" size="1">
			<digest>
				Output Pitches In Gathered Syntax
			</digest>
			<description>
				Toggles the ability to output pitches, instead of MIDIcents, in the gathered syntax. <br />
				- Never: never output pitches (always output MIDIcents); <br />
				- When User-Defined: only output pitches when they are user-defined (otherwise output MIDIcents); <br />
				- Always: force output of pitches even when user only entered MIDIcents (displayed pitches are output).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Pitches" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Pitches In Gathered Syntax" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="outputpitchesplayout" get="1" set="1" type="int" size="1">
			<digest>
				Output Pitches In Playout Syntax
			</digest>
			<description>
				Toggles the ability to output pitches, instead of MIDIcents, in the playout syntax. <br />
				- Never: never output pitches (always output MIDIcents); <br />
				- When User-Defined: only output pitches when they are user-defined (otherwise output MIDIcents); <br />
				- Always: force output of pitches even when user only entered MIDIcents (displayed pitches are output).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Pitches" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Pitches In Playout Syntax" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="outputpitchesseparate" get="1" set="1" type="int" size="1">
			<digest>
				Output Pitches In Separate Syntax
			</digest>
			<description>
				Toggles the ability to output pitches, instead of MIDIcents, in the separate syntax. <br />
				- Never: never output pitches (always output MIDIcents); <br />
				- When User-Defined: only output pitches when they are user-defined (otherwise output MIDIcents); <br />
				- Always: force output of pitches even when user only entered MIDIcents (displayed pitches are output).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Pitches" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Pitches In Separate Syntax" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="outputslotnames" get="1" set="1" type="int" size="1">
			<digest>
				Output Slot Names From Playout
			</digest>
			<description>
				Toggles the ability to output slot names instead of slot numbers when slot information
				is sent through the playout.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Slot Names From Playout" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="pitcheditrange" get="1" set="1" type="llll" size="1">
			<digest>
				Constraint Pitches While Editing
			</digest>
			<description>
				Force edited pitches to lie in a given range, given by the specified llll.
				One sublist for each voice is expected. For any given voice, the sublist must be in one of the following forms: <br />
				- a plain llll specifies a list of allowed midicents, e.g. <b>[6000 6200 6400 6500 6700 6900 7100 7200]</b> will
				force edited notes to lie in the C major scale in middle octave; <br/>
				- a two-elements wrapped llll specifies a range of allowed midicents, e.g. <b>[[6000 7200]]</b> will do the same as above, but will also
				allow notes in principle to have any microtonal value such as 6050;<br/>
				- you can combine the two syntaxes to have the general one. For instance <b>[3600 4800 [6000 7200] 8400 9600]]</b> will
				force pitches to be in one of the specified C's or in the middle octave.<br/>
				Such list must be given for any voice. Use a <b>nil</b> or <b>[]</b> list to allow all possibilities for a voice.
				For instance: <b>pitchededitrange [7100] [[6000 7200]] []</b> will force first voice's edited notes to snap to 7100 mc (and no other note can be inserted or edited!),
				second voice's edited notes to lie in middle octave, and third voice's edited notes to assume any available pitch. <br />
				Note names (in latin or anglo-saxon syntax) can always be used instead of midicents.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Constraint Pitches While Editing" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text_large" />
			</attributelist>
		</attribute>
		<attribute name="playcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Play Color
			</digest>
			<description>
				Sets the color corresponding to notes being played, in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.34 0.87 0.20 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Play Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="playheaddragmode" get="1" set="1" type="int" size="1">
			<digest>
				Playhead Mousing Mode
			</digest>
			<description>
				Sets the way the playhead bar responds to mouse clicks. In Relative mode, the playhead keeps its relative
				position when one clicks - moving the mouse will shift the playhead to higher or lower temporal points in relation to the
				relative position. In Absolute mode (default), the playhead will automatically jump directly on the clicked location.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Playhead Mousing Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="playheadwidth" get="1" set="1" type="float" size="1">
			<digest>
				Playhead Width
			</digest>
			<description>
				Sets the playhead width in pixels.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Playhead Width" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="playmarkers" get="1" set="1" type="int" size="1">
			<digest>
				Play Markers
			</digest>
			<description>
				Toggle the ability to also send the marker information through the playout during the playback.
				By default this is 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Play Markers" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="playmode" get="1" set="1" type="int" size="1">
			<digest>
				Playout Mode
			</digest>
			<description>
				Sets the syntax of the content output from the playout: either a chordwise playout syntax,
				or a notewise playout syntax (default). <br />
				For <o>bach.roll</o>, the playout syntax is used whenever the information about a note or chord is sent through the playout (either at playtime
				or at offline play, or selection dump).
				The playout syntax is a slight variation of the standard chord gathered syntax. Two different cases apply, according to the <m>playmode</m>
				attribute value. If the <m>playmode</m> is set to Chordwise, the information about each chord is output in the form <br />
				<b>chord <m>voice_number</m> <m>MIDI_channel</m> [<m>onset</m> <m>NOTE1</m> <m>NOTE2</m> <m>NOTE3</m> <m>chord_flag</m>] </b> <br />
				where each <b><m>NOTE</m></b> is the gathered syntax of the note (see below).
				If the <m>playmode</m> is set to Notewise, information about each note is output as if the note were the only note in the chord, i.e. in the form <br />
				<b>note <m>voice_number</m> <m>MIDI_channel</m> [<m>onset</m> <m>NOTE</m> <m>chord_flag</m>] </b> <br />
				where <b><m>NOTE</m></b> is the note gathered syntax.
				The <m>MIDI_channels</m> is the one associated with the voice to which the note or chord belongs. The <m>onset</m> is in milliseconds,
				The <m>chord_flag</m> is a bitfield summing values of 1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				The playout syntax also concerns markers: they are output in the form: <b>marker <m>NAME_OR_NAMES</m> <m>onset_ms</m> <m>role</m> <m>optional:content</m></b>
				where the <m>NAME_OR_NAMES</m> is either a single atom (if the marker has a single name) or a wrapped plain llll containing the names, and the <m>optional:content</m>
				is only output if the marker role requires it.
				<br /> <br />
				In <o>bach.roll</o>, one can assign a role for each marker, so that they can represent elements such as
				time signatures, tempi, barline, measure divisions. Time signature markers and tempi markers
				also require a "content", i.e. an llll specifying the time signature or the tempo.
				When adding a marker via the <m>addmarker</m> message, the role can be specified as third parameter,
				and the content as fourth parameter. Alternatively, roles and content can be set via the marker inspector.
				Roles can be: <br />
				<m>Time Signature</m>: set by the symbol "timesig", it represents a time signature, and expects the time signature llll as content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo timesig [4 4]</b>.<br />
				<m>Tempo</m>: set by the symbol "tempo", it represents a time signature, and expects the tempo llll as content (tempo figure and tempo
				value). For instance, a message to add such a marker could be <b>addmarker 0 foo tempo [1/8 50]</b>, meaning
				that the tempo is 1/8 = 50.<br />
				<m>Measure Barlines</m>: set by the symbol "barline", it represents a barline, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo barline</b>. <br />
				<m>Measure Division</m>: set by the symbol "division", it represents a measure division, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo division</b>. <br />
				<m>Measure Subdivision</m>: set by the symbol "subdivision", it represents a measure subdivision, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo subdivision</b>. <br />
				All these marker can be parsed by bach.quantize in order to automatically retrieve the measureinfo of the
				entire bach.roll.
				<br /> <br />
				For <o>bach.roll</o>, the gathered syntax for any note is, in its simplest form <b>[<m>pitch_cents</m> <m>duration</m> <m>velocity</m> <m>note_flag</m>]</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>duration</m> is measured in milliseconds, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining
				graphics, pitch breakpoints, slots, names.
				Each of these specifications is done in the form <b>[<m>specification_name</m> <m>SPECIFICATION CONTENT</m>]</b>, and must be put after the <m>velocity</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a note definition might have the form
				<b>[7300. 136. 127 [graphic 7400 -1/2] [slots [1 [0. 0. 0.] [0.294118 81.138889 0.] [0.294118 38.805556 0.] [1. 0. 0.]]] [name pippo] 0 ]</b>
				<br /> <br />
				Instead of MIDIcents (or cents), one can also instert pitches.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names are in anglo-saxon syntax ("C", "D", "E"...), and are case insentitive. Middle C is C5.
				They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>D#4</b>). <br />
				Accidentals are: <b>#</b> [sharp], <b>b</b> [flat], <b>x</b> [double sharp], <b>q</b> [quartertone sharp], <b>d</b> (quartertone flat),
				<b>^</b> [eighth-tone sharp], <b>v</b> (eighth-tone flat)
				One can also extend the accidental by setting a rational specification followed by a <b>t</b>. For instance <b>C5+1/16t</b> is
				middle C, 1/16 tone up.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>[name john george]</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>[name [high 1] [low 2]]</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Playout Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="playoutfullpath" get="1" set="1" type="int" size="1">
			<digest>
				Full Path In Playout Syntax
			</digest>
			<description>
				Toggle the ability to output from the playout, instead of the voice number, the full path
				to get to the played element.
				The playout syntax normally has as first element the voice number of the output item (note or chord).
				By default this attribute is 0, and the simple voice number is output as first element. <br />
				If this flag is active, for <o>bach.roll</o>, the voice number is substituted with the list
				<b>[<m>voice_number</m> <m>chord_index</m>]</b>, if the <m>playmode</m> is chord-wise, or
				<b>[<m>voice_number</m> <m>chord_index</m> <m>note_index</m>]</b>, if the <m>playmode</m> is note-wise.
				The <m>chord_index</m> is the index of the chord, when ordered by onsets. The <m>note_index</m> is the
				index of the note (from the lowest to highest one).
				For instance, instead of <b>note 1 1 [...]</b> one might have <b>note [1 4 2] 1 [...]</b>, meaning that
				the output information concerns the 2nd note of 4th chord of 1st voice.
				Voice is anyway always the first element in the output llll. <br />
				If this flag is active, for <o>bach.score</o>, the voice number is substituted with a list of lists, namely
				<b>[<m>LIST1</m> <m>LIST2</m>...]</b>. The slightly complex form is due to the fact that
				tied notes or chords are output just once for all from the playout, so that each output element
				may be a combination of subsequently tied notes or chords. Each one of the <m>LIST</m>s represents one of these elements,
				and has the form
				<b>[<m>voice_number</m> <m>measure_number</m> <m>chord_index</m>]</b>, if the <m>playmode</m> is chord-wise, or
				<b>[<m>voice_number</m> <m>measure_number</m> <m>chord_index</m> <m>note_index</m>]</b>, if the <m>playmode</m> is note-wise.
				The <m>chord_index</m> is the index of the chord inside the measure. The <m>note_index</m> is the
				index of the note (from the lowest to highest one).
				For instance, instead of <b>note 1 1 [...]</b> one might have <b>note [[1 3 4 2] [1 4 1 3]] 1 [...]</b>,
				meaning that the output information concerns two notes: the 2nd note of 4th chord of 3rd measure of 1st voice,
				which is tied to the 3rd note of 1st chord of 4th measure of 1st voice.
				Voice is anyway always the first element in the output llll. <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Full Path In Playout Syntax" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="playpartialnotes" get="1" set="1" type="int" size="1">
			<digest>
				Play Partial Notes
			</digest>
			<description>
				Toggle the ability to play partial notes, when the playhead starts from a point where a note has
				already started but not yet ended. In this case, all temporal information (temporal slots, pitch breakpoints)
				is properly trimmed, and the corresponding partial note is played.
				By default this is 1 (quiet playing); if you set the attribute to 2 (verbosely), instead of the onset a
				llll in the form <b>[partial <m>original_onset</m> <m>played_onset</m> <m>offset</m>]</b> is output.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Play Partial Notes" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="playpollthrottle" get="1" set="1" type="int" size="1">
			<digest>
				Play Poll Throttle
			</digest>
			<description>
				Maximum number of synchronous notation items being output within the same scheduler event.
				Chords count as singles notation items (so if you have a chord with a large number of notes, this will still count as 1 notation item.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="10" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Play Poll Throttle" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="playrests" get="1" set="1" type="int" size="1">
			<digest>
				Play Rests
			</digest>
			<description>
				Toggles the ability to also play rests, having <b>rest</b> as symbol router for the playout llll.
				For <o>bach.roll</o>, the playout syntax is used whenever the information about a note or chord is sent through the playout (either at playtime
				or at offline play, or selection dump).
				The playout syntax is a slight variation of the standard chord gathered syntax. Two different cases apply, according to the <m>playmode</m>
				attribute value. If the <m>playmode</m> is set to Chordwise, the information about each chord is output in the form <br />
				<b>chord <m>voice_number</m> <m>MIDI_channel</m> [<m>onset</m> <m>NOTE1</m> <m>NOTE2</m> <m>NOTE3</m> <m>chord_flag</m>] </b> <br />
				where each <b><m>NOTE</m></b> is the gathered syntax of the note (see below).
				If the <m>playmode</m> is set to Notewise, information about each note is output as if the note were the only note in the chord, i.e. in the form <br />
				<b>note <m>voice_number</m> <m>MIDI_channel</m> [<m>onset</m> <m>NOTE</m> <m>chord_flag</m>] </b> <br />
				where <b><m>NOTE</m></b> is the note gathered syntax.
				The <m>MIDI_channels</m> is the one associated with the voice to which the note or chord belongs. The <m>onset</m> is in milliseconds,
				The <m>chord_flag</m> is a bitfield summing values of 1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				The playout syntax also concerns markers: they are output in the form: <b>marker <m>NAME_OR_NAMES</m> <m>onset_ms</m> <m>role</m> <m>optional:content</m></b>
				where the <m>NAME_OR_NAMES</m> is either a single atom (if the marker has a single name) or a wrapped plain llll containing the names, and the <m>optional:content</m>
				is only output if the marker role requires it.
				<br /> <br />
				In <o>bach.roll</o>, one can assign a role for each marker, so that they can represent elements such as
				time signatures, tempi, barline, measure divisions. Time signature markers and tempi markers
				also require a "content", i.e. an llll specifying the time signature or the tempo.
				When adding a marker via the <m>addmarker</m> message, the role can be specified as third parameter,
				and the content as fourth parameter. Alternatively, roles and content can be set via the marker inspector.
				Roles can be: <br />
				<m>Time Signature</m>: set by the symbol "timesig", it represents a time signature, and expects the time signature llll as content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo timesig [4 4]</b>.<br />
				<m>Tempo</m>: set by the symbol "tempo", it represents a time signature, and expects the tempo llll as content (tempo figure and tempo
				value). For instance, a message to add such a marker could be <b>addmarker 0 foo tempo [1/8 50]</b>, meaning
				that the tempo is 1/8 = 50.<br />
				<m>Measure Barlines</m>: set by the symbol "barline", it represents a barline, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo barline</b>. <br />
				<m>Measure Division</m>: set by the symbol "division", it represents a measure division, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo division</b>. <br />
				<m>Measure Subdivision</m>: set by the symbol "subdivision", it represents a measure subdivision, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo subdivision</b>. <br />
				All these marker can be parsed by bach.quantize in order to automatically retrieve the measureinfo of the
				entire bach.roll.
				<br /> <br />
				For <o>bach.roll</o>, the gathered syntax for any note is, in its simplest form <b>[<m>pitch_cents</m> <m>duration</m> <m>velocity</m> <m>note_flag</m>]</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>duration</m> is measured in milliseconds, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining
				graphics, pitch breakpoints, slots, names.
				Each of these specifications is done in the form <b>[<m>specification_name</m> <m>SPECIFICATION CONTENT</m>]</b>, and must be put after the <m>velocity</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a note definition might have the form
				<b>[7300. 136. 127 [graphic 7400 -1/2] [slots [1 [0. 0. 0.] [0.294118 81.138889 0.] [0.294118 38.805556 0.] [1. 0. 0.]]] [name pippo] 0 ]</b>
				<br /> <br />
				Instead of MIDIcents (or cents), one can also instert pitches.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names are in anglo-saxon syntax ("C", "D", "E"...), and are case insentitive. Middle C is C5.
				They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>D#4</b>). <br />
				Accidentals are: <b>#</b> [sharp], <b>b</b> [flat], <b>x</b> [double sharp], <b>q</b> [quartertone sharp], <b>d</b> (quartertone flat),
				<b>^</b> [eighth-tone sharp], <b>v</b> (eighth-tone flat)
				One can also extend the accidental by setting a rational specification followed by a <b>t</b>. For instance <b>C5+1/16t</b> is
				middle C, 1/16 tone up.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>[name john george]</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>[name [high 1] [low 2]]</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Play Rests" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="playstep" get="1" set="1" type="float" size="1">
			<digest>
				Play Bar Average Step (ms)
			</digest>
			<description>
				Approximative step (in milliseconds) for playhead (and notation object) redraw.
				0 means that the score is redrawn at each scheduled event.
				The "approximative" adjective is due to the fact that we need an integer number of ticks
				between two scheduled events (e.g.: two subsequent chord onsets), so this might slightly
				vary in each scheduled interval
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="50" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Play Bar Average Step (ms)" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="playwhenlinearediting" get="1" set="1" type="int" size="1">
			<digest>
				Chord Playback While Linear Editing
			</digest>
			<description>
				Toggles the ability to output chords from the playout, while they are being inserted in the linear editing system.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Chord Playback While Linear Editing" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="popupmenuslots" get="1" set="1" type="int_array" size="0">
			<digest>
				Slots In Popup Menu
			</digest>
			<description>
				Sets the slots which should show up in the right-click (or two-fingers-tap) popup menu
				of a note. The attribute expects a list of integers, each representing a slot number.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Slots In Popup Menu" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="preventedit" get="1" set="1" type="atom_array" size="0">
			<digest>
				Prevent Editing For
			</digest>
			<description>
				Prevents the interface editing of the specified elements, specified via an llll. Somehow, this is a lock specified globally for given notation items or features.
				If the first symbol is a "-" (minus), the editing is prevented for any element or feature, except for the specified ones. <br />
				The llll must contain at its root level: <br />
				- either single symbols, with the items or features names to be completely "locked", e.g. <b>preventedit measure lyrics inspector</b> will prevent the editing of all measures
				(one cannot create, delete, modify them), lyrics, and will not allow the opening of the bach inspector; <br />
				- or lllls in the form <b>[<m>item_or_feature_name</m> <m>property1</m> <m>property2</m> <m>property3</m>...]</b>, where properties are symbols which restrict the locking
				only to a given aspect of the item or feature. For instance, <b>preventedit [measure create delete] [marker onset]</b> will prevent the creation and deletion of measures
				(but not their modification!), and will also prevent the movement of existing markers (but not the creation of new ones!). <br/>
				The two approaches. <br />
				Here is the complete list of symbols which can be used to define items and feature names; parentheses list symbols for the single properties which one can block for them: <br />
				notes (create, delete, onset, duration, pitch, velocity, modify), measures (create, delete, rhythmictree, modify), voice (create, delete, name, clef, key, position, modify),
				breakpoints (create, delete, onset, pitch, velocity, modify), tempi (create, delete, modify), slots, markers (create, delete, onset, name, modify), articulations (create, delete),
				selection, zooming, dilationrectangle, groups, inspector, popup, slotinfo, lyrics, cursor, loop, scrollbar, drop. <br />
				The "modify" symbol only refers to modification different from the previously defined ones. For instance: <b>preventedit [breakpoints modify]</b> will not
				prevent the modification of breakpoints onsets, but will, as an example, prevent the modification of breakpoints slopes. Use <b>preventedit [breakpoints onset modify]</b> to do both.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Prevent Editing For" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="rightclickslot" get="1" set="1" type="int" size="1">
			<digest>
				Right Click Directly Pops Out Slot
			</digest>
			<description>
				Sets the number of the slot whose window should automatically popup when a
				right-click (or a two-fingers-tap) is performed on a notehead. 0 (default) means: none
				(in which case the usual contextual menu pops up).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Right Click Directly Pops Out Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="ruler" get="1" set="1" type="int" size="1">
			<digest>
				Show Ruler
			</digest>
			<description>
				Toggles the display of the ruler. Four options are possible: <br />
				- Never: ruler is not shown. <br />
				- Above: ruler is shown on the upper border of the notation object. <br />
				- Below: ruler is shown on the lower border of the notation object. <br />
				- Both: ruler is shown on both upper and lower borders of the notation object.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Ruler" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="rulercolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Ruler Color
			</digest>
			<description>
				Sets the color of the ruler in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Ruler Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="rulerlabels" get="1" set="1" type="int" size="1">
			<digest>
				Show Ruler Labels
			</digest>
			<description>
				Toggles the display of the ruler labels.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Ruler Labels" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="rulerlabelsfontsize" get="1" set="1" type="float" size="1">
			<digest>
				Ruler Labels Font Size
			</digest>
			<description>
				Sets the font size of ruler labels (rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="8" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Ruler Labels Font Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="rulermode" get="1" set="1" type="int" size="1">
			<digest>
				Ruler/Grid Mode
			</digest>
			<description>
				Sets the ruler mode: either a "fixed" mode, where division and subdivisions are fixed independently from
				the horizontal zoom, or a "smart" mode, where divisions and subdivisions are automatically computed depending on the
				current level of horizontal zoom.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Ruler/Grid Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="samplingrate" get="1" set="1" type="float" size="1">
			<digest>
				Sampling Rate (For Filter Slots)
			</digest>
			<description>
				Sets the currentl sampling rate. "Manually" setting the sampling rate
				is necessary for a proper handling of the filter slots. No object in the bach library is a
				DSP objects, so this information should be set "by hand" (it could easily come from <o>dspstatus~</o>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="44100" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Sampling Rate (For Filter Slots)" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="scrollbarcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Scrollbar Color
			</digest>
			<description>
				Sets the color of the scrollbars in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.3 0.3 0.3 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Scrollbar Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="selectedlegendcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Selection Legend Color
			</digest>
			<description>
				Sets the color of the selection legend (displayed at the top left corner of the notation object,
				when one clicks on a notation item) in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.2 0.2 0.2 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Selection Legend Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="selectioncolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Selection Color
			</digest>
			<description>
				Sets the color of each selected notehead, accidental, duration line and note tail in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.8 0. 0.8 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Selection Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="senddoneafterpaint" get="1" set="1" type="int" size="1">
			<digest>
				Send 'Done' Only After Paint
			</digest>
			<description>
				If this is 1, the <m>done</m> notification is not sent when the content has been loaded or built,
				but after the content has been painted (which, in general, is later: paint is done at low priority). This is handy
				if you need to retrieve appearance data (such as pixel position) which is computed inside the paint method, and not
				when the object is loaded. If this is 0, on the other hand, the notification is sent right after the content has been loaded
				or built, and you have no guarantee that the display data will be correct when the notification is sent.
				By default this is 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Send 'Done' Only After Paint" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="senddoneatstartup" get="1" set="1" type="int" size="1">
			<digest>
				Send 'Done' At Startup (If Data Was Saved)
			</digest>
			<description>
				Toggles the ability to send a <m>done</m> notification through the playout (or the notification outlet
				for <o>bach.slot</o>) at the object instantiation, if content saved with the object is loaded.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Send 'Done' At Startup (If Data Was Saved)" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showaccidentalspreferences" get="1" set="1" type="int" size="1">
			<digest>
				Display Accidentals
			</digest>
			<description>
				Handles the display of accidentals: <br />
				- Classically (default): for <o>bach.score</o>: accidentals are displayed classically, i.e. on the first (altered) note requiring them,
				and them never for any other note inside the same measure (but cautionary accidentals are possible: see the attribute <m>cautionaryaccidentals</m>);
				for <o>bach.roll</o>: this coincides with Altered Note (No Naturals) (see below). <br />
				- Always: accidentals are always displayed for all altered and naturals notes. <br />
				- Altered Notes: accidentals are always displayed for any altered note. Natural signs are preserved for notes which have to cancel such accidental. <br />
				- Altered Notes (No Repetition): accidentals are always displayed for any altered note, but dropped for immediate repetitions of the same note. <br />
				- Altered Note (No Naturals): accidentals are always displayed for any altered note, and natural signs are dropped for notes having to cancel such accidentals.
				In this case all non-natural notes have their accidental, and all natural notes have no accidental. <br />
				- Never: accidentals are never shown (always hidden). <br />
				IMPORTANT: be aware of the fact that, due to the cross dependencies between accidentals, in <o>bach.roll</o> the "Altered Notes"
				"Altered Notes (No Repetition)" configurations can be sensibly slower than any other any other configuration
				(<o>bach.score</o>, on the other hand, does not suffer from this issue).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Notation" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Display Accidentals" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="showannotations" get="1" set="1" type="int" size="1">
			<digest>
				Show Text Annotations
			</digest>
			<description>
				Toggles the display of annotations. Annotations are handled via slot linkage:
				pick a text slot and link it with "annotation".
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Text Annotations" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showarticulations" get="1" set="1" type="int" size="1">
			<digest>
				Show Articulations
			</digest>
			<description>
				Toggles the display of articulations. Articulations are handled via slot linkage:
				pick an articulations slot and link it with "articulations".
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Articulations" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showarticulationsextensions" get="1" set="1" type="int" size="1">
			<digest>
				Show Articulations Extensions
			</digest>
			<description>
				Toggles the display of articulation extensions (such as trill lines).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Articulations Extensions" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showauxclefs" get="1" set="1" type="int" size="1">
			<digest>
				Show Auxiliary Clefs In Combinations
			</digest>
			<description>
				Toggles the display of 15ma and/or 15vb clefs in voices with <m>clefs</m> combinations
				such as <b>FFGG</b>, <b>FGG</b>, <b>FFG</b>, etc.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Auxiliary Clefs In Combinations" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showborder" get="1" set="1" type="int" size="1">
			<digest>
				Show Border
			</digest>
			<description>
				Toggles the ability to display the object border.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Border" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showclefs" get="1" set="1" type="int" size="1">
			<digest>
				Show Clefs
			</digest>
			<description>
				Toggles the display of clefs.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Clefs" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showdurations" get="1" set="1" type="int" size="1">
			<digest>
				Show Duration Lines
			</digest>
			<description>
				Toggles the display of the duration lines.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Duration Lines" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showdynamics" get="1" set="1" type="int" size="1">
			<digest>
				Show Dynamics
			</digest>
			<description>
				Toggles the display of dynamics.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Dynamics" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showfocus" get="1" set="1" type="int" size="1">
			<digest>
				Show Object Focus
			</digest>
			<description>
				Toggles the display of a thicker border when the notation object has the focus.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Object Focus" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showgroups" get="1" set="1" type="int" size="1">
			<digest>
				Show Groups
			</digest>
			<description>
				Chooses how the chord grouping should be displayed: <br />
				- None: groups are not displayed in any way. <br />
				- Lines: groups are displayed by linking chord stems with dashed lines. <br />
				- Colors: groups are displayed by assigning to each group a particular color. <br />
				- Lines And Colors: both of the two previous devices are adopted. <br />
				- Beams (default): groups are shown by beaming their chords together.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="4" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Groups" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="showhairpins" get="1" set="1" type="int" size="1">
			<digest>
				Show Hairpins for Dynamics
			</digest>
			<description>
				Toggles the display of hairpins for dynamics.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Hairpins for Dynamics" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showledgerlines" get="1" set="1" type="int" size="1">
			<digest>
				Show Ledger Lines
			</digest>
			<description>
				Chooses how to display the ledger lines: <br />
				- Never: ledger lines are always hidden. <br />
				- Standard: the only displayed ledger lines are the one really needed to understand note positioning (i.e. ledger lines between main and auxiliary staves are hidden if not needed). <br />
				- Always Refer To Main Staves: always show all ledger lines, even between main and auxiliary staves.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Ledger Lines" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="showlockcolor" get="1" set="1" type="int" size="1">
			<digest>
				Show Lock Color
			</digest>
			<description>
				Chooses when the locked elements should be displayed with the color associated with the element locking
				(see the <m>lockcolor</m> attribute): <br />
				- Never: never use the <m>lockcolor</m>. <br />
				- When Selecteed: use the <m>lockcolor</m> only when elements are selected, instead of the <m>selectioncolor</m>. <br />
				- When Not Selected: use the <m>lockcolor</m> only when elements are not selected. <br />
				- Always: always use the <m>lockcolor</m>.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Lock Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="showloop" get="1" set="1" type="int" size="1">
			<digest>
				Show Loop Region
			</digest>
			<description>
				Toggles the display of the loop region.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Loop Region" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showlyrics" get="1" set="1" type="int" size="1">
			<digest>
				Show Lyrics
			</digest>
			<description>
				Toggles the display of lyrics.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Lyrics" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showmarkers" get="1" set="1" type="int" size="1">
			<digest>
				Show Markers
			</digest>
			<description>
				Toggles the display of markers.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Markers" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showmutecolor" get="1" set="1" type="int" size="1">
			<digest>
				Show Mute Color
			</digest>
			<description>
				Chooses when the muted elements should be displayed with the color associated with the element muting
				(see the <m>mutecolor</m> attribute): <br />
				- Never: never use the <m>mutecolor</m>. <br />
				- When Selecteed: use the <m>mutecolor</m> only when elements are selected, instead of the <m>selectioncolor</m>. <br />
				- When Not Selected: use the <m>mutecolor</m> only when elements are not selected. <br />
				- Always: always use the <m>mutecolor</m>.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Mute Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="shownotenames" get="1" set="1" type="int" size="1">
			<digest>
				Show Note Names In Selection Legend
			</digest>
			<description>
				Toggles the display of note names in the selection legend
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Note Names In Selection Legend" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showpartcolors" get="1" set="1" type="int" size="1">
			<digest>
				Show Part Colors
			</digest>
			<description>
				Toggles the display of different voice parts (see the <m>parts</m> attribute) with different colors.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Part Colors" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showplayhead" get="1" set="1" type="int" size="1">
			<digest>
				Show Playhead
			</digest>
			<description>
				Toggles the constant display of the playhead line (even while not playing).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Playhead" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showscrollbar" get="1" set="1" type="int" size="1">
			<digest>
				Show Horizontal Scrollbar If Needed
			</digest>
			<description>
				Toggles the display of the horizontal scrollbar, if needed.
				If unneeded, the scrollbar is not shown. By default this is 1: you should set it to 0 only
				if you want to always hide the horizontal scrollbar.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Horizontal Scrollbar If Needed" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showslotlabels" get="1" set="1" type="int" size="1">
			<digest>
				Show Slot Labels
			</digest>
			<description>
				Toggles the display of automatic labels for points in the function slots and for bars in the intlist or floatlist slots.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Slot Labels" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showslotlegend" get="1" set="1" type="int" size="1">
			<digest>
				Show Slot Legend
			</digest>
			<description>
				Toggles the ability to display the slot legend at the top right angle.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Slot Legend" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showslotnumbers" get="1" set="1" type="int" size="1">
			<digest>
				Show Slot Numbers In Slot Window
			</digest>
			<description>
				Toggles the display of slot numbers in the slot windows.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Slot Numbers In Slot Window" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showslurs" get="1" set="1" type="int" size="1">
			<digest>
				Show Slurs
			</digest>
			<description>
				Toggles the display of slurs.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Slurs" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showsolocolor" get="1" set="1" type="int" size="1">
			<digest>
				Show Solo Color
			</digest>
			<description>
				Chooses when the elements set as "solo" should be displayed with the color associated with the solo elements
				(see the <m>solocolor</m> attribute): <br />
				- Never: never use the <m>solocolor</m>. <br />
				- When Selecteed: use the <m>solocolor</m> only when elements are selected, instead of the <m>selectioncolor</m>. <br />
				- When Not Selected: use the <m>solocolor</m> only when elements are not selected. <br />
				- Always: always use the <m>solocolor</m>.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Solo Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="showstems" get="1" set="1" type="int" size="1">
			<digest>
				Show Stems
			</digest>
			<description>
				Toggles the display of the chord stems. Values are: 0 = don't show,
				1 = show main stem, 2 = show both main and auxiliary unison stems (default).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Stems" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="showtails" get="1" set="1" type="int" size="1">
			<digest>
				Show Note Tails
			</digest>
			<description>
				Toggles the display to display the note tails (this only works if <m>showdurations</m> is active.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Note Tails" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showvelocity" get="1" set="1" type="int" size="1">
			<digest>
				Show Velocity
			</digest>
			<description>
				Chooses the way in which velocities should be displayed: <br />
				- None (default): velocities are simply not displayed in any way. <br />
				- Colorscale: velocities are mapped on a color scale ranging from almost white (velocity = 1) to the ordinary <m>notecolor</m> (velocity 127). <br />
				- Colorspectrum: velocities are mapped on a spectrum of colors ranging from red (velocity = 1) to blue (velocity = 127). <br />
				- Alpha: velocities are mapped on a the transparency (alpha) channel, from 0 (velocity = 1, fully transparent) to 1 (velocity = 127, fully opaque). <br />
				- Duration Line Width: velocities are mapped on the width of the duration line, from almost 0 (velocity = 1, extremely thin) to the width defined
				via the attribute <m>durationlinewidth</m> (velocity = 127, maximum thickness). <br />
				- Notehead Size: velocities are mapped on the size of the notehead and accidentals, from the smallest size (velocity = 1) to the ordinary size (velocity = 127).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Velocity" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="showvoicenames" get="1" set="1" type="int" size="1">
			<digest>
				Show Voice Names
			</digest>
			<description>
				Toggles the display of voice names.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Voice Names" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showvscrollbar" get="1" set="1" type="int" size="1">
			<digest>
				Show Vertical Scrollbar If Needed
			</digest>
			<description>
				Toggles the display of the vertical scrollbar, if needed.
				If unneeded, the scrollbar is not shown. By default this is 1: you should set it to 0 only
				if you want to always hide the vertical scrollbar.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Vertical Scrollbar If Needed" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="slopemapping" get="1" set="1" type="int" size="1">
			<digest>
				Slope Mapping
			</digest>
			<description>
				Sets the function to be used for slope mapping: either bach (default) or Max.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Slope Mapping" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="slotfunctionptradius" get="1" set="1" type="float" size="1">
			<digest>
				Function Slot Point Radius
			</digest>
			<description>
				Sets the size of the radius of breakpoints inside slots of type function
				(rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="1.3" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Function Slot Point Radius" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="slotminimumwindowwidth" get="1" set="1" type="float" size="1">
			<digest>
				Minimum Slot Window Width
			</digest>
			<description>
				Sets the minimum width of a slot window.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Minimum Slot Window Width" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="slotwinalpha" get="1" set="1" type="float" size="1">
			<digest>
				Slot Window Opacity %
			</digest>
			<description>
				Sets the percentage of transparency of the slot windows (0 being completely transparent, 100
				being completely opaque.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="100" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Slot Window Opacity %" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="slotwinzoom" get="1" set="1" type="float" size="1">
			<digest>
				Zoom For Slot Window
			</digest>
			<description>
				Sets an independent zoom factor for slot windows. This factor is set as a percentage,
				100 corresponding to the default standard zoom.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="125" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Zoom For Slot Window" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="slursavoidaccidentals" get="1" set="1" type="int" size="1">
			<digest>
				Slurs Avoid Accidentals
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Slurs Avoid Accidentals" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="slursavoidchords" get="1" set="1" type="int" size="1">
			<digest>
				Slurs Avoid Chords
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Slurs Avoid Chords" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="smartmarkernames" get="1" set="1" type="int" size="1">
			<digest>
				Smart Marker Names Placement
			</digest>
			<description>
				Toggles the ability to display the marker names on multiple lines to avoid collisions.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Smart Marker Names Placement" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="snaplinearedit" get="1" set="1" type="int" size="1">
			<digest>
				Snap Linear Editing To Grid
			</digest>
			<description>
				Toggles the ability to automatically snap linear editing to the displayed grid
				(if any). By default this is on.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Snap Linear Editing To Grid" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="snapmarkers" get="1" set="1" type="int" size="1">
			<digest>
				Snap Markers To Grid When Editing
			</digest>
			<description>
				Toggles the ability to automatically snap the markers to the displayed grid
				(if any). By default this is off. When it is on, one can press the <m>Ctrl</m> key (mac) or <m>Shift+Ctrl</m> key (win)
				before releasing the mouse button in order to prevent snapping.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Snap Markers To Grid When Editing" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="snaponset" get="1" set="1" type="int" size="1">
			<digest>
				Snap Onset To Grid When Editing
			</digest>
			<description>
				Toggles the ability to automatically snap the onset of the edited chords and notes to the displayed grid
				(if any). By default this is off. When it is on, one can press the <m>Ctrl</m> key (mac) or <m>Shift+Ctrl</m> key (win)
				before releasing the mouse button in order to prevent snapping.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Snap Onset To Grid When Editing" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="snappitch" get="1" set="1" type="int" size="1">
			<digest>
				Snap Pitch To Grid When Editing
			</digest>
			<description>
				Toggles the ability to precisely snap the midicents of each edited note to the current
				microtonal grid. If this is active, not only the display but also the midicent values of the edited notes can only be
				one of the elements of the chosen temperament (see the <m>tonedivision</m> to know more about microtonal grids and temperaments).
				By default this is active.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Snap Pitch To Grid When Editing" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="snaptail" get="1" set="1" type="int" size="1">
			<digest>
				Snap Tail To Grid When Editing
			</digest>
			<description>
				Toggles the ability to automatically snap the tails of the edited chords and notes to the displayed grid
				(if any). By default this is off. When it is on, one can press the <m>Ctrl</m> key (mac) or <m>Shift+Ctrl</m> key (win)
				before releasing the mouse button in order to prevent snapping.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Snap Tail To Grid When Editing" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="solocolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Solo Color
			</digest>
			<description>
				Sets the color of items set as "solo" in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.61 0.61 0.21 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Solo Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="spacebarplay" get="1" set="1" type="int" size="1">
			<digest>
				Use Spacebar To Play
			</digest>
			<description>
				Toggles the ability to sequence events via the spacebar (see <m>keyboard</m> commands).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Use Spacebar To Play" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="staffcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Main Staff Color
			</digest>
			<description>
				Sets the color of the main staves (the ones always carring the clefs) in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Main Staff Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="stafflines" get="1" set="1" type="llll" size="1">
			<digest>
				Number Of Staff Lines
			</digest>
			<description>
				Sets the staff lines. An llll containing as many elements as the number of voices is expected,
				if less elements are input, the last one is padded.
				Each staff line element (for the given voice) can be either an integer number,
				representing the number of stafflines the voice will have (e.g. <b>3</b>, meaning: just 3 stafflines,
				located around the middle line of a standard 5-lines-staff), or an llll, containing the explicit
				indices of the lines to be displayed. In this case, 1 correspond to the bottommost staffline of
				the standard 5-lines-staff, 5 to the topmost one, and all other numbers work accordingly.
				Zero or negative indices are also allowed. For instance, <b>[0 5 6]</b> will set as stafflines the one below
				the bottommost default one, the topmost line of a default staff, and the one above.
				Use <b>0</b> or <b>nil</b> or <b>[]</b> to hide all the stafflines of a staff.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number Of Staff Lines" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text_large" />
			</attributelist>
		</attribute>
		<attribute name="stemcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Stem Color
			</digest>
			<description>
				Sets the color of chord stems, in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Stem Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="subdivisiongridcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Subdivision Grid Color
			</digest>
			<description>
				Sets the color of the each grid subdivision line in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 0.1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Subdivision Grid Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="thinannotations" get="1" set="1" type="int" size="1">
			<digest>
				Handle Annotation Duplicates
			</digest>
			<description>
				Decides what to do with identical annotations put on nearby chords. <br />
				0 = Keeps all the annotations; <br />
				1 = Removes all the duplicates; <br />
				2 = Removes all the duplicates and puts a symbol to clear the annotation at the end
				if no other annotation is present; <br />
				3 = Removes all the duplicates and puts a bracket.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Handle Annotation Duplicates" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="thinannotationsclearsym" get="1" set="1" type="symbol" size="1">
			<digest>
				Annotation Clearing Symbol
			</digest>
			<description>
				If <m>thinannotations</m> is set to 2 (Remove With Clearing Symbol), this attribute
				sets the clearing symbol to remove the annotation label.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="symbol" size="1" value="ord." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Annotation Clearing Symbol" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="tonedivision" get="1" set="1" type="int" size="1">
			<digest>
				Microtonal Division
			</digest>
			<description>
				In the bach environment, the tone division defines the microtonal accuracy of the symbolic representation,
				by representing the number of steps in which each tone is divided.
				For the standard semitonal representation (where just sharps and flats suffice), one can stick with
				<m>tonedivision</m> being 2, meaning: the tone is divided into two semitones.
				By increasing this value, the microtonal grid gets more dense: for instance, 4 is the quartertonal grid
				(where each tone is divided in 4 quartertones); 8 is the eight-tonal grid, and so on.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Microtonal Division" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="undobang" get="1" set="1" type="int" size="1">
			<digest>
				Send bang Upon Undo
			</digest>
			<description>
				Toggles the ability of send the bang through the rightmost outlet when an undo/redo action is performed.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Send bang Upon Undo" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="useloop" get="1" set="1" type="int" size="1">
			<digest>
				Activate Loop Region (When Shown)
			</digest>
			<description>
				Toggle the ability to use the loop region during the playback, if such region is shown (see the
				<m>showloop</m> attribute). If this is 1, and the loop region is shown, the playback will loop inside the region;
				otherwise, even if the loop region is shown, the playback will continue linearly, without looping. By default this is 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Activate Loop Region (When Shown)" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="verboseundo" get="1" set="1" type="int" size="1">
			<digest>
				Post Undo/Redo Steps
			</digest>
			<description>
				Toggles the ability of undo system to post the performed undo or redo steps in the Max window.
				By default this is inactive.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Post Undo/Redo Steps" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="voicenames" get="1" set="1" type="llll" size="1">
			<digest>
				Voice Names
			</digest>
			<description>
				Sets the voice names. An llll containing as many elements as the number of voices is expected,
				if less elements are input, the last one is padded.
				Each voice name can be either a single symbol, or a wrapped llll, for multiple naming (if you want to assign
				more than one name to the same voice).
				Use the <b>[]</b> or <b>nil</b> list to skip the naming for a voice.
				For instance: <b>voicenames Foo [John Ringo] [] "Electric Piano"</b> sets "Foo" as name for the first voice,
				sets both "John" and "Ringo" as names for the second one, leaves the third voice without name, and sets "Electric Piano"
				(as a single symbol) as name for the fourth voice.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Voice Names" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text_large" />
			</attributelist>
		</attribute>
		<attribute name="voicenamesalign" get="1" set="1" type="int" size="1">
			<digest>
				Voice Names Alignment
			</digest>
			<description>
				Sets the alignment for the voice names, at the beginning of the staff, with respect to all other
				voice names. Possibilities are: "Left", "Center", "Right".
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Voice Names Alignment" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="voicenamesfont" get="1" set="1" type="symbol" size="1">
			<digest>
				Voice Names Font
			</digest>
			<description>
				Sets the font size of voice names
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="symbol" size="1" value="Arial" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Voice Names Font" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="font" />
			</attributelist>
		</attribute>
		<attribute name="voicenamesfontsize" get="1" set="1" type="float" size="1">
			<digest>
				Voice Names Font Size
			</digest>
			<description>
				Sets the font size of voice names (rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="11" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Voice Names Font Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="voicespacing" get="1" set="1" type="float_array" size="0">
			<digest>
				Voice Spacing
			</digest>
			<description>
				Sets the spaces between voices. A list of floating numbers is expected, one more than the number of voices.
				Indeed the first number will correspond to the blank space above the first voice, the second one to the space
				between the first and second voice, and so on, till the last one which will correspond to the space below
				the last voice. Numbers are pixel distances (rescaled with respect to the <m>vzoom</m> attribute).
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Voice Spacing" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="vzoom" get="1" set="1" type="atom" size="1">
			<digest>
				Vertical Zoom %
			</digest>
			<description>
				Sets the vertical zoom percentage (<b>auto</b> being the default value).
				This factor is actually a global zoom factor, according to which every displayed element is rescaled.
				This means, for instance that the distance between elements (and not only the size of elements)
				changes as this <m>vzoom</m> is changed.
				A fixed value such as <m>100</m> will keep the global zoom fixed as the object vertical size changes.
				Use the <b>auto</b> symbol to link the vertical zoom to the object box height.
				In this case you can retrieve the vertical
				zoom via <m>getvzoom</m>.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="atom" size="1" value="Auto" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Vertical Zoom %" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="zoom" get="1" set="1" type="float" size="1">
			<digest>
				Horizontal Zoom %
			</digest>
			<description>
				Sets the horizontal zoom percentage (100 being the default value).
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="100." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Horizontal Zoom %" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.score" />
		<seealso name="bach.quantize" />
		<seealso name="bach.slot" />
		<seealso name="bach.score2roll" />
		<seealso name="bach.playkeys" />
		<seealso name="bach.slot2line" />
		<seealso name="bach.slot2curve" />
		<seealso name="bach.slot2filtercoeff" />
		<seealso name="bach.ezmidiplay" />
		<seealso name="bach.sliceheader" />
		<seealso name="bach.mono" />
		<seealso name="bach.transcribe" />
		<seealso name="01-Hello World" module="bach" type="tutorial" />
		<seealso name="04-Through The Looking Glass" module="bach" type="tutorial" />
		<seealso name="05-Slot Machines" module="bach" type="tutorial" />
		<seealso name="08-Real Time Stories" module="bach" type="tutorial" />
		<seealso name="10-The World Outside" module="bach" type="tutorial" />
		<seealso name="17-Lambda Scores" module="bach" type="tutorial" />
		<seealso name="18-Graphical Synchronization" module="bach" type="tutorial" />
		<seealso name="19-Filter Filter Little Star" module="bach" type="tutorial" />
		<seealso name="20-Edit Path" module="bach" type="tutorial" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll/bang)">
			<description>
				bang or llll containing gathered syntax of the entire object.
				See the <m>bang</m> and <m>llll</m> methods for more information.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Onsets (in milliseconds) in separate syntax..
				See the <m>llll</m> method for more information.
			</description>
		</entry>
		<entry name ="Inlet 3 (llll)">
			<description>
				Pitches or MIDIcents in separate syntax..
				See the <m>llll</m> method for more information.
			</description>
		</entry>
		<entry name ="Inlet 4 (llll)">
			<description>
				Durations (in milliseconds) in separate syntax.
				See the <m>llll</m> method for more information.
			</description>
		</entry>
		<entry name ="Inlet 5 (llll)">
			<description>
				Velocities (1 to 127) in separate syntax.
				See the <m>llll</m> method for more information.
			</description>
		</entry>
		<entry name ="Inlet 6 (llll)">
			<description>
				Extras in separate syntax.
				See the <m>llll</m> method for more information.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Whole object dump.
				The gathered syntax of the whole <o>bach.roll</o> (or a part of it, depending on the <m>dump</m> message arguments)
				is sent through this outlet. See the <m>dump</m> message to know more about the output syntax.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Onsets.
				The onsets (in milliseconds) in separate syntax.
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.roll</o>, onsets are the only parameter assigned chordwise (they are a propriety of chords, rather than notes).
				The separate syntax for onsets will be thus structured as: an llll for each voice, containing a value for each chord.
				For instance: <b>[0 1000 2000 3000] [100 400] [250 2500]</b>. <br />
				Cents, durations, velocities and extras are all assigned notewise in <o>bach.roll</o> (they are propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>[[6000] [6000 6400] [6200] [6200 6500]] [[7200] [6500 7200 7500]] [[5500] [5400]]</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.roll</o> can properly understand
				<b>[6000 [6000 6400] 6200 [6200 6500]] [[7200] [6500 7200 7500]] [5500 5400]</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut.
				<br /> <br />
			</description>
		</entry>
		<entry name ="Outlet 3 (llll)">
			<description>
				Pitches or MIDIcents.
				The pitches or MIDIcents in separate syntax (see <m>outputpitchesseparate</m>).
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.roll</o>, onsets are the only parameter assigned chordwise (they are a propriety of chords, rather than notes).
				The separate syntax for onsets will be thus structured as: an llll for each voice, containing a value for each chord.
				For instance: <b>[0 1000 2000 3000] [100 400] [250 2500]</b>. <br />
				Cents, durations, velocities and extras are all assigned notewise in <o>bach.roll</o> (they are propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>[[6000] [6000 6400] [6200] [6200 6500]] [[7200] [6500 7200 7500]] [[5500] [5400]]</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.roll</o> can properly understand
				<b>[6000 [6000 6400] 6200 [6200 6500]] [[7200] [6500 7200 7500]] [5500 5400]</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut.
				<br /> <br />
			</description>
		</entry>
		<entry name ="Outlet 4 (llll)">
			<description>
				Durations.
				The durations (in milliseconds) in separate syntax.
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.roll</o>, onsets are the only parameter assigned chordwise (they are a propriety of chords, rather than notes).
				The separate syntax for onsets will be thus structured as: an llll for each voice, containing a value for each chord.
				For instance: <b>[0 1000 2000 3000] [100 400] [250 2500]</b>. <br />
				Cents, durations, velocities and extras are all assigned notewise in <o>bach.roll</o> (they are propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>[[6000] [6000 6400] [6200] [6200 6500]] [[7200] [6500 7200 7500]] [[5500] [5400]]</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.roll</o> can properly understand
				<b>[6000 [6000 6400] 6200 [6200 6500]] [[7200] [6500 7200 7500]] [5500 5400]</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut.
				<br /> <br />
			</description>
		</entry>
		<entry name ="Outlet 5 (llll)">
			<description>
				Velocities.
				The velocities (1 to 127) in separate syntax.
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.roll</o>, onsets are the only parameter assigned chordwise (they are a propriety of chords, rather than notes).
				The separate syntax for onsets will be thus structured as: an llll for each voice, containing a value for each chord.
				For instance: <b>[0 1000 2000 3000] [100 400] [250 2500]</b>. <br />
				Cents, durations, velocities and extras are all assigned notewise in <o>bach.roll</o> (they are propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>[[6000] [6000 6400] [6200] [6200 6500]] [[7200] [6500 7200 7500]] [[5500] [5400]]</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.roll</o> can properly understand
				<b>[6000 [6000 6400] 6200 [6200 6500]] [[7200] [6500 7200 7500]] [5500 5400]</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut.
				<br /> <br />
			</description>
		</entry>
		<entry name ="Outlet 6 (llll)">
			<description>
				Extras.
				The extras in separate syntax.
				Extras are defined in the separate syntax via lllls sent through the Extras inlet, in the form
				<b>[<m>extra_name</m> <m>GLOBAL_CONTENT</m>] [<m>extra_name</m> <m>GLOBAL_CONTENT</m>]...</b>
				where each sublist is thus composed by a name (a symbol identifying the extra, one of the following: "graphics", "breakpoints", "slots")
				and a global content, which is just an llll structured exactly according to the object's hierarchy.
				This llll is no different than any other separate parameter llll (say: Cents), only instead of having a single element (number)
				for each note, an llll is given, specifying the content of the extra associated to each note
				(a level of parentheses is needed for each note). If this latter level is dropped, and the information concerns a rest, the extra is assigned to the
				rest, if applicable (e.g. slots).
				For instance, the pitch breakpoints specification for a given note may have the form
				<b>[[0. 0. 0.] [0.5 500 0.5] [1. 0. 0.]]</b>, whereas a complete list of extras to be introduced in the Extras inlet may have the form
				<b>(breakpoints (((( 0. 0. 0. ) (0.5 500 0.5) (1. 0. 0.)) (( 0. 0. 0. ) (0.5 -500 0.5) (1. 0. 0.))) ((( 0. 0. 0. ) (0.5 -200 0.1)
				(1. 0. 0.)))) (((( 0. 0. 0. ) (0.5 500 0.5) (1. 0. 0.))) ((( 0. 0. 0. ) (0.5 -200 0.1) (1. 0. 0.))))) (slots ( (((3 10 20 30) (4 0.4))
				((3 10 20 30) (4 0.1))) (())) ())</b>. Notes, chords or voices which don't need a given extras are allowed to be represented as input by
				an empty <b>[]</b> llll. <br />
				The content of each extra is exactly the same as the gathered syntax of such extra, provided that the starting symbol is dropped.
				For instance, instead of <b>[graphics 6200 -1/2]</b>, one should just have <b>[6200 -1/2]</b> as graphic content for a given note, and so on.
				The syntax for the gathered syntax of all extras is provided below. Remember to drop the extra router symbol to obtain the content
				to be put in the separate syntax llll. <br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>[articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>]</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
			</description>
		</entry>
		<entry name ="Outlet 7 (llll)">
			<description>
				Playout.
				Outlet sending information about elements being played, as well as query answers and notifications.
				For <o>bach.roll</o>, the playout syntax is used whenever the information about a note or chord is sent through the playout (either at playtime
				or at offline play, or selection dump).
				The playout syntax is a slight variation of the standard chord gathered syntax. Two different cases apply, according to the <m>playmode</m>
				attribute value. If the <m>playmode</m> is set to Chordwise, the information about each chord is output in the form <br />
				<b>chord <m>voice_number</m> <m>MIDI_channel</m> [<m>onset</m> <m>NOTE1</m> <m>NOTE2</m> <m>NOTE3</m> <m>chord_flag</m>] </b> <br />
				where each <b><m>NOTE</m></b> is the gathered syntax of the note (see below).
				If the <m>playmode</m> is set to Notewise, information about each note is output as if the note were the only note in the chord, i.e. in the form <br />
				<b>note <m>voice_number</m> <m>MIDI_channel</m> [<m>onset</m> <m>NOTE</m> <m>chord_flag</m>] </b> <br />
				where <b><m>NOTE</m></b> is the note gathered syntax.
				The <m>MIDI_channels</m> is the one associated with the voice to which the note or chord belongs. The <m>onset</m> is in milliseconds,
				The <m>chord_flag</m> is a bitfield summing values of 1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				The playout syntax also concerns markers: they are output in the form: <b>marker <m>NAME_OR_NAMES</m> <m>onset_ms</m> <m>role</m> <m>optional:content</m></b>
				where the <m>NAME_OR_NAMES</m> is either a single atom (if the marker has a single name) or a wrapped plain llll containing the names, and the <m>optional:content</m>
				is only output if the marker role requires it.
				<br /> <br />
				In <o>bach.roll</o>, one can assign a role for each marker, so that they can represent elements such as
				time signatures, tempi, barline, measure divisions. Time signature markers and tempi markers
				also require a "content", i.e. an llll specifying the time signature or the tempo.
				When adding a marker via the <m>addmarker</m> message, the role can be specified as third parameter,
				and the content as fourth parameter. Alternatively, roles and content can be set via the marker inspector.
				Roles can be: <br />
				<m>Time Signature</m>: set by the symbol "timesig", it represents a time signature, and expects the time signature llll as content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo timesig [4 4]</b>.<br />
				<m>Tempo</m>: set by the symbol "tempo", it represents a time signature, and expects the tempo llll as content (tempo figure and tempo
				value). For instance, a message to add such a marker could be <b>addmarker 0 foo tempo [1/8 50]</b>, meaning
				that the tempo is 1/8 = 50.<br />
				<m>Measure Barlines</m>: set by the symbol "barline", it represents a barline, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo barline</b>. <br />
				<m>Measure Division</m>: set by the symbol "division", it represents a measure division, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo division</b>. <br />
				<m>Measure Subdivision</m>: set by the symbol "subdivision", it represents a measure subdivision, and expects no content.
				For instance, a message to add such a marker could be <b>addmarker 0 foo subdivision</b>. <br />
				All these marker can be parsed by bach.quantize in order to automatically retrieve the measureinfo of the
				entire bach.roll.
				<br /> <br />
				For <o>bach.roll</o>, the gathered syntax for any note is, in its simplest form <b>[<m>pitch_cents</m> <m>duration</m> <m>velocity</m> <m>note_flag</m>]</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>duration</m> is measured in milliseconds, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining
				graphics, pitch breakpoints, slots, names.
				Each of these specifications is done in the form <b>[<m>specification_name</m> <m>SPECIFICATION CONTENT</m>]</b>, and must be put after the <m>velocity</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a note definition might have the form
				<b>[7300. 136. 127 [graphic 7400 -1/2] [slots [1 [0. 0. 0.] [0.294118 81.138889 0.] [0.294118 38.805556 0.] [1. 0. 0.]]] [name pippo] 0 ]</b>
				<br /> <br />
				Instead of MIDIcents (or cents), one can also instert pitches.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names are in anglo-saxon syntax ("C", "D", "E"...), and are case insentitive. Middle C is C5.
				They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>D#4</b>). <br />
				Accidentals are: <b>#</b> [sharp], <b>b</b> [flat], <b>x</b> [double sharp], <b>q</b> [quartertone sharp], <b>d</b> (quartertone flat),
				<b>^</b> [eighth-tone sharp], <b>v</b> (eighth-tone flat)
				One can also extend the accidental by setting a rational specification followed by a <b>t</b>. For instance <b>C5+1/16t</b> is
				middle C, 1/16 tone up.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>[<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>]</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>[graphics 6200 -1/2]</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>[<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...]</b>,
				where each <m>BPT</m> is an llll in the form <b>[<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>]</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>[1 <m>delta_midicents</m> <m>slope</m>]</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>[breakpoints [0 0 0] [0.5 200 0] [1 0 0.5]]</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>[slots <m>SLOT1</m> <m>SLOT2</m>...]</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>[<m>slot_number</m> <m>SLOT_CONTENT</m>]</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>[name <m>NAME_OR_LLLL_OF_NAMES</m>]</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>[name john george]</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>[name [high 1] [low 2]]</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
			</description>
		</entry>
		<entry name ="Outlet 8 (bang)">
			<description>
				bang when changed.
				This outlet sends a bang whenever any element has been changed via the interface.
			</description>
		</entry>
	</misc>

</c74object>