<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.istruct" module="bach" kind="patcher">

	<digest>
		Get the interval structure pitch-class set
	</digest>

	<description>
		Reports the interval structure of a pitch-class set, i.e. the list
		of distances between consecutive elements of the (looped) set.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach set theory</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Pitch-class set(s)
			</digest>
			<description>
				A complex tree of pitch-class sets is also accepted.
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Modulo
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Interval structure(s)
			</digest>
			<description>
				The interval structure of the incoming pitch-class set. If a complex tree of pitch-class sets was input,
				the output is a tree of interval structures, mirroring it in shape.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="modulo" optional="1" type="int">
			<digest>
				Modulo
			</digest>
			<description>
				In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
				points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
				<br /> <br />
			</description>
		</objarg>
		<objarg name="autosort" optional="1" type="int">
			<digest>
				Autosort
			</digest>
			<description>
				Sort automatically the points in the pitch-class set before reporting the interval structure (by default it is set).
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output the interval structure
			</digest>
			<description>
				Gets the interval structure of the most recently received input data.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Set modulo
			</digest>
			<description>
				An integer in the right inlet will set the modulo. <br />
				In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
				points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
				<br /> <br />
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Get interval structure of pitch-class set
			</digest>
			<description>
				In the first inlet, a pitch-class set will report its interval structure
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="autosort" get="1" set="1" type="int" size="1">
			<digest>
				Autosort
			</digest>
			<description>
				Sort automatically the points in the pitch-class set before reporting the interval structure (by default it is set).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Autosort" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		For instance, if modulo is 12 and the
		pitch-class set is <b>0 1 4 9</b>, distances are 1-0 = 1, 4-1 = 3, 9-4 = 5 and then we end the loop with
		0-9 = -9 = 3. Thus <b>1 3 5 9</b> is the interval structure of our pitch-class set.
		Of course this interval structure depends on the chosen modulo (for looping). <br /> <br />
		N.B.: Interval structure is a different concept than interval vector. Refer to <o>bach.ivec</o> if you
		were looking for it. <br /> <br />
		In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
		points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
		<br /> <br />
		A pitch-class set is a plain collection of pitch-classes. A pitch class is nothing but the representative of a set of pitches.
		Traditionally, it corresponds to the concept of "note", once we abstract it from its octave.
		For instance, the semitonal framework (when the modulo is 12), all the C belong to the same pitch-class
		which will be named 0 = {..., C-1, C0, C1, C2, C3, C4, C5, ...}. The pitch-class 1 will be the one containing all C#'s (or Db's); pitch-class
		2 will contain all D's, and so on. One will use to name pitch class numbers from 0 to the modulo - 1: indeed, with modulo = 12, pitch-class 12 will coincide
		with pitch-class 0 (it'll be the C one octave higher). One can thus think at pitch-classes as equally spaced points on a clock, and transposing
		means rotating them on the clock. A pitch class set is thus represented just by a plain list of pitch classes, such <b>0 4 7</b>, representing the
		C major chord. Notice that this coincides with any other representation such as <b>12 4 19</b> or <b>0 -8 -5</b>, but the canonical form, where numbers
		are from 0 to the modulo-1 is always preferred. Also for pitch-class sets the order of elements is immaterial, and thus
		<b>0 4 7</b> or <b>4 0 7</b> or <b>7 4 0</b> will all represent the same set.
		On the other hand a pitch-class (as an abstract concept) can be used to represent things other than pitches,
		as for instance temporal position in a rhythmic pattern (loop) having a certain number (the modulo) of equally spaced elements.
		<br /> <br />
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.primeform" />
		<seealso name="bach.circle" />
		<seealso name="bach.mod+" />
		<seealso name="bach.mod-" />
		<seealso name="bach.modtimes" />
		<seealso name="bach.period" />
		<seealso name="bach.ifunc" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				Pitch-class set(s).
				A complex tree of pitch-class sets is also accepted.
			</description>
		</entry>
		<entry name ="Inlet 2 (int)">
			<description>
				Modulo.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Interval structure(s).
				The interval structure of the incoming pitch-class set. If a complex tree of pitch-class sets was input,
				the output is a tree of interval structures, mirroring it in shape.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		For instance, if modulo is 12 and the
		pitch-class set is <b>0 1 4 9</b>, distances are 1-0 = 1, 4-1 = 3, 9-4 = 5 and then we end the loop with
		0-9 = -9 = 3. Thus <b>1 3 5 9</b> is the interval structure of our pitch-class set.
		Of course this interval structure depends on the chosen modulo (for looping). <br /> <br />
		N.B.: Interval structure is a different concept than interval vector. Refer to <o>bach.ivec</o> if you
		were looking for it. <br /> <br />
		In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
		points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
		<br /> <br />
		A pitch-class set is a plain collection of pitch-classes. A pitch class is nothing but the representative of a set of pitches.
		Traditionally, it corresponds to the concept of "note", once we abstract it from its octave.
		For instance, the semitonal framework (when the modulo is 12), all the C belong to the same pitch-class
		which will be named 0 = {..., C-1, C0, C1, C2, C3, C4, C5, ...}. The pitch-class 1 will be the one containing all C#'s (or Db's); pitch-class
		2 will contain all D's, and so on. One will use to name pitch class numbers from 0 to the modulo - 1: indeed, with modulo = 12, pitch-class 12 will coincide
		with pitch-class 0 (it'll be the C one octave higher). One can thus think at pitch-classes as equally spaced points on a clock, and transposing
		means rotating them on the clock. A pitch class set is thus represented just by a plain list of pitch classes, such <b>0 4 7</b>, representing the
		C major chord. Notice that this coincides with any other representation such as <b>12 4 19</b> or <b>0 -8 -5</b>, but the canonical form, where numbers
		are from 0 to the modulo-1 is always preferred. Also for pitch-class sets the order of elements is immaterial, and thus
		<b>0 4 7</b> or <b>4 0 7</b> or <b>7 4 0</b> will all represent the same set.
		On the other hand a pitch-class (as an abstract concept) can be used to represent things other than pitches,
		as for instance temporal position in a rhythmic pattern (loop) having a certain number (the modulo) of equally spaced elements.
		<br /> <br />
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
interval structure, interval, modulo, pitch-class, distance, element, loop.
			</description>
		</entry>
	</misc>

</c74object>