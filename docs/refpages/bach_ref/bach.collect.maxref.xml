<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.collect" module="bach">

	<digest>
		Collect elements into lllls
	</digest>

	<description>
		Groups together data it receives,
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Output the collected lllls
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Data to collect
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Navigate, clear and manage the collection structure
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Collected data
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="collectors" optional="1" type="int">
			<digest>
				Number of collectors (outlets and llll inlets)
			</digest>
			<description>
				A collector is an inlet/outlet couple, not unlike a distinct <o>bach.collect</o> object, with the exception that
				all the collectors of a single object have the same attributes, and receive the same navigation and output commands.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="all">
			<arg name="exclude_empty_collections" optional="1" type="int" />
			<digest>
				Output all the collections
			</digest>
			<description>
				Syntax: <b>all <m>[&lt;int: exclude_empty_collections&gt;]</m> </b><br />				<br />
				The message <m>all</m> in the first inlet outputs all the collections of each inlet as a single llll,
				each collection being assigned to a sublist.
				An optional non-zero argument will prevent empty collections from being included in the output llll.
			</description>
		</method>
		<method name="back">
			<arglist />
			<digest>
				Erase last element
			</digest>
			<description>
				The message <m>back</m> in the rightmost inlet erases the last element of the working level of the destination lllls.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Output the active collections
			</digest>
			<description>
				A bang in the first inlet will cause the active collection for each inlet to be output and optionally erased (according to the <m>autoclear</m> attribute).
				This is the same as <m>0</m>.
			</description>
		</method>
		<method name="clear">
			<arglist />
			<digest>
				Clear the active collections
			</digest>
			<description>
				The message <m>clear</m> in the rightmost inlet clears the active collection for every inlet.
			</description>
		</method>
		<method name="clearall">
			<arglist />
			<digest>
				Clear all the collections
			</digest>
			<description>
				The message <m>clearall</m> in the rightmost inlet clears all the collections for every inlet.
			</description>
		</method>
		<method name="collection">
			<arg name="active_collection" optional="0" type="int" />
			<digest>
				Change collection
			</digest>
			<description>
				Syntax: <b>collection <m>&lt;int: active_collection&gt;</m> </b><br />				<br />
				The message <m>collection</m>, followed by a positive integer, when received in the rightmost inlet sets the currently active collection for each inlet
				Collections are independent destination lllls:
				each inlet works on its own set of collections but the index number of the active collection is always the same for each inlet.
				At any time, the active collections can be changed and every subsequent command will be solely referred to them.
				If the <m>autosize</m> attribute is set to 0 and a non-existing collection is requested,
				all the following data and commands will be ignored.
				By default, the active collection is number 1.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				0 in the first inlet will cause all the active collections to be output and optionally erased (according to the <m>autoclear</m> attribute).
				This is equivalent to a <m>bang</m>.<br />
				A positive int in the leftmost inlet causes the corresponding number of levels of the destination lllls to be output, counting from the working level.
				For instance, 1 outputs the working level; 2 outputs the working level's parent llll (the working level is output as a sublist). <br />
				A negative int in the leftmost inlet will cause the destination llll minus the first -n levels (counting from the top level) to be output.
				For instance, -1 outputs the ancestor of the working level that is one level deeper than the root level. <br />
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Append the llll
			</digest>
			<description>
				An llll in every inlet except the leftmost and rightmost is appended to the corresponding llll being built by <o>bach.collect</o>.
			</description>
		</method>
		<method name="size">
			<arg name="size" optional="0" type="int" />
			<digest>
				Set the number of collections
			</digest>
			<description>
				Syntax: <b>size <m>&lt;int: size&gt;</m> </b><br />				<br />
				The message <m>size</m>, followed by a positive integer, when received in the rightmost inlet sets the number of allowed collections for each inlet.
				Raising it doesn't alter the collected data; lowering it erases the data from the discarded collections.
				Usually it is more convenient letting <o>bach.collect</o> manage the number of collections through the <m>autosize</m> attribute (active by default).
			</description>
		</method>
		<method name="top">
			<arglist />
			<digest>
				Close all the open sublists
			</digest>
			<description>
				The message <m>top</m> in the rightmost inlet closes all the open sublists and makes the root level of the current active lllls the new working position.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="autoclear" get="1" set="1" type="int" size="1">
			<digest>
				Auto Clear
			</digest>
			<description>
				When set to 1 (default), a <m>bang</m> or <m>0</m> in the left inlet will also clear the active collections,
				and a <m>all</m> message will clear all the collections.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Auto Clear" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="autosize" get="1" set="1" type="int" size="1">
			<digest>
				Set Size Automatically
			</digest>
			<description>
				When set to 1 (default), the number of allowed collections is automatically raised as soon as a non-existing collection is requested.
				When a <m>clearall</m> message is received, the number of allowed collections is set to 1.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Set Size Automatically" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="bipolar" get="1" set="1" type="int" size="1">
			<digest>
				Bipolar
			</digest>
			<description>
				When set to 1 (default), a <m>bang</m> or <m>0</m> in the left inlet will also clear the active collections,
				and a <m>all</m> message will clear all the collections.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Bipolar" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="inwrap" get="1" set="1" type="int" size="1">
			<digest>
				Wrap Input
			</digest>
			<description>
				Wrap every incoming llll in the corresponding number of parentheses.
				This is equivalent to connecting a <o>bach.wrap</o> object to every llll inlet.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Wrap Input" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="nullmode" get="1" set="1" type="int" size="1">
			<digest>
				Null Mode
			</digest>
			<description>
				When set to 1, a <b>null</b> received in one of the llll inlets will result in an empty sublist being added to the collection.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Null Mode" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="outwrap" get="1" set="1" type="int" size="1">
			<digest>
				Wrap Output
			</digest>
			<description>
				Wrap every output llll in the correspongind number of parentheses.
				This is equivalent to connecting a <o>bach.wrap</o> object to every llll outlet.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Wrap Output" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		More lllls can be built in parallel through the use of the <m>collection</m> messages,
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.iter" />
		<seealso name="bach.step" />
		<seealso name="bach.join" />
		<seealso name="bach.drip" />
		<seealso name="bach.mapelem" />
		<seealso name="03-Iterations" module="bach" type="tutorial" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (bang/int/all)">
			<description>
				Output the collected lllls.
			</description>
		</entry>
		<entry name ="Inlets 2, 3, 4... (llll)">
			<description>
				Data to collect.
			</description>
		</entry>
		<entry name ="The last Inlet (int/anything)">
			<description>
				Navigate, clear and manage the collection structure.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlets 1, 2, 3... (llll)">
			<description>
				Collected data.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		More lllls can be built in parallel through the use of the <m>collection</m> messages,
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
collect, gather, iteration, rebuild, element, address, command.
			</description>
		</entry>
	</misc>

</c74object>