<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.mrandom" module="bach" kind="patcher">

	<digest>
		Obtain a random matrix
	</digest>

	<description>
		Builds a random matrix of given dimensions,
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach matrix calculus</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				bang to build random matrix
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Number of rows
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Number of columns
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="3" type="INLET_TYPE">
			<digest>
				List of possible elements
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The random matrix
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="numrows" optional="1" type="int">
			<digest>
				Number of rows
			</digest>
			<description>
				Number of rows of the matrix to be built. By default it is 3.
			</description>
		</objarg>
		<objarg name="numcolumns" optional="1" type="int">
			<digest>
				Number of columns
			</digest>
			<description>
				Number of columns of the matrix to be built.
				If this is not set, but the number of rows is specified, a
				square matrix will be built. Otherwise, the default is 3.
			</description>
		</objarg>
		<objarg name="elems" optional="1" type="list">
			<digest>
				List of possible elements
			</digest>
			<description>
				Each cell of the matrix will be build by randomly picking
				one of these elements. By default this is <b>0 1</b>.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Build the random matrix
			</digest>
			<description>
				A <m>bang</m> in the left inlet builds the random matrix.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Set matrix size
			</digest>
			<description>
				An integer in the second inlet sets the number of rows;
				an integer in the third inlet sets the number of columns.
			</description>
		</method>
		<method name="list">
			<arglist />
			<digest>
				Set list of possible element
			</digest>
			<description>
				A list in the fourth inlet sets a list of possible
				elements. Each cell of the matrix will be build by randomly picking
				one of these elements.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
		For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
		i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
		as the number of rows.
		<br /> <br />
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.minfo" />
		<seealso name="bach.diag" />
		<seealso name="bach.idmatrix" />
		<seealso name="bach.wellshape" />
		<seealso name="bach.m2jitcellblock" />
		<seealso name="16-Into The Matrix" module="bach" type="tutorial" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (bang)">
			<description>
				bang to build random matrix.
			</description>
		</entry>
		<entry name ="Inlet 2 (int)">
			<description>
				Number of rows.
			</description>
		</entry>
		<entry name ="Inlet 3 (int)">
			<description>
				Number of columns.
			</description>
		</entry>
		<entry name ="Inlet 4 (llll)">
			<description>
				List of possible elements.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The random matrix.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
		For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
		i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
		as the number of rows.
		<br /> <br />
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
matrix, random, build, size, element, pick.
			</description>
		</entry>
	</misc>

</c74object>