<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.portal" module="bach">

	<digest>
		Let lllls through
	</digest>

	<description>
		Performs no operation upon the incoming llll, except optional format (text/native) conversions.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				llll to be output unchanged
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Output llll
			</digest>
			<description>
				The llll coming from the corresponding inlet is immediately output unchanged.
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Bang when ready
			</digest>
			<description>
				If <o>bach.portal</o>'s <m>out</m> attribute is set to <m>p</m>,
				its outlets are not immediately initialized as soon as the patch is loaded.
				For this reason, a message coming from a <o>loadbang</o> or <o>loadmess</o> object
				might get lost, or be output in the wrong format.
				When <o>bach.portal</o> is ready, it outputs a <m>bang</m> from its rightmost outlet
				which can be used to trigger any message to output automatically when the patch is loaded.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="inlets" optional="1" type="int">
			<digest>
				Number of llll inlets/outlets
			</digest>
			<description>
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="llll">
			<arglist />
			<digest>
				Output the llll unchanged
			</digest>
			<description>
				An llll in any inlet is immediately output from the current outlet unchanged,
				except for the optional format conversion according to the <m>out</m> attribute.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		As usual, the formats of the output lllls are controlled by the <m>out</m> attribute.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.reg" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlets 1, 2, 3... (llll)">
			<description>
				llll to be output unchanged.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlets 1, 2, 3... (llll)">
			<description>
				Output llll.
				The llll coming from the corresponding inlet is immediately output unchanged.
			</description>
		</entry>
		<entry name ="The last Outlet (llll)">
			<description>
				Bang when ready.
				If <o>bach.portal</o>'s <m>out</m> attribute is set to <m>p</m>,
				its outlets are not immediately initialized as soon as the patch is loaded.
				For this reason, a message coming from a <o>loadbang</o> or <o>loadmess</o> object
				might get lost, or be output in the wrong format.
				When <o>bach.portal</o> is ready, it outputs a <m>bang</m> from its rightmost outlet
				which can be used to trigger any message to output automatically when the patch is loaded.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		As usual, the formats of the output lllls are controlled by the <m>out</m> attribute.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
portal, text, native, disabled, outlet, convert.
			</description>
		</entry>
	</misc>

</c74object>