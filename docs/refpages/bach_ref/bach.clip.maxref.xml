<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.clip" module="bach" kind="patcher" category="Math">

	<digest>
		Limit elements of lllls within a certain range
	</digest>

	<description>
		Constraints each element of the incoming llll
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach math</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The llll to be clipped
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Upper boundary
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The llll clipped element-wise
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="lower_boundary" optional="1" type="number/llll">
			<digest>
				Lower boundary
			</digest>
			<description>
				The optional first argument sets the initial lower boundary.
				If the boundary needs to be an llll (see <m>llll</m> message), such llll needs
				to be wrapped in an outer level of parenthesis.
			</description>
		</objarg>
		<objarg name="upper_boundary" optional="1" type="number/llll">
			<digest>
				Upper boundary
			</digest>
			<description>
				The optional first argument sets the initial upper boundary.
				If the boundary needs to be an llll (see <m>llll</m> message), such llll needs
				to be wrapped in an outer level of parenthesis.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output result
			</digest>
			<description>
				Performs and outputs the calculation on the most recently received input data.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Clip lll, output result, set boundary
			</digest>
			<description>
				An llll in the first inlet is taken as the llll
				to be clipped. Each element of such llll is constrained to lie
				inside the range defined by the lower and upper boundaries:
				if it is smaller than the lower boundary it is set to be the lower
				boundary, if it is bigger than the upper boundary it is set to
				be the upper boundary. The modified llll is then output through
				the outlet. <br />
				An llll in the second inlet sets the lower boundary,
				an llll in the third inlet sets the upper boundary.
				In case such lllls are plain numbers, the meaning is trivial: such
				numbers apply for all elements of the original llll, coming from the
				first inlet.
				In case any of the two lllls is a complex llll, it is assumed
				to be an element-wise boundary for the incoming llll, exactly
				as it happens for the inputs of <o>bach.maximum</o> and
				<o>bach.minimum</o>.
				If any boundary llll is complex, and do not correspond in length with the original
				llll, the longer is always considered (and exceeding elements are trivially preserved).
				If single scalar elements are in the same position of complex lllls, such
				scalars apply for all elements of the corresponding llll.
			</description>
		</method>
		<method name="number">
			<arglist />
			<digest>
				Set boundary
			</digest>
			<description>
				A number in the second inlet sets the lower boundary for each element
				of the llll.
				A number in the third inlet sets the upper boundary for each element
				of the llll.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		Lower and upper boundaries must be coherent, namely
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.maximum" />
		<seealso name="bach.minimum" />
		<seealso name="clip" />
		<seealso name="bach.expr" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The llll to be clipped.
			</description>
		</entry>
		<entry name ="Inlet 2 (number/llll)">
			<description>
				Upper boundary.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The llll clipped element-wise.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		Lower and upper boundaries must be coherent, namely
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
clip, force, limit, range, boundary, constraint, number, minimum, maximum.
			</description>
		</entry>
	</misc>

</c74object>