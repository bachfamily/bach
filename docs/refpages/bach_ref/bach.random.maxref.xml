<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.random" module="bach" kind="patcher">

	<digest>
		Pick random elements from an llll
	</digest>

	<description>
		Outputs one or more random elements, extracted from a given pool llll.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The pool llll or bang to pick
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				The number of elements that must be picked at once
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The picked elements
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				The picked elements' addresses
			</digest>
			<description>
				An address is an llll providing a unique representation of the position of an element in another llll.
				It is a concept shared by many bach object.
				The address of each element of an llll's root level is simply its position counting from 1.
				The address of an element in a sublist is a list composed by the position of the element in the sublist,
				preceded by the position of the sublist in the parent llll,
				and so on up to the root level, as a sort of "path" to the element.<br />
				For instance, given the llll <b>a b c [d e [f g] h i] j k</b> the position of <b>c</b> is <b>3</b>;
				the position of <b>[d e [f g] h i]</b> is <b>4</b>;
				the position if <b>e</b> is <b>4 2</b> since to reach it it takes to go to the 4th element of the root level, which is a sublist,
				and to the 2nd element of that sublist.
				By reading the address from right to left, it can be seen that this is equivalent to saying
				that the pointed element is the 2nd of the 4th.
				Likewise, in the above llll <b>f</b> has the address <b>4 3 1</b> since it is the 1st of the 3rd of the 4th.<br />
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="number_of_elements" optional="1" type="int">
			<digest>
				Number of elements to be picked at once
			</digest>
			<description>
				The optional argument is the number of elements that must be picked each time
				an llll or a bang is received (default: 1).
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output randomly picked elements
			</digest>
			<description>
				The given number of elements are randomly picked and output (from the first outlet)
				along with their addresses (from the second outlet). <br />
				An address is an llll providing a unique representation of the position of an element in another llll.
				It is a concept shared by many bach object.
				The address of each element of an llll's root level is simply its position counting from 1.
				The address of an element in a sublist is a list composed by the position of the element in the sublist,
				preceded by the position of the sublist in the parent llll,
				and so on up to the root level, as a sort of "path" to the element.<br />
				For instance, given the llll <b>a b c [d e [f g] h i] j k</b> the position of <b>c</b> is <b>3</b>;
				the position of <b>[d e [f g] h i]</b> is <b>4</b>;
				the position if <b>e</b> is <b>4 2</b> since to reach it it takes to go to the 4th element of the root level, which is a sublist,
				and to the 2nd element of that sublist.
				By reading the address from right to left, it can be seen that this is equivalent to saying
				that the pointed element is the 2nd of the 4th.
				Likewise, in the above llll <b>f</b> has the address <b>4 3 1</b> since it is the 1st of the 3rd of the 4th.<br />
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Set the number of elements to be picked at once
			</digest>
			<description>
				An integer in the second inlet sets the number of elements that will be picked each time
				an llll or a bang is received (default: 1). Elements can be repeated while picking: if you don't
				want this behavior have a look at <o>bach.urn</o> instead.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Set pool llll and output randomly picked elements
			</digest>
			<description>
				<o>bach.random</o> sets the incoming llll as the pool from which elements
				should be picked (also depending on the <m>maxdepth</m> attribute),
				and then output the random elements (first outlet), along with their addresses
				(second outlet).
			</description>
		</method>
		<method name="seed">
			<arg name="" optional="116" type="" />
			<arg name="seed" optional="0" type="int" />
			<digest>
				Set the random number generator seed
			</digest>
			<description>
				Syntax: <b>seed <m>[&lt;: &gt;]</m> <m>&lt;int: seed&gt;</m> </b><br />				<br />
				Use the <m>seed</m> message to set the random number generator seed
				(see the reference of <o>random</o> for more information).
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="default" get="1" set="1" type="llll" size="1">
			<digest>
				Default llll
			</digest>
			<description>
				You can use the <m>default</m> attribute to define an llll which will be used by default
				at the instantiation. Such llll will be used as pool llll when a bang is received. If another llll is
				sent through the first inlet, this latter becomes the new pool llll, and the <m>default</m> llll is
				no longer used.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Default llll" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxdepth" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Depth
			</digest>
			<description>
				You can use a <m>maxdepth</m> attribute in order to decide until which level of depth
				the elements can be picked (default: 1, i.e.: elements are picked only at the root level). <br />
				<m>maxdepth</m> sets the maximum depth level at which the operation must be performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				A value of 0 is not accepted.
				Defaults to -1, i.e. there is no limitation (stop at the innermost level).
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Depth" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="unwrap" get="1" set="1" type="int" size="1">
			<digest>
				Automatically Unwrap lllls When Picked
			</digest>
			<description>
				Toggles the ability to unwrap automatically the llll when picked (default: 1).
				For instance, if this attribute is active, and the llll is <b>1 2 [3 [4 4]] 5</b>, with
				<m>maxdepth</m> 1, when the <b>[3 [4 4]]</b> element is picked, the flattened <b>3 [4 4]</b> llll
				is output.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Automatically Unwrap lllls When Picked" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="random" />
		<seealso name="bach.nth" />
		<seealso name="bach.pick" />
		<seealso name="bach.urn" />
		<seealso name="bach.lookup" />
		<seealso name="bach.mrandom" />
		<seealso name="bach.wrandom" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The pool llll or bang to pick.
			</description>
		</entry>
		<entry name ="Inlet 2 (int)">
			<description>
				The number of elements that must be picked at once.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The picked elements.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				The picked elements' addresses.
				An address is an llll providing a unique representation of the position of an element in another llll.
				It is a concept shared by many bach object.
				The address of each element of an llll's root level is simply its position counting from 1.
				The address of an element in a sublist is a list composed by the position of the element in the sublist,
				preceded by the position of the sublist in the parent llll,
				and so on up to the root level, as a sort of "path" to the element.<br />
				For instance, given the llll <b>a b c [d e [f g] h i] j k</b> the position of <b>c</b> is <b>3</b>;
				the position of <b>[d e [f g] h i]</b> is <b>4</b>;
				the position if <b>e</b> is <b>4 2</b> since to reach it it takes to go to the 4th element of the root level, which is a sublist,
				and to the 2nd element of that sublist.
				By reading the address from right to left, it can be seen that this is equivalent to saying
				that the pointed element is the 2nd of the 4th.
				Likewise, in the above llll <b>f</b> has the address <b>4 3 1</b> since it is the 1st of the 3rd of the 4th.<br />
			</description>
		</entry>
	</misc>

</c74object>