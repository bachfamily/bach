<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.write" module="bach">

	<digest>
		Write an llll to disk
	</digest>

	<description>
		Writes an llll to a file.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Write the llll
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				llll to store
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="llll">
			<arglist />
			<digest>
				Store the llll to be written
			</digest>
			<description>
				In second inlet:
				the llll is stored, to be written upon reception of a <m>write</m> or <m>writetxt</m> message.
			</description>
		</method>
		<method name="write">
			<arg name="file_name" optional="1" type="symbol" />
			<digest>
				Write the llll in native format
			</digest>
			<description>
				Syntax: <b>write <m>[&lt;symbol: file_name&gt;]</m> </b><br />
				Examples:<br />
				• <b>write</b>   <i>→ export the llll, opening a dialog box for the file name</i><br />
				• <b>write myfile.llll</b>   <i>→ export the llll with the provided file name</i><br />
				<br />
				In first inlet:
				the stored llll is written to the specified file in native format.
				Native format is not easily editable outside Max
				but it yields exact storage of floating-point numbers.
				If no file name is provided, a dialog box will open.
			</description>
		</method>
		<method name="writetxt">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Write the llll in text format
			</digest>
			<description>
				Syntax: <b>writetxt <m>[&lt;symbol: filename&gt;]</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>writetxt</b>   <i>→ export the llll as a text file, opening a dialog box for the file name</i><br />
				• <b>writetxt myfile.txt</b>   <i>→ export the llll as a text file with the provided file name</i><br />
				• <b>writetxt myfile.txt @maxdecimals 3</b>   <i>→ export the llll with a floating-point precision of 3 decimal digits</i><br />
				• <b>writetxt myfile.txt @maxdecimals 3 @wrap 40</b>   <i>→ as the above, limiting the length of each line to 40 characters</i><br />
				• <b>writetxt myfile.txt @maxdepth 1</b>   <i>→ no indentation is performed</i><br />
				<br />
				Message attributes:<br />
				<m>@indent</m> (atom, default: tab): Number of spaces for indentation or "tab" symbol<br />
				<m>@maxdepth</m> (int, default: -1): Maximum depth for new lines<br />
				<m>@wrap</m> (int, default: 0): Maximum number of characters per line (0 means: no wrapping)<br />
				<br />
				In first inlet:
				the stored llll is written to the specified file in text format.
				Text format is easily editable in any text editor,
				but representation of floating-point numbers is approximate.
				No limit in size is given for saving a file in text format (differently from what happens while outputting lllls as text in Max).
				If no file name is provided, a dialog box will open.
				Furthermore, some message attributes are available, for fine-tuning of the text formatting.
				Available attributes are: <br />
				- <b>maxdecimals</b> (default: 10): the precision for floating-point numbers. <br />
				- <b>indent</b> [default: <b>tab</b>]: if set to <m>tab</m>, every sublist that is encountered [up to <b>maxdepth</b>, see below)
				will be placed on a new line, indented by a number of tabs equal to the depth level of the sublist itself.
				If set to an integer, the indentation for each depth level will be the corresponding number of spaces.<br />
				- <b>maxdepth</b> (default: -1, i.e. no limitation): the maximum depth at which sublists are placed in new lines.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				- <b>wrap</b> (default: 0, i.e. no wrapping): the maximum number of characters to be placed on each line.<br />
				- <b>filename</b> (default: not set): the name of the file to be written.
				If set, this specification overrides the file name set as the first message argument.
				<br />				See also:<m>write</m><br />
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="escape" get="1" set="1" type="int" size="1">
			<digest>
				Escaping style
			</digest>
			<description>
				When set to 1, all the symbols that could be interpreted as different data types
				(e.g., the symbol <b>12</b>, the symbol <b>1/3</b> or the symbol <b>A1</b>,
				distinct from the corresponding integer, rational or pitch, but potentially interpreted as such by any bach object)
				are written to text with a preceding backtick
				(in the above example, respectively <b>`12</b>, <b>`1/3</b>, <b>`A1</b>).
				This is the normal behavior for the llll text format.<br />
				When set to 2, all the symbols that could be interpreted as different data types
				are written to text surrounded by double quotes
				(in the example above, respectively <b>"12"</b>, <b>"1/3"</b>, <b>"A1"</b>).<br />
				When set to 3 (default), symbols that could be interpreted as different data types
				are written to text either surrounded by double quotes, or preceded by a backtick,
				according to their features, so as to improve readability and, at the same time,
				maintaining compatibility with the <o>message</o> object (see below).
				When set to 0, no backtick is added. <br />
				Notice that text files written with the <m>escape</m> attribute set to 1, 2 or 3
				will be interpreted correctly by all the bach objects capable to import text files.
				On the contrary, text files written with the <m>escape</m> attribute set to 0
				will be potentially interpreted differently from the original,
				and even be considered broken. <br />
				On the other hand, the contents of text files written with the <m>escape</m> attribute
				set to 1 or 3 can be safely pasted in a <o>message</o> object,
				whereas doing the same with the contents of a text file
				written with the <m>escape</m> attribute set to 0 or 2
				may result in an llll different from the original.<br />
				The attribute has no effect when the file is saved in native format,
				through the <m>write</m> message.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Escaping style" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="indent" get="1" set="1" type="atom" size="1">
			<digest>
				Indentation
			</digest>
			<description>
				If the <m>indent</m> attribute is set to an integer,
				it sets the number of spaces per depth level used for indentation.
				If it is set to <m>tab</m>, a tab character is used instead.
				The default is <m>tab</m>. <br />
				The attribute has no effect when the file is saved in native format.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Indentation" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxdecimals" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Decimal Digits
			</digest>
			<description>
				The maximum number of decimal digits for the text format. Default is 10. <br />
				The attribute has no effect when the file is saved in native format.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Decimal Digits" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxdepth" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Indentation Depth
			</digest>
			<description>
				<m>maxdepth</m> sets the maximum depth level at which text indentation is performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				Defaults to -1, i.e. there is no limitation. <br />
				The attribute has no effect when the file is saved in native format.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Indentation Depth" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="negativeoctaves" get="1" set="1" type="int" size="1">
			<digest>
				Use Negative Octaves
			</digest>
			<description>
				When set to 0 (default), pitches at octaves lower than octave 0
				are written to text as negative pitches, that is, as the inversion of the interval they form with C0.
				For example, the pitch A-1 (one minor third below C0) is returned as its equivalent form -Eb0 (still one minor third below C0).
				This is the normal behavior for the llll text format,
				and is more likely to be convenient as very low pitches are usually employed to denote descending intervals.
				Notice that the pitch class of -Eb0 is A anyway.<br />
				When set to 1, pitches at octaves lower then octave 0 are represented as positive pitches with negative octaves.
				For example, the pitch A-1 and its equivalent form -Eb0 are both represented as A-1.
				The attribute has no effect when the file is saved in native format,
				through the <m>write</m> message.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Use Negative Octaves" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="parens" get="1" set="1" type="int" size="1">
			<digest>
				Use Parens
			</digest>
			<description>
				When set to 0 (default),
				list levels are marked by square brackets when written as text.
				When set to 1, they are marked by parens.
				This is especially useful when exporting data to Lisp programs. <br />
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Use Parens" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="wrap" get="1" set="1" type="int" size="1">
			<digest>
				Hard Wrap
			</digest>
			<description>
				<m>wrap</m> sets the column at which the text should be hard-wrapped.
				The default is 0, that is, no wrapping. <br />
				The attribute has no effect when the file is saved in native format.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Hard Wrap" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The llll can be written in text or native format.
		Text format is easily editable through any text editor,
		native format yields exact storage of floats.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.read" />
		<seealso name="bach.shelf" />
		<seealso name="bach.reg" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (write/writetxt)">
			<description>
				Write the llll.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				llll to store.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The llll can be written in text or native format.
		Text format is easily editable through any text editor,
		native format yields exact storage of floats.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
write, save, disk, file, native, text.
			</description>
		</entry>
	</misc>

</c74object>