<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.filter" module="bach" kind="patcher">

	<digest>
		Only let specified data types through
	</digest>

	<description>
		Takes the incoming data and,
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The incoming data
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Accepted data types
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Data if accepted
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Data if rejected
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="accepted_data_types" optional="1" type="list">
			<digest>
				Accepted data types
			</digest>
			<description>
				The optional argument is a list or a number setting the accepted data
				types, exactly as the <m>list</m> coming in the second inlet (refer to the <m>list</m>
				message to know more).
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output last filtered data
			</digest>
			<description>
				Performs the filtering on the most recently received input data.
			</description>
		</method>
		<method name="list">
			<arglist />
			<digest>
				Set accepted data types
			</digest>
			<description>
				A list in the second inlet sets the data types which are allowed to
				be let through the first outlet ("accepted"). All other data types are let through
				the right outlet ("rejected"). <br />
				Data types can be specified in two different ways.
				The simplest way is to enter them as a list of symbols, each referring to one
				data type: <br />
				• <b>i</b> stands for "ints" and represents all integers; <br />
				• <b>r</b> stands for "rational" and represents all rational numbers, included
				all integer numbers; <br />
				• <b>R</b> represents all rational numbers but not integer numbers (i.e.
				only rational numbers whose denominator is greater than 1); <br />
				• <b>f</b> represents all floating point numbers; <br />
				• <b>s</b> represents all symbols; <br />
				• <b>l</b> represents all lllls; <br />
				• <b>n</b> represents the <b>null</b> llll. <br />
				You can let pass more than one data type by listing them. For instance <b>i s</b> let
				through the integer numbers and symbols. You can begin the list with a minus sign
				in order to invert the selection; for instance <b>- f i r</b> let accepts anything but
				numbers. <br />
				Another (more complicate) way to enter data types is to use a single number
				(also see <o>bach.is</o>). Each type is associated with a certain number:
				• 1 = null; <br />
				• 2 = integers; <br />
				• 4 = rational numbers (strictly: not integers); <br />
				• 8 = floating point numbers; <br />
				• 16 = symbols; <br />
				• 32 = lllls; <br />
				• 64 = unknown objects. <br />
				By summing up these values you can let multiple type pass through. For instance,
				<b>14</b>, which is 2 (integers) + 4 (rationals) + 8 (floats), will let all numbers
				through. Add a negative sign to the number in order to invert the selection; for instance
				<b>-33</b> will accept everything but lllls [<b>null</b> llll included).
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Filter incoming data
			</digest>
			<description>
				An llll in the first inlet contains the data to be filtered.
				If the content matches the accepted data types (see <m>list</m> message)
				the llll is let through the first outlet ("accepted"). Otherwise, it is let through the
				second outlet ("rejected"). <br />
				The incoming data is taken as a whole: if a single element is entered, the data type
				will be the type of such element (e.g. <b>5.4</b> is a floating point number, while
				<b>foo</b> is a symbol); if more than one elements are entered, the data type
				will be "llll" (e.g. <b>12 foo</b>, or <b>[12 foo] [1 2 []]</b>]. The <b>null</b>
				llll belong to a separate "null" type (see <m>list</m> message).
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.is" />
		<seealso name="bach.contains" />
		<seealso name="bach.sieve" />
		<seealso name="bach.filternull" />
		<seealso name="03-Iterations" module="bach" type="tutorial" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The incoming data.
			</description>
		</entry>
		<entry name ="Inlet 2 (list)">
			<description>
				Accepted data types.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Data if accepted.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Data if rejected.
			</description>
		</entry>
	</misc>

</c74object>