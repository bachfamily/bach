<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.find" module="bach">

	<digest>
		Find elements
	</digest>

	<description>
		Searches an llll for elements or sequences of elements satisfying a condition.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				llll to search
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Comparison llll
			</digest>
			<description>
				The comparison llll is ignored if a lambda loop is present.
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Lambda inlet
			</digest>
			<description>
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is in a 0/1 form: if the element output from the lambda outlet is a match
				(according to your custom matching function, defined in the lambda loop),
				this inlet should receive a 1; otherwise it should receive a 0. <br />
				The lambda inlet also accepts the 0/1 result in a native llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Found matching items
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Addresses of found matching items
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Lambda outlet
			</digest>
			<description>
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from the lambda outlet have to be tested in order to know if they are a match:
				in the first case, you should return a 1 into the lambda inlet, in the second case you should return a 0. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="comparison" optional="1" type="llll">
			<digest>
				Default comparison llll
			</digest>
			<description>
				A default comparison llll. Ignored if a lambda loop is present.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Perform last operation
			</digest>
			<description>
				A <m>bang</m> in the first inlet outputs the result of the search on the most recently received llll
				and with the current search criteria. <br />
				<br /> N.B.: The object is not aware of changes you make in the lambda loop.
				If you change the lambda loop, you might want to re-input the most recent llll rather than just sending a <m>bang</m>.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Lambda inlet
			</digest>
			<description>
				The criterium by which a given element or sequence of elements is considered a match
				can be customized through an optional lambda loop.
				If the lambda loop is present, the <m>op</m> attribute and the llll received in the second inlet are ignored,
				and elements or sequences of elements (see the <m>size</m> attribute for more details) are output from the lambda outlet.
				The lambda loop should return 1 to the third inlet if the element or sequence is a match, 0 if it is not.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				In first inlet: llll to search.
				The matching parts of the llll (single elements or sequences of elements according to the search criteria)
				will be output as sublists of the first outlet llll;
				their addresses will be output as sublists of the second outlet llll. <br />
				An address is an llll providing a unique representation of the position of an element in another llll.
				It is a concept shared by many bach object.
				The address of each element of an llll's root level is simply its position counting from 1.
				The address of an element in a sublist is a list composed by the position of the element in the sublist,
				preceded by the position of the sublist in the parent llll,
				and so on up to the root level, as a sort of "path" to the element.<br />
				For instance, given the llll <b>a b c [d e [f g] h i] j k</b> the position of <b>c</b> is <b>3</b>;
				the position of <b>[d e [f g] h i]</b> is <b>4</b>;
				the position if <b>e</b> is <b>4 2</b> since to reach it it takes to go to the 4th element of the root level, which is a sublist,
				and to the 2nd element of that sublist.
				By reading the address from right to left, it can be seen that this is equivalent to saying
				that the pointed element is the 2nd of the 4th.
				Likewise, in the above llll <b>f</b> has the address <b>4 3 1</b> since it is the 1st of the 3rd of the 4th.<br />
				In second inlet: element or sequence of elements to search for.
				If a lambda loop is not present, the search is performed
				by comparing chunks of the llll in the first inlet to the llll in the second inlet,
				the size of the chunks being the same as the size of the second inlet llll.
				If a lambda loop is present the llll received in the second inlet is ignored,
				the chunks (whose size is determined by the <m>size</m> attribute) are output from the lambda outlet
				and a comparison result is expected in the lambda inlet.
				In third inlet: converted to int.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="depthpolicy" get="1" set="1" type="int" size="1">
			<digest>
				Depth Policy
			</digest>
			<description>
				When set to 1 (default) and a lambda loop is not present,
				sequences whose overall depth is greater than the depth of the comparison llll are not considered matches.
				This means that, for example, if the <b>1 [2 [3]]</b> llll is searched for <b>2</b> with the <m>!=</m> operator
				(that is, items different from <b>2</b> are looked for), the found matches will be <b>1</b> and <b>3</b>.
				If <m>depthpolicy</m> was set to 0, the <b>[2 [3]]</b> sublist [whose depth is 3] would be compared with <b>2</b> (whose depth is 1),
				found to be different and subsequently considered a match.
				Moreover, with the <m>recursive</m> attribute set to 0, the <b>[2 [3]]</b> sublist would not be entered and <b>3</b> would not be found.
				If a lambda loop is present, the <m>depthpolicy</m> attribute is ignored.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Depth Policy" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="depthreject" get="1" set="1" type="int" size="1">
			<digest>
				Depth Reject
			</digest>
			<description>
				When set to 1, the search depth range set through the <m>mindepth</m> and <m>maxdepth</m> attributes is inverted,
				meaning that the specified depth range is excluded from the search, rather than included.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Depth Reject" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="idxreject" get="1" set="1" type="int" size="1">
			<digest>
				Index Reject
			</digest>
			<description>
				When set to 1, the search range set through the <m>minidx</m> and <m>maxidx</m> attributes is inverted,
				meaning that the specified range is excluded from the search, rather than included.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Index Reject" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="maxcount" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Number of Results
			</digest>
			<description>
				The number of matches to find. As soon as the specified number is reached, the search stops.
				The default is 0, meaning that all the matches are found.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Number of Results" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxdepth" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Depth
			</digest>
			<description>
				<m>maxdepth</m> sets the maximum depth level at which the operation must be performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				A value of 0 is not accepted.
				Defaults to -1, i.e. there is no limitation (stop at the innermost level).
				<br /> <br />
				<br />N.B.: when the <m>depthreject</m> attribute is set to 1, the specified depth range is excluded from the search, rather than included.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Depth" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxidx" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Index
			</digest>
			<description>
				<m>maxidx</m> sets the position at which the search should end, for the root llll as well as any sublist.
				If negative, the position is counted backwards from the end.
				Defaults to 0, i.e. there is no limitation (equivalent to -1: end at the last element).<br />
				N.B.: when the <m>idxreject</m> attribute is set to 1,
				the specified index range is excluded from the search, rather than included.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Index" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="mindepth" get="1" set="1" type="int" size="1">
			<digest>
				Minimum Depth
			</digest>
			<description>
				<m>mindepth</m> sets the minimum depth level at which the operation must be performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				A value of 0 is not accepted.
				Defaults to 1, i.e. there is no limitation.
				<br /> <br />
				<br />N.B.: when the <m>depthreject</m> attribute is set to 1, the specified depth range is excluded from the search, rather than included.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Minimum Depth" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="minidx" get="1" set="1" type="int" size="1">
			<digest>
				Minimum Index
			</digest>
			<description>
				<m>minidx</m> sets the position at which the search should begin, for the root llll as well as any sublist.
				If negative, the position is counted backwards from the end.
				Defaults to 0, i.e. there is no limitation (equivalent to 1: begin at the first element).<br />
				N.B.: when the <m>idxreject</m> attribute is set to 1,
				the specified index range is excluded from the search, rather than included.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Minimum Index" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="op" get="1" set="1" type="symbol" size="1">
			<digest>
				Comparison Operator
			</digest>
			<description>
				The comparison operator by which chunks of the llll in the first inlet are compared to the element or sequence in the second inlet.
				Valid operators are <m>==</m>, <m>!=</m>, <m>===</m>, <m>!==</m>
				(the two last being as <o>bach.==</o> and <o>bach.!=</o> with <m>matchtype 1</m>),
				<m>&lt;</m>, <m>&lt;=</m>, <m>&gt;</m>, <m>&gt;=</m>.
				The <m>op</m> attribute is ignored if a lambda loop is present.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Comparison Operator" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="recursive" get="1" set="1" type="int" size="1">
			<digest>
				Recursive
			</digest>
			<description>
				When set to 1, whenever a matching sublist is found its elements are investigated as well. When set to 0, they are not.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Recursive" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="size" get="1" set="1" type="int" size="1">
			<digest>
				Size
			</digest>
			<description>
				The size of each llll chunk to be output from the lambda outlet.
				The <m>size</m> attribute is ignored if a lambda loop is not present.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.filter" />
		<seealso name="bach.keys" />
		<seealso name="bach.sieve" />
		<seealso name="bach.constraints" />
		<seealso name="bach.swap" />
		<seealso name="bach.locate" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				llll to search.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Comparison llll.
				The comparison llll is ignored if a lambda loop is present.
			</description>
		</entry>
		<entry name ="Inlet 3 (int/llll)">
			<description>
				Lambda inlet.
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is in a 0/1 form: if the element output from the lambda outlet is a match
				(according to your custom matching function, defined in the lambda loop),
				this inlet should receive a 1; otherwise it should receive a 0. <br />
				The lambda inlet also accepts the 0/1 result in a native llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Found matching items.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Addresses of found matching items.
			</description>
		</entry>
		<entry name ="Outlet 3 (llll)">
			<description>
				Lambda outlet.
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from the lambda outlet have to be tested in order to know if they are a match:
				in the first case, you should return a 1 into the lambda inlet, in the second case you should return a 0. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

</c74object>