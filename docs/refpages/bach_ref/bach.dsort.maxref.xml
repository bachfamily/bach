<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.dsort" module="bach" kind="patcher">

	<digest>
		Sort llll by distances
	</digest>

	<description>
		Sorts a list depending to the distance of its
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The llll to be sorted
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				The reference number
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The sorted llll
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				The sorted indices
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="reference_number" optional="1" type="number">
			<digest>
				Reference number
			</digest>
			<description>
				The optional argument is the reference number. Distances are thus computed with respect
				to this number.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Sort llll and output result
			</digest>
			<description>
				Sorts the most recently received input llll with respect to the
				most recently received reference number.
			</description>
		</method>
		<method name="float">
			<arglist />
			<digest>
				Set the reference number
			</digest>
			<description>
				Any number coming from the second inlet
				will be considered as the reference number for all distances.
			</description>
		</method>
		<method name="float">
			<arglist />
			<digest>
				Set the time interval
			</digest>
			<description>
				A float in the second inlet sets or changes the
				interval (in milliseconds) between two consecutively output elements.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Set the reference number
			</digest>
			<description>
				Any number coming from the second inlet
				will be considered as the reference number for all distances.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Sort llll and output result, set reference number
			</digest>
			<description>
				If the llll comes through the left inlet, its are sorted by
				their distances with respec to the reference number defined in the second inlet
				(nearest elements coming first, farthest elements appearing at the end).
				The sorted llll is thus output from the left outlet, right after the list of indices of the
				sorted elements with respect to the original llll has been also output from the right outlet. <br />
				Any llll coming in the second inlet is considered to contain the reference number for all distances
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		<o>bach.dsort</o> is a small wrapper of <o>bach.sort</o>.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.sort" />
		<seealso name="bach.ssort" />
		<seealso name="bach.msort" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The llll to be sorted.
			</description>
		</entry>
		<entry name ="Inlet 2 (number)">
			<description>
				The reference number.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The sorted llll.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				The sorted indices.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		<o>bach.dsort</o> is a small wrapper of <o>bach.sort</o>.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
sort, distance, element, number.
			</description>
		</entry>
	</misc>

</c74object>