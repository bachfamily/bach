<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.gausselim" module="bach">

	<digest>
		Perform matrix gaussian elimination
	</digest>

	<description>
		Applies the Gaussian elimination algorithm to reduce the incoming matrix to a row echelon form.
		It also outputs some additional information, such as determinant and rank.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach matrix calculus</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Original matrix
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Matrix after Gaussian elimination
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				The number of line swaps that have been performed
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				The rank of the original matrix
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="3" type="INLET_TYPE">
			<digest>
				the determinant of the original matrix
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="4" type="INLET_TYPE">
			<digest>
				The columns permutation
			</digest>
			<description>
				A list is output with the number from
				1 to the number of columns reordered exactly in the
				way the algorithm has reordered the columns.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Perform the Gaussian elimination
			</digest>
			<description>
				Perform the Gaussina elimination on the most recently received input matrix.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Perform Gaussian elimination on incoming matrix
			</digest>
			<description>
				The Gaussian elimination is performed on the incoming matrix and the matrix in echelon form is output. <br />
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="admitcolswap" get="1" set="1" type="int" size="1">
			<digest>
				Admit Column Swap
			</digest>
			<description>
				If this flag is set, the algorithm will be allowed to swap
				columns of the incoming matrix.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Admit Column Swap" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="mode" get="1" set="1" type="int" size="1">
			<digest>
				Mode
			</digest>
			<description>
				If the mode is "Simple", the standard Gauss elimination is performed <br />
				If the mode is "Double", also the backward Gauss elimination is performed, bringing
				the left part of the output matrix in a pseudo-identity form.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
		For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
		i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
		as the number of rows.
		<br /> <br />
		The algorithm has attributes to admit column swap, and to perform (in addition) also the reversed Gauss elimination.
		To know more: http://mathworld.wolfram.com/GaussianElimination.html <br />
		Rank and determinant are immediate to compute once the matrix is in echelon form, so no big further additional
		computation is required. Indeed, the bach.rank and bach.det abstractions are little wrappers of bach.gausselim.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.linearsolve" />
		<seealso name="bach.extractbasis" />
		<seealso name="bach.det" />
		<seealso name="bach.rank" />
		<seealso name="bach.im" />
		<seealso name="bach.ker" />
		<seealso name="bach.inv" />
		<seealso name="16-Into The Matrix" module="bach" type="tutorial" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				Original matrix.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Matrix after Gaussian elimination.
			</description>
		</entry>
		<entry name ="Outlet 2 (int)">
			<description>
				The number of line swaps that have been performed.
			</description>
		</entry>
		<entry name ="Outlet 3 (int)">
			<description>
				The rank of the original matrix.
			</description>
		</entry>
		<entry name ="Outlet 4 (llll)">
			<description>
				the determinant of the original matrix.
			</description>
		</entry>
		<entry name ="Outlet 5 (llll)">
			<description>
				The columns permutation.
				A list is output with the number from
				1 to the number of columns reordered exactly in the
				way the algorithm has reordered the columns.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
		For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
		i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
		as the number of rows.
		<br /> <br />
		The algorithm has attributes to admit column swap, and to perform (in addition) also the reversed Gauss elimination.
		To know more: http://mathworld.wolfram.com/GaussianElimination.html <br />
		Rank and determinant are immediate to compute once the matrix is in echelon form, so no big further additional
		computation is required. Indeed, the bach.rank and bach.det abstractions are little wrappers of bach.gausselim.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
reduce, matrix, Gauss elimination, echelon form, determinant, rank, swap, row, column.
			</description>
		</entry>
	</misc>

</c74object>