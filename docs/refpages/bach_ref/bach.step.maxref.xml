<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.step" module="bach">

	<digest>
		Iterate through lllls, driven by bangs
	</digest>

	<description>
		Traverses lllls depth-first, outputting their elements one by one as it receives bangs.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Advance one step/reset the iteration
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				llll to be iterated
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				lambda inlet
			</digest>
			<description>
				An integer (1 or 0) received as the response to a proposal from the lambda outlet
				causes the proposed sublists (or the whole lllls) to be entered and iterated through or not.
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Current element
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Current element's address
			</digest>
			<description>
				An address is an llll providing a unique representation of the position of an element in another llll.
				It is a concept shared by many bach object.
				The address of each element of an llll's root level is simply its position counting from 1.
				The address of an element in a sublist is a list composed by the position of the element in the sublist,
				preceded by the position of the sublist in the parent llll,
				and so on up to the root level, as a sort of "path" to the element.<br />
				For instance, given the llll <b>a b c [d e [f g] h i] j k</b> the position of <b>c</b> is <b>3</b>;
				the position of <b>[d e [f g] h i]</b> is <b>4</b>;
				the position if <b>e</b> is <b>4 2</b> since to reach it it takes to go to the 4th element of the root level, which is a sublist,
				and to the 2nd element of that sublist.
				By reading the address from right to left, it can be seen that this is equivalent to saying
				that the pointed element is the 2nd of the 4th.
				Likewise, in the above llll <b>f</b> has the address <b>4 3 1</b> since it is the 1st of the 3rd of the 4th.<br />
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Depth Delta / Finished / Lambda Outlet
			</digest>
			<description>
				The difference between the depth of the previous and current elements,
				or the <m>root</m> symbol if the <m>maxdepth</m> attribute is set to 0.
				This value can be fed into <o>bach.collect</o>'s rightmost inlet.
				If there are no more elements to iterate upon, a bang is output unless the <m>circular</m> attribute is set.
				If the <m>lambda</m> attribute is set, proposals are output from the rightmost outlet whenever one or more sublists are met,
				as well as the very beginning of the iteration, and a return value is expected in the rightmost inlet
				telling whether the proposed sublists (or the whole lllls) should be entered or not.
				Please refer to the description of the <m>anything</m> message for more details.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="count" optional="1" type="int">
			<digest>
				Number of parallel lllls
			</digest>
			<description>
				The number of lllls to be iterated in parallel.
				Inlets and outlets are created accordingly.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Make a step
			</digest>
			<description>
				In first inlet: output one set of elements and move the iteration one step forward.
				If there are no more elements to iterate to, a bang is output from the rightmost outlet.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Iterate through the llll
			</digest>
			<description>
				All the lllls received in every llll inlet (that is, all except the first and the rightmost one) are iterated in parallel,
				element by element, as bangs are received in the left inlet.
				This means that the first bang outputs the first elements of all the lllls, the second bang outputs the second elements, and so on.
				Along with each element, its address is output.
				An address is an llll providing a unique representation of the position of an element in another llll.
				It is a concept shared by many bach object.
				The address of each element of an llll's root level is simply its position counting from 1.
				The address of an element in a sublist is a list composed by the position of the element in the sublist,
				preceded by the position of the sublist in the parent llll,
				and so on up to the root level, as a sort of "path" to the element.<br />
				For instance, given the llll <b>a b c [d e [f g] h i] j k</b> the position of <b>c</b> is <b>3</b>;
				the position of <b>[d e [f g] h i]</b> is <b>4</b>;
				the position if <b>e</b> is <b>4 2</b> since to reach it it takes to go to the 4th element of the root level, which is a sublist,
				and to the 2nd element of that sublist.
				By reading the address from right to left, it can be seen that this is equivalent to saying
				that the pointed element is the 2nd of the 4th.
				Likewise, in the above llll <b>f</b> has the address <b>4 3 1</b> since it is the 1st of the 3rd of the 4th.<br />
				Whenever a sublist is met, three scenarios are possible: <br/>
				In the standard case, a positive integer is output from the rightmost inlet (according to the number of consecutive open parentheses),
				then the sublist is entered and iterated through. <br/>
				If the maximum depth has been reached (see the description of the <m>maxdeph</m> attribute),
				then the sublist is treated as a "normal" element, that is it is output as a whole from the corresponding outlet and not entered.<br/>
				If the <m>lambda</m> attribute is set to 1, a proposal is output from the rightmost outlet.
				A proposal is an llll composed as follows: <br/>
				<m>lambda ( &lt;element 1&gt; ( &lt;address 1 ) &gt; ) ( &lt;element 2&gt; ( &lt;address 2 ) &gt; ) ...</m><br/>
				where at least one element is a sublist. When this happens, a 0 or 1 return value is expected in the rightmost inlet.
				If the return value is 1, the behavior falls back to the standard case.
				If the return value is 0, the sublist is treated as a "normal" element and not entered.
				It must be remarked that the first proposal output in lambda mode, at the very beginning of the iteration process,
				is composed by all the whole input lllls, each associated to an empty address.
				If a return value of 1 is not subsequently received, no actual iteration takes place. <br/>
				Whenever a sublist that was entered ends,
				a negative integer is output from the rightmost inlet (according to the number of consecutive closed parentheses),
				after which the iteration of the parent llll is resumed where it was left when the sublist was entered.
				If the input lllls don't have all the same structure,
				the details of <o>bach.iter</o>'s behavior are defined by the <m>iterationmode</m>, <m>scalarmode</m> and <m>recursionmode</m> attributes.
			</description>
		</method>
		<method name="reset">
			<arglist />
			<digest>
				Reset the iteration
			</digest>
			<description>
				In left inlet: resets the status of the iteration, so that the next bang will trigger the first elements of the lllls.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="circular" get="1" set="1" type="int" size="1">
			<digest>
				Circular
			</digest>
			<description>
				When set to 1, lllls are iterated in a circular fashion - that is, when the end of all of them is met
				a new bang restarts from the beginning, rather than outputting a bang from the rightmost outlet.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Circular" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="iterationmode" get="1" set="1" type="int" size="1">
			<digest>
				Iteration Mode
			</digest>
			<description>
				<m>iterationmode</m> sets the behavior of the object when lllls of different length are iterated against each other.
				If set to 0, operation will stop at the end of the shortest llll.
				If set to 1, operation will stop at the end of the longest llll.
				If set to 2, operation will stop at the end of the longest llll, and missing element from the shortest ones will be replaced by empty sublists.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Iteration Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="lambda" get="1" set="1" type="int" size="1">
			<digest>
				Lambda Mode
			</digest>
			<description>
				When set to 1, all sublists as well as the whole input llll are output as proposals, along with their addresses,
				and a return value is expected to tell whether the sublists (or the whole input llll) should be entered or not.
				Please refer to the description of the <m>anything</m> message for more details.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Lambda Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="maxdepth" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Depth
			</digest>
			<description>
				<m>maxdepth</m> sets the maximum depth level at which the iteration must be performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				A value of 0 is treated as a special case where only the whole input lllls are output,
				each associated to a <m>null</m> address, and no actual iteration takes place.
				In this case, the symbol <b>root</b> is output from the rightmost outlet.
				This can be useful in special situations where a series of iterations are triggered at different maximum depths,
				in order to emulate recursive behaviors.
				Defaults to -1, i.e. there is no limitation (stop at the innermost level).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Depth" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="recursionmode" get="1" set="1" type="int" size="1">
			<digest>
				Recursion Mode
			</digest>
			<description>
				When set to 0 and a sublist and a plain element are met, both are output as they are.
				When set to 1, the sublist is entered and iterated against the plain element, up to <m>maxdepth</m>.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Recursion Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="scalarmode" get="1" set="1" type="int" size="1">
			<digest>
				Scalar Mode
			</digest>
			<description>
				When set to 1 an llll with a single element is iterated against all the elements of the other lllls.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Scalar Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="spikemode" get="1" set="1" type="int" size="1">
			<digest>
				Spike Mode
			</digest>
			<description>
				A spike in an llll is a sequence of parentheses at least two of which are opposite:
				for instance, <b>[]</b> or <b>[[[]</b> or <b>]][][</b>.
				The <m>spikemode</m> attribute controls <o>bach.iter</o>'s behavior when a spike is met.
				When set to 0 (the default), a distinct integer for each sequence of same-direction parentheses
				is output from the rightmost outlet:
				for instance, <b>[]</b> will cause the sequence <m>1</m>, <m>-1</m> to be output;
				<b>[[[]</b> will cause <m>3</m>, <m>-1</m> to be output;
				<b>]][][</b> will cause <m>-2</m>, <m>1</m>, <m>-1</m>, <m>1</m> to be output.
				The sequence of integers from the rightmost outlet is triggered by a single <m>bang</m> in the first inlet.
				This setting is most useful in conjunction with <o>bach.collect</o>.
				When the <m>spikemode</m> attribute is set to 1, a single integer is output from the rightmost outlet for the whole spike.
				The integer represents the depth difference between the last element before the spike and the first element after it.
				The integers output for the previous examples would then be 0, 2, -1.
				When the <m>spikemode</m> attribute is set to 2, the values that are output are the same as for <m>spikemode 0</m>.
				In addition, after each value a set of <b>null</b> addresses and data is output from the llll outlets.
				When the <m>spikemode</m> attribute is set to 3, a distinct integer for each sequence of same-direction parentheses
				is output from the rightmost outlet, but - differently from what happens if the attribute is set to 0 -
				in this case each integer is triggered by a separate <m>bang</m> in the first inlet.
				This is the only case in which a bang does not trigger a value from any of <o>bach.step</o>'s data outlets
				during an iteration.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Spike Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="unwrap" get="1" set="1" type="int" size="1">
			<digest>
				Unwrap
			</digest>
			<description>
				When set to 1, every outgoing llll is flattened of its outermost level parentheses.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Unwrap" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		At each step of the iteration, <o>bach.step</o> also report if it has entered or exited a sublist,
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.iter" />
		<seealso name="bach.collect" />
		<seealso name="bach.drip" />
		<seealso name="03-Iterations" module="bach" type="tutorial" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (bang/reset)">
			<description>
				Advance one step/reset the iteration.
			</description>
		</entry>
		<entry name ="Inlets 2, 3, 4... (llll)">
			<description>
				llll to be iterated.
			</description>
		</entry>
		<entry name ="The last Inlet (int)">
			<description>
				lambda inlet.
				An integer (1 or 0) received as the response to a proposal from the lambda outlet
				causes the proposed sublists (or the whole lllls) to be entered and iterated through or not.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlets 1, 3, 5... (llll)">
			<description>
				Current element.
			</description>
		</entry>
		<entry name ="Outlets 2, 4, 6... (llll)">
			<description>
				Current element's address.
				An address is an llll providing a unique representation of the position of an element in another llll.
				It is a concept shared by many bach object.
				The address of each element of an llll's root level is simply its position counting from 1.
				The address of an element in a sublist is a list composed by the position of the element in the sublist,
				preceded by the position of the sublist in the parent llll,
				and so on up to the root level, as a sort of "path" to the element.<br />
				For instance, given the llll <b>a b c [d e [f g] h i] j k</b> the position of <b>c</b> is <b>3</b>;
				the position of <b>[d e [f g] h i]</b> is <b>4</b>;
				the position if <b>e</b> is <b>4 2</b> since to reach it it takes to go to the 4th element of the root level, which is a sublist,
				and to the 2nd element of that sublist.
				By reading the address from right to left, it can be seen that this is equivalent to saying
				that the pointed element is the 2nd of the 4th.
				Likewise, in the above llll <b>f</b> has the address <b>4 3 1</b> since it is the 1st of the 3rd of the 4th.<br />
			</description>
		</entry>
		<entry name ="The last Outlet (int/root/bang/llll)">
			<description>
				Depth Delta / Finished / Lambda Outlet.
				The difference between the depth of the previous and current elements,
				or the <m>root</m> symbol if the <m>maxdepth</m> attribute is set to 0.
				This value can be fed into <o>bach.collect</o>'s rightmost inlet.
				If there are no more elements to iterate upon, a bang is output unless the <m>circular</m> attribute is set.
				If the <m>lambda</m> attribute is set, proposals are output from the rightmost outlet whenever one or more sublists are met,
				as well as the very beginning of the iteration, and a return value is expected in the rightmost inlet
				telling whether the proposed sublists (or the whole lllls) should be entered or not.
				Please refer to the description of the <m>anything</m> message for more details.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		At each step of the iteration, <o>bach.step</o> also report if it has entered or exited a sublist,
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
iterate, iteration, step, manual, traverse, element, address, command.
			</description>
		</entry>
	</misc>

</c74object>