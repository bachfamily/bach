<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.sieve" module="bach" kind="patcher">

	<digest>
		Only let some elements through
	</digest>

	<description>
		Retains all the elements of an llll satisfying a given condition.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The original llll
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Comparison value
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Lambda inlet
			</digest>
			<description>
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is in a 0/1 form: if the element output from the lambda outlet is a match
				(according to your custom matching function, defined in the lambda loop),
				this inlet should receive a 1; otherwise it should receive a 0. <br />
				The lambda inlet also accepts the 0/1 result in a native llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The llll containing the retained elements
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Lambda outlet
			</digest>
			<description>
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from the lambda outlet have to be tested in order to know if they are a match:
				in the first case, you should return a 1 into the lambda inlet, in the second case you should return a 0. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="comparison" optional="1" type="llll">
			<digest>
				Default comparison llll
			</digest>
			<description>
				A default comparison llll. Ignored if a lambda loop is present.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Perform last operation
			</digest>
			<description>
				A <m>bang</m> in the first inlet outputs the result of the sieving on the most recently received llll
				and with the current matching criteria.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Lambda inlet
			</digest>
			<description>
				The criterium by which a given element or sequence of elements is considered a match, and retained,
				can be customized through an optional lambda loop.
				If the lambda loop is present, the <m>op</m> attribute and the llll received in the second inlet are ignored,
				and elements are output one by one from the lambda outlet.
				The lambda loop should return 1 to the third inlet if the element or sequence is a match, 0 if it is not.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				In first inlet: retains only some elements of the incoming llll, and output them from the first outlet.
				In second inlet: sets the comparison value for the specified operator (see <m>op</m> attribute).
				If a lambda loop is not present, the filtering is performed
				by applying such operator on all elements of the llll coming in the first inlet, with the specified comparison value,
				and all elements satisfying the condition (for which the operator returns a non-zero value) are retained, while
				all elements for which the condition is not matched (operator returning zero) are dropped.
				For instance, if the operator is <b>&gt;</b>, with comparison value <b>1</b>, and the llll coming
				through the first inlet is <b>0 [1.1 -2 [4 3/2 -5.2]]</b>, the output llll will be <b>[1.1 [4 3/2]]</b>, i.e.
				only elements greater than 1 have been retained.
				If a lambda loop is present the llll received in the second inlet is ignored,
				the chunks (whose size is determined by the <m>size</m> attribute) are output from the lambda outlet
				and a comparison result is expected in the lambda inlet.
				In third inlet (lambda inlet): an llll is converted to an int.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="maxdepth" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Depth
			</digest>
			<description>
				You can customize the maximum level of depth for filtering via the <m>maxdepth</m> attribute.
				Any element beyond the defined <m>maxdepth</m> will be let through. <br />
				<m>maxdepth</m> sets the maximum depth level at which the operation must be performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				A value of 0 is not accepted.
				Defaults to -1, i.e. there is no limitation (stop at the innermost level).
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Depth" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="op" get="1" set="1" type="symbol" size="1">
			<digest>
				Comparison Operator
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Comparison Operator" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The condition can be defined either via a predefined operator,
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.filter" />
		<seealso name="bach.thin" />
		<seealso name="bach.find" />
		<seealso name="bach.filternull" />
		<seealso name="03-Iterations" module="bach" type="tutorial" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The original llll.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Comparison value.
			</description>
		</entry>
		<entry name ="Inlet 3 (int/llll)">
			<description>
				Lambda inlet.
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is in a 0/1 form: if the element output from the lambda outlet is a match
				(according to your custom matching function, defined in the lambda loop),
				this inlet should receive a 1; otherwise it should receive a 0. <br />
				The lambda inlet also accepts the 0/1 result in a native llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The llll containing the retained elements.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Lambda outlet.
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from the lambda outlet have to be tested in order to know if they are a match:
				in the first case, you should return a 1 into the lambda inlet, in the second case you should return a 0. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The condition can be defined either via a predefined operator,
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
filter, keep, retain, let through, condition, if, lambda loop, operator, element.
			</description>
		</entry>
	</misc>

</c74object>