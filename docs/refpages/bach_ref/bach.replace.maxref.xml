<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.replace" module="bach" kind="patcher">

	<digest>
		Quickly find and replace elements
	</digest>

	<description>
		Search and replace all occurrences of an element, or all elements satisfying a condition.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The llll whose elements must be searched for substitutions
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				The comparison element to be matched
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				The elements for replacement
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="3" type="INLET_TYPE">
			<digest>
				Lambda inlet
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The modified llll
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Lambda outlet
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="old_element" optional="1" type="llll">
			<digest>
				Element to be replaced
			</digest>
			<description>
				The first optional argument is the element to be found and replaced (see <m>llll</m> message,
				second inlet, to know more).
			</description>
		</objarg>
		<objarg name="new_elements" optional="1" type="llll">
			<digest>
				Replacing llll
			</digest>
			<description>
				The second optional argument is the llll to be replaced at each occurrence (see <m>llll</m> message,
				third inlet, to know more).
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Replace elements in llll
			</digest>
			<description>
				Performs the replacement with the most recently received input data.
				<br /> N.B.: The object is not aware of changes you make in the lambda loop.
				If you change the lambda loop, you might want to re-input the most recent llll rather than just sending a <m>bang</m>.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Lambda inlet
			</digest>
			<description>
				Fourth inlet is a lambda inlet.
				The criterium by which a given element or sequence of elements is considered a match
				can be customized through an optional lambda loop.
				If the lambda loop is present, the <m>op</m> attribute and the llll received in the second inlet are ignored,
				and elements or sequences of elements (see the <m>size</m> attribute for more details) are output from the lambda outlet.
				The lambda loop should return 1 to the fourth inlet if the element or sequence is a match, 0 if it is not.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				An llll in the first inlet is the llll whose elements must be searched for substitutions.
				Such llll will trigger the substitution and the result llll will be output through the first outlet. <br />
				An llll in the second inlet contains the element which has to be searched (in order to replace it). Such llll
				is thus expected to have length 1, although it can represent a complex wrapped llll to be found, such as
				<b>[1 2 3]</b>. <br />
				An llll in the third inlet contains the element(s) which will be replaced for each occurrence. Such llll can be of any
				type. <br />
				For instance, if the element to be substituted is <b>1</b> in the llll <b>1 a b c [1] d [e 1 f]</b>, and
				the replacing elements are <b>foo [fee faa]</b>, the result will be
				<b>foo [fee faa] a b c [foo [fee faa]] d [e foo [fee faa] f]</b>. <br />
				An llll in the fourth inlet is converted into an <m>int</m>.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="depthreject" get="1" set="1" type="int" size="1">
			<digest>
				Depth Reject
			</digest>
			<description>
				When set to 1, the search depth range set through the <m>mindepth</m> and <m>maxdepth</m> attributes is inverted,
				meaning that the specified depth range is excluded from the search, rather than included.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Depth Reject" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="idxreject" get="1" set="1" type="int" size="1">
			<digest>
				Index Reject
			</digest>
			<description>
				When set to 1, the search range set through the <m>minidx</m> and <m>maxidx</m> attributes is inverted,
				meaning that the specified range is excluded from the search, rather than included.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Index Reject" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="maxcount" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Count
			</digest>
			<description>
				The number of matches to find. As soon as the specified number is reached, the search stops.
				The default is 0, meaning that all the matches are found.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Count" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxdepth" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Depth
			</digest>
			<description>
				<m>maxdepth</m> sets the maximum depth level at which the operation must be performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				A value of 0 is not accepted.
				Defaults to -1, i.e. there is no limitation (stop at the innermost level).
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Depth" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxidx" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Index
			</digest>
			<description>
				<m>maxidx</m> sets the position at which the search should end, for the root llll as well as any sublist.
				If negative, the position is counted backwards from the end.
				Defaults to 0, i.e. there is no limitation (equivalent to -1: end at the last element).<br />
				N.B.: when the <m>idxreject</m> attribute is set to 1,
				the specified index range is excluded from the search, rather than included.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Index" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="mindepth" get="1" set="1" type="int" size="1">
			<digest>
				Minimum Depth
			</digest>
			<description>
				<m>mindepth</m> sets the minimum depth level at which the operation must be performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				A value of 0 is not accepted.
				Defaults to 1, i.e. there is no limitation.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Minimum Depth" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="minidx" get="1" set="1" type="int" size="1">
			<digest>
				Minimum Index
			</digest>
			<description>
				<m>minidx</m> sets the position at which the search should begin, for the root llll as well as any sublist.
				If negative, the position is counted backwards from the end.
				Defaults to 0, i.e. there is no limitation (equivalent to 1: begin at the first element).<br />
				N.B.: when the <m>idxreject</m> attribute is set to 1,
				the specified index range is excluded from the search, rather than included.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Minimum Index" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="op" get="1" set="1" type="int" size="1">
			<digest>
				Comparison Operator
			</digest>
			<description>
				The comparison operator by which chunks of the llll in the first inlet are compared to the element or sequence in the second inlet.
				Valid operators are <m>==</m>, <m>!=</m>, <m>===</m>, <m>!==</m>
				(the two last being as <o>bach.==</o> and <o>bach.!=</o> with <m>matchtype 1</m>),
				<m>&lt;</m>, <m>&lt;=</m>, <m>&gt;</m>, <m>&gt;=</m>.
				The <m>op</m> attribute is ignored if a lambda loop is present.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Comparison Operator" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="size" get="1" set="1" type="int" size="1">
			<digest>
				Size
			</digest>
			<description>
				The size of each llll chunk to be output from the lambda outlet.
				The <m>size</m> attribute is ignored if a lambda loop is not present.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Size" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		<o>bach.replace</o> finds all the occurrences of a certain element.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.find" />
		<seealso name="bach.subs" />
		<seealso name="bach.nsubs" />
		<seealso name="03-Iterations" module="bach" type="tutorial" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The llll whose elements must be searched for substitutions.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				The comparison element to be matched.
			</description>
		</entry>
		<entry name ="Inlet 3 (llll)">
			<description>
				The elements for replacement.
			</description>
		</entry>
		<entry name ="Inlet 4 (int/llll)">
			<description>
				Lambda inlet.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The modified llll.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Lambda outlet.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		<o>bach.replace</o> finds all the occurrences of a certain element.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
replace, find, search, occurrence, condition, lambda loop, element.
			</description>
		</entry>
	</misc>

</c74object>