<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.primeform" module="bach">

	<digest>
		Compute the prime form of a pitch-class set
	</digest>

	<description>
		Computes the prime form of a pitch-class set, i.e. the "smalles" copy of the set,
		with respect to a given ordering, defined by the <m>mode</m> attribute.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach set theory</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Pitch-class set
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				The modulo
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Prime form of incoming pitch-class set
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Multiplier and Summand To Get To Prime Form
			</digest>
			<description>
				Two numbers are output. If one multiplies the original set by
				the first number, and then sums the second number, one obtains the prime form.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="modulo" optional="1" type="int">
			<digest>
				Modulo
			</digest>
			<description>
				In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
				points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
				<br /> <br />
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Perform the last prime form computation
			</digest>
			<description>
				Perform the prime form computation on the most recently received input data.
			</description>
		</method>
		<method name="getlist">
			<arg name="maxcard" optional="1" type="int" />
			<digest>
				Obtain a list of all prime forms
			</digest>
			<description>
				Syntax: <b>getlist <m>[&lt;int: maxcard&gt;]</m> </b><br />
				Examples:<br />
				• <b>getlist</b>   <i>→ get all the prime forms</i><br />
				• <b>getlist 4</b>   <i>→ ...of cardinality 4</i><br />
				• <b>getlist 4 7</b>   <i>→ ...of cardinality between 4 and 7</i><br />
				<br />
				If no further arguments are given, output the list of all prime forms.
				If a single (integer) argument is given, output the list of all prime form of that cardinality.
				If two arguments are given, those are considered to be the lower and upper boundary for the cardinalities
				of the prime form to output. <br />
				All output prime form are in any case regrouped in levels depending on their cardinalities
				(so all sets of cardinality k are gathered in a level of parenthesis.)
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Set modulo
			</digest>
			<description>
				An integer in the right inlet will set the modulo. <br />
				In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
				points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
				<br /> <br />
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Compute prime form of pitch-class set
			</digest>
			<description>
				In the first inlet, a pitch-class set, in the form of a plain list, will trigger the output of its prime form.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="group" get="1" set="1" type="int" size="1">
			<digest>
				Group
			</digest>
			<description>
				The group according to which we consider the prime forms. <br />
				In Set Theory, two pitch-class sets are often considered to be "the same" when they are linked by the action of some simple transformation.
				For instance, the sets <b>0 1 4</b> and <b>2 3 6</b> are linked by a transposition of 2 (corresponding, on the clock diagram, to a rotation of 2 steps).
				Such "simple transformations" usually form a group. One thus usually needs to choose a group to determine a framework; this group will entail
				the concept of "copy" of a pitch-class set: which is any other pitch-class set obtained by the action of a transformation of the group.
				For instance, if our group is the group of transposition, <b>2 3 6</b> is a copy of <b>0 1 4</b>, and viceversa. <br />
				The most common groups of such form in increasing nesting are: <br />
				- the group of transposition: formed by all the transposition by a certain amount, and there are only 12 transposition if our modulo is 12, or
				in general n transposition if our modulo is n (the mathemathicians would say that such group is isomorphic to the cyclic group Z_n).
				For instance, a C major chord is the same as a D major chord, with respect to this group, but it is NOT the same as a C minor chord. <br />
				- the group of transposition and inversions: formed by all the transposition of the previous group, plus all the combination of such transposition with
				inversions, i.e. reflection with respect to any axis on the clock diagram. If our modulo is n, this group has 2n elements (the mathemathicians
				would say that such group is isomorphic to the dihedral group D_n).
				For instance, a C major chord is the same as a D major chord, with respect to this group, and also the same as a C minor chord. <br />
				- the affine group of transposition, inversions, and multiplications: this group (here things get a little bit more complicated...) is formed
				by all the elements of the previous group plus we add the transformation multiplying each pitch class by a certain number k (prime with the modulo).
				Classical multiplications, with modulo = 12, are M_5 (multiplication by 5) and M_7 (multiplication by 7).
				For instance, our <b>0 4 7</b> C major chord is the same as <b>0 8 11</b>, since 5 * (0 4 7) = (0 20 35) = (0 8 11). <br />
				Up to the group of transposition and inversion, the interval vector of a pitch-class set is preserved. The affine group does not preserve the interval vector.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Group" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="mode" get="1" set="1" type="int" size="1">
			<digest>
				Mode
			</digest>
			<description>
				Criterion according to which the prime forms are chosen. <br />
				The prime form is always defined to be the "smallest" copy of a given set. This definition depends on the ordering one chooses.
				Two ordering are supported by bach: <br />
				<m>Lexicographic</m>: the prime form is the "smallest" copy of the set lexicographically (numbers are compared left to right).
				For instance <b>0 1 5 11</b> is preferred to <b>0 6 7 8</b>. <br />
				<m>Compactness First</m>: the lexicographic clause is secondary: primarily the prime form is chosen among the "most compact" prime forms,
				For instance <b>0 6 7 8</b> is preferred to its transposed <b>0 1 5 11</b>, although it is not preferred to its other transposed <b>0 1 2 6</b>.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		To understand the concept of copy, one should first refer to the concept of group action. <br />
		In Set Theory, two pitch-class sets are often considered to be "the same" when they are linked by the action of some simple transformation.
		For instance, the sets <b>0 1 4</b> and <b>2 3 6</b> are linked by a transposition of 2 (corresponding, on the clock diagram, to a rotation of 2 steps).
		Such "simple transformations" usually form a group. One thus usually needs to choose a group to determine a framework; this group will entail
		the concept of "copy" of a pitch-class set: which is any other pitch-class set obtained by the action of a transformation of the group.
		For instance, if our group is the group of transposition, <b>2 3 6</b> is a copy of <b>0 1 4</b>, and viceversa. <br />
		The most common groups of such form in increasing nesting are: <br />
		- the group of transposition: formed by all the transposition by a certain amount, and there are only 12 transposition if our modulo is 12, or
		in general n transposition if our modulo is n (the mathemathicians would say that such group is isomorphic to the cyclic group Z_n).
		For instance, a C major chord is the same as a D major chord, with respect to this group, but it is NOT the same as a C minor chord. <br />
		- the group of transposition and inversions: formed by all the transposition of the previous group, plus all the combination of such transposition with
		inversions, i.e. reflection with respect to any axis on the clock diagram. If our modulo is n, this group has 2n elements (the mathemathicians
		would say that such group is isomorphic to the dihedral group D_n).
		For instance, a C major chord is the same as a D major chord, with respect to this group, and also the same as a C minor chord. <br />
		- the affine group of transposition, inversions, and multiplications: this group (here things get a little bit more complicated...) is formed
		by all the elements of the previous group plus we add the transformation multiplying each pitch class by a certain number k (prime with the modulo).
		Classical multiplications, with modulo = 12, are M_5 (multiplication by 5) and M_7 (multiplication by 7).
		For instance, our <b>0 4 7</b> C major chord is the same as <b>0 8 11</b>, since 5 * (0 4 7) = (0 20 35) = (0 8 11). <br />
		Up to the group of transposition and inversion, the interval vector of a pitch-class set is preserved. The affine group does not preserve the interval vector.
		<br /> <br />
		In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
		points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
		<br /> <br />
		A pitch-class set is a plain collection of pitch-classes. A pitch class is nothing but the representative of a set of pitches.
		Traditionally, it corresponds to the concept of "note", once we abstract it from its octave.
		For instance, the semitonal framework (when the modulo is 12), all the C belong to the same pitch-class
		which will be named 0 = {..., C-1, C0, C1, C2, C3, C4, C5, ...}. The pitch-class 1 will be the one containing all C#'s (or Db's); pitch-class
		2 will contain all D's, and so on. One will use to name pitch class numbers from 0 to the modulo - 1: indeed, with modulo = 12, pitch-class 12 will coincide
		with pitch-class 0 (it'll be the C one octave higher). One can thus think at pitch-classes as equally spaced points on a clock, and transposing
		means rotating them on the clock. A pitch class set is thus represented just by a plain list of pitch classes, such <b>0 4 7</b>, representing the
		C major chord. Notice that this coincides with any other representation such as <b>12 4 19</b> or <b>0 -8 -5</b>, but the canonical form, where numbers
		are from 0 to the modulo-1 is always preferred. Also for pitch-class sets the order of elements is immaterial, and thus
		<b>0 4 7</b> or <b>4 0 7</b> or <b>7 4 0</b> will all represent the same set.
		On the other hand a pitch-class (as an abstract concept) can be used to represent things other than pitches,
		as for instance temporal position in a rhythmic pattern (loop) having a certain number (the modulo) of equally spaced elements.
		<br /> <br />
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.ifunc" />
		<seealso name="bach.zsearch" />
		<seealso name="bach.circle" />
		<seealso name="bach.ivec" />
		<seealso name="bach.pcsetinfo" />
		<seealso name="bach.mod+" />
		<seealso name="bach.mod-" />
		<seealso name="bach.modtimes" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				Pitch-class set.
			</description>
		</entry>
		<entry name ="Inlet 2 (int)">
			<description>
				The modulo.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Prime form of incoming pitch-class set.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Multiplier and Summand To Get To Prime Form.
				Two numbers are output. If one multiplies the original set by
				the first number, and then sums the second number, one obtains the prime form.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		To understand the concept of copy, one should first refer to the concept of group action. <br />
		In Set Theory, two pitch-class sets are often considered to be "the same" when they are linked by the action of some simple transformation.
		For instance, the sets <b>0 1 4</b> and <b>2 3 6</b> are linked by a transposition of 2 (corresponding, on the clock diagram, to a rotation of 2 steps).
		Such "simple transformations" usually form a group. One thus usually needs to choose a group to determine a framework; this group will entail
		the concept of "copy" of a pitch-class set: which is any other pitch-class set obtained by the action of a transformation of the group.
		For instance, if our group is the group of transposition, <b>2 3 6</b> is a copy of <b>0 1 4</b>, and viceversa. <br />
		The most common groups of such form in increasing nesting are: <br />
		- the group of transposition: formed by all the transposition by a certain amount, and there are only 12 transposition if our modulo is 12, or
		in general n transposition if our modulo is n (the mathemathicians would say that such group is isomorphic to the cyclic group Z_n).
		For instance, a C major chord is the same as a D major chord, with respect to this group, but it is NOT the same as a C minor chord. <br />
		- the group of transposition and inversions: formed by all the transposition of the previous group, plus all the combination of such transposition with
		inversions, i.e. reflection with respect to any axis on the clock diagram. If our modulo is n, this group has 2n elements (the mathemathicians
		would say that such group is isomorphic to the dihedral group D_n).
		For instance, a C major chord is the same as a D major chord, with respect to this group, and also the same as a C minor chord. <br />
		- the affine group of transposition, inversions, and multiplications: this group (here things get a little bit more complicated...) is formed
		by all the elements of the previous group plus we add the transformation multiplying each pitch class by a certain number k (prime with the modulo).
		Classical multiplications, with modulo = 12, are M_5 (multiplication by 5) and M_7 (multiplication by 7).
		For instance, our <b>0 4 7</b> C major chord is the same as <b>0 8 11</b>, since 5 * (0 4 7) = (0 20 35) = (0 8 11). <br />
		Up to the group of transposition and inversion, the interval vector of a pitch-class set is preserved. The affine group does not preserve the interval vector.
		<br /> <br />
		In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
		points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
		<br /> <br />
		A pitch-class set is a plain collection of pitch-classes. A pitch class is nothing but the representative of a set of pitches.
		Traditionally, it corresponds to the concept of "note", once we abstract it from its octave.
		For instance, the semitonal framework (when the modulo is 12), all the C belong to the same pitch-class
		which will be named 0 = {..., C-1, C0, C1, C2, C3, C4, C5, ...}. The pitch-class 1 will be the one containing all C#'s (or Db's); pitch-class
		2 will contain all D's, and so on. One will use to name pitch class numbers from 0 to the modulo - 1: indeed, with modulo = 12, pitch-class 12 will coincide
		with pitch-class 0 (it'll be the C one octave higher). One can thus think at pitch-classes as equally spaced points on a clock, and transposing
		means rotating them on the clock. A pitch class set is thus represented just by a plain list of pitch classes, such <b>0 4 7</b>, representing the
		C major chord. Notice that this coincides with any other representation such as <b>12 4 19</b> or <b>0 -8 -5</b>, but the canonical form, where numbers
		are from 0 to the modulo-1 is always preferred. Also for pitch-class sets the order of elements is immaterial, and thus
		<b>0 4 7</b> or <b>4 0 7</b> or <b>7 4 0</b> will all represent the same set.
		On the other hand a pitch-class (as an abstract concept) can be used to represent things other than pitches,
		as for instance temporal position in a rhythmic pattern (loop) having a certain number (the modulo) of equally spaced elements.
		<br /> <br />
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
prime form, pitch-class, normal form, order, group, modulo, action, copy, compute, calculate, transpose, invert.
			</description>
		</entry>
	</misc>

</c74object>