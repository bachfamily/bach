<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.playkeys" module="bach">

	<digest>
		Extract play information
	</digest>

	<description>
		Outputs selected parameters of <o>bach.score</o>'s and <o>bach.roll</o>'s playout information.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach notation</metadata>
	</metadatalist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Found match for the corresponding key
			</digest>
			<description>
				The llll coming from <o>bach.roll</o>'s or <o>bach.score</o>'s
				playout, containing note information in playout syntax
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="playkeys" optional="0" type="anything">
			<digest>
				Parameters
			</digest>
			<description>
				The names of the parameters to retrieve.
				Use an llll of type <b>[slot <m>number</m>]</b> or
				<b>[slot <m>name</m>]</b> to retrieve a given slot.
				If you need to retrieve multiple slots you can also
				join them in a single llll in the form
				<b>[slot <m>name_or_number</m> <m>name_or_number</m>...]</b>.
				Allowed parameters to retrieve correspond to the following symbols:
				"type", "onset", "symonset", "cents", "pitch", "duration", "symduration", "tail", "velocity",
				"midichannel", "tie", "voicenumber", "chordindex", "noteindex, "path" (these last three only meaningful
				if <m>playoutfullpath</m> is active for the notation object), "measurenumber"
				(only meaningful for notes and chords if <m>playoutfullpath</m> is active for the notation object), "breakpoints",
				"measureinfo", "name", "tempo", "quartertempo", "slot", "playoffset" (for partial played notes with
				<m>playpartialnotes</m> set to 2), "role" (for markers only), "slots" (all slots)
				In addition to these,
				also "play", "stop", "pause", "end" keys are allowed; the "router" key will output the incoming router message;
				they will report the corresponding actions with a bang.
				As a shortcut for dynamics-, lyrics-, articulations- and noteheads-slot (whose numbers are settable via the four corresponding attributes)
				the "dynamics", "lyrics", "articulations" and "noteheads" symbol can be used.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Perform last operation
			</digest>
			<description>
				The playkeys are searched for in the most recently received llll.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Search the llll for the specified playkeys
			</digest>
			<description>
				The first elements of the llll and all its sublists are examined, traversing the llll depth-first as in <o>bach.iter</o>.
				When a first element is found to match one of <o>bach.playkeys</o>'s arguments (the "playkeys"),
				the corresponding llll is output, with or without the key according to the <m>keep</m> attribute,
				and that key is no further looked for.<br />
				Anyway, all the found lllls are output right-to-left, according to their order in <o>bach.playkeys</o>'s arguments
				and regardless of their positions in the original llll.
				In case of multiple possible matches, the first matching llll that is found is output.
				If no match is found for any key, a bang is output from the rightmost outlet.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="annotationslot" get="1" set="1" type="atom" size="1">
			<digest>
				Annotation Slot Number
			</digest>
			<description>
				Sets the number of the slot containing textual annotations (0 if none).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Annotation Slot Number" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="articulationsslot" get="1" set="1" type="atom" size="1">
			<digest>
				Articulations Slot Number
			</digest>
			<description>
				Sets the number of the slot containing articulations (0 if none).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Articulations Slot Number" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="breakpointshavevelocity" get="1" set="1" type="int" size="1">
			<digest>
				Breakpoints Have Velocity
			</digest>
			<description>
				Toggles the ability, for pitch breakpoints, to have their own independent velocity.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Breakpoints Have Velocity" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="defaultbreakpoints" get="1" set="1" type="int" size="1">
			<digest>
				Use Default Breakpoints
			</digest>
			<description>
				When set to 1, uses default breakpoints for notes without glissandi.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Use Default Breakpoints" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="dynamicsslot" get="1" set="1" type="atom" size="1">
			<digest>
				Dynamics Slot Number
			</digest>
			<description>
				Sets the number of the slot containing dynamics (0 if none).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Dynamics Slot Number" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="lyricsslot" get="1" set="1" type="atom" size="1">
			<digest>
				Lyrics Slot Number
			</digest>
			<description>
				Sets the number of the slot containing lyrics (0 if none).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Lyrics Slot Number" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="noteheadslot" get="1" set="1" type="atom" size="1">
			<digest>
				Notehead Slot Number
			</digest>
			<description>
				Sets the number of the slot containing noteheads (0 if none).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Notehead Slot Number" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="nullmode" get="1" set="1" type="int" size="1">
			<digest>
				Output null
			</digest>
			<description>
				Handles when <b>null</b> is output from a given key outlet.
				0 = Never; 1 = only for keys without any content (default); 2 = also for unmatched keys (e.g. keys that has no meaning for the specific notation item,
				such as velocity for markers, etc.).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output null" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="routers" get="1" set="1" type="llll" size="1">
			<digest>
				Routers To Accept
			</digest>
			<description>
				List of router symbols which will be accepted. Leave empty to process all possible routers.
				E.g. <b>note tempo</b> will only accept "note"- and "tempo"-routed playout lllls. <br />
				You can have <o>bach.playkeys</o> intercept commands as well, provided that you set aliases via an llll starting
				with "note", "chord" or "rest" (depending on the type of alias). E.g. <b>@routers note [note mynotecommand1 mynotecommand2]</b>
				will intercept <b>note</b> messages, as well as note commands <b>mynotecommand1</b> and <b>mynotecommand2</b>.
				To only intercept commands, simply use something like <b>@routers [note mynotecommand1 mynotecommand2]</b>.
				If you want to add some commands for acceptance (and to keep everything else accepted) use "+" as first element, such as in
				<b>@routers + [rest myrestcommand]</b>.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Routers To Accept" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="voicefilter" get="1" set="1" type="int_array" size="0">
			<digest>
				Filter Voices
			</digest>
			<description>
				Limits the output of items to one or more voices (specified in the array).
				If no voice is set, all elements are output. Use voice 0 to only output elements that do not have any voice.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Filter Voices" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="wrapmode" get="1" set="1" type="int" size="1">
			<digest>
				Only Wrap Chords llll Data
			</digest>
			<description>
				When set to 1, it only wraps llll parameters if the playout input is a chord.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Only Wrap Chords llll Data" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.keys" />
		<seealso name="bach.roll" />
		<seealso name="bach.score" />
	</seealsolist>

	<misc name = "Output">
		<entry name ="Outlets 1, 2, 3... (llll)">
			<description>
				Found match for the corresponding key.
				The llll coming from <o>bach.roll</o>'s or <o>bach.score</o>'s
				playout, containing note information in playout syntax
			</description>
		</entry>
	</misc>

</c74object>