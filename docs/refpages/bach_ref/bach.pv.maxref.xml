<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.pv" module="bach">

	<digest>
		Share lllls within a patch hierarchy
	</digest>

	<description>
		Shares the data it receives with other <o>bach.pv</o> objects with the same name, located in the same patch hierarchy.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				llll to be stored and shared, or bang to output it
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The stored llll
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="name" optional="0" type="symbol">
			<digest>
				Name
			</digest>
			<description>
				All the <o>bach.pv</o> objects with the same name and located in the same patcher hierarchy
				share the same data.
			</description>
		</objarg>
		<objarg name="initial" optional="1" type="llll">
			<digest>
				Default llll
			</digest>
			<description>
				Initial llll to be shared.
				No more than one <o>bach.pv</o> instance per sharing group should have the llll argument set.
				If more than one do, it is undefined which llll will be eventually shared.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(doubleclick)">
			<arglist />
			<digest>
				Edit llll as text
			</digest>
			<description>
				Doubleclicking on the object forces a text editor to open up, where the llll can be edited directly in text form.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Output the shared llll
			</digest>
			<description>
				When <o>bach.pv</o> receives a bang, it outputs its shared llll.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Store and share the llll
			</digest>
			<description>
				The llll is stored and shared between all the other instances of <o>bach.pv</o> with the same name,
				located in the same patcher hierarchy.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="auto" get="1" set="1" type="int_array" size="0">
			<digest>
				Automatically output llll
			</digest>
			<description>
				When set to 1, the stored llll is automatically output
				whenever it is set by another object of the same name and in the same hierarchy.<br/>
				An optional second integer sets the priority (defaulting to 0):
				the priority controls the order in which different bach.value objects
				of the same name (and with the <b>auto</b> attribute switched on)
				will automatically output the llll they receive.
				The higher the priority, the earlier the object will fire.
				The output order of objects with the same priority is undefined.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Automatically output llll" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		Other <o>bach.pv</o> objects with the same name, but belonging to different patcher hierarchies,
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.value" />
		<seealso name="bach.shelf" />
		<seealso name="bach.reg" />
		<seealso name="value" />
		<seealso name="pv" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll/bang)">
			<description>
				llll to be stored and shared, or bang to output it.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The stored llll.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		Other <o>bach.pv</o> objects with the same name, but belonging to different patcher hierarchies,
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
share, value, data, patch, hierarchy, name.
			</description>
		</entry>
	</misc>

</c74object>