<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.tree" module="bach">

	<digest>
		Display and edit lllls in a tree diagram
	</digest>

	<description>
		Provides a simple interface for displaying and editing llll as tree diagrams.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
		<metadata name="tag">bach interface</metadata>
		<metadata name="tag">U/I</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The llll to be displayed
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The displayed llll, when dumped
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				The clicked element
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				The address of the clicked element
			</digest>
			<description>
				An address is an llll providing a unique representation of the position of an element in another llll.
				It is a concept shared by many bach object.
				The address of each element of an llll's root level is simply its position counting from 1.
				The address of an element in a sublist is a list composed by the position of the element in the sublist,
				preceded by the position of the sublist in the parent llll,
				and so on up to the root level, as a sort of "path" to the element.<br />
				For instance, given the llll <b>a b c [d e [f g] h i] j k</b> the position of <b>c</b> is <b>3</b>;
				the position of <b>[d e [f g] h i]</b> is <b>4</b>;
				the position if <b>e</b> is <b>4 2</b> since to reach it it takes to go to the 4th element of the root level, which is a sublist,
				and to the 2nd element of that sublist.
				By reading the address from right to left, it can be seen that this is equivalent to saying
				that the pointed element is the 2nd of the 4th.
				Likewise, in the above llll <b>f</b> has the address <b>4 3 1</b> since it is the 1st of the 3rd of the 4th.<br />
			</description>
		</outlet>
		<outlet id="3" type="INLET_TYPE">
			<digest>
				Queries and notifications
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="4" type="INLET_TYPE">
			<digest>
				bang when changed
			</digest>
			<description>
				This outlet sends a bang whenever the tree llll has been changed via the interface.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(keyboard)">
			<arglist />
			<digest>
				Edit nodes or dump
			</digest>
			<description>
				• <m>Cmd+T</m> (mac) or <m>Ctrl+T</m> (win): Rotate selected llll node of 1 step right <br />
				• <m>Cmd+R</m> (mac) or <m>Ctrl+R</m> (win): Rotate selected llll node of 1 step left <br />
				• <m>Cmd+I</m> (mac) or <m>Ctrl+I</m> (win): Reverse llll node <br />
				• <m>Cmd+Y</m> (mac) or <m>Ctrl+Y</m> (win): Scramble llll node <br />
				• <m>Cmd+P</m> (mac) or <m>Ctrl+P</m> (win): Wrap llll node <br />
				• <m>Cmd+Shift+P</m> (mac) or <m>Ctrl+Shift+P</m> (win): Remove 1 level of parentheses <br />
				• <m>Cmd+D</m> (mac) or <m>Ctrl+D</m> (win): Duplicate node <br />
				• <m>Cmd+C</m> (mac) or <m>Ctrl+C</m> (win): Copy node content <br />
				• <m>Cmd+V</m> (mac) or <m>Ctrl+V</m> (win): Paste node content <br />
				• <m>Cmd+Shift+D</m> (mac) or <m>Ctrl+Shift+D</m> (win): Dump content <br />
				• <m>Cmd+Z</m> (mac) or <m>Ctrl+Z</m> (win): Undo <br />
				• <m>Cmd+Shift+Z</m> (mac) or <m>Ctrl+Y</m> (win): Redo <br />
				• <m>Enter</m> or <m>Return</m>: End editing tree node <br />
				• <m>Tab</m> and <m>Shift+Tab</m>: Switch to editing (respectively) next and previous tree node <br />
				• <m>Esc</m>: Un-click the clicked node (if any) <br />
				• <m>↑</m>: Select previous item (in Outline mode) <br />
				   ↪ Add the <m>Shift</m> key to automatically open closed nodes. <br />
				• <m>↓</m>: Select next item (in Outlien mode) <br />
				   ↪ Add the <m>Shift</m> key to automatically open closed nodes. <br />
				• <m>→</m>: Open tree node (in Outline mode) <br />
				• <m>←</m>: Close tree node (in Outlien mode) <br />
			</description>
		</method>
		<method name="(mouse)">
			<arglist />
			<digest>
				Output or edit clicked element
			</digest>
			<description>
				The clicked element of the diagram (if any) is output from the second outlet,
				while its address is output from the third outlet. <br />
				Clicking on an arrow or on a non-leaf node with <m>onlyclickonleaves</m> set to 1 will
				open/close the corresponding node, and will send a notification through the third outlet, in
				the form <b>open <m>wrapped_node_address</m></b> or <b>open <m>close_node_address</m></b>.
				In Checkbox outline mode, a click on the checkbox will toggle the value change. <br />
				Doubleclick on an element to edit it directly, then press Enter or Return to end editing.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Output llll
			</digest>
			<description>
				The displayed llll is output from the first outlet, as for the <m>dump</m> message.
			</description>
		</method>
		<method name="clear">
			<arglist />
			<digest>
				Clear the diagram
			</digest>
			<description>
				The displayed llll (if any) is removed from the diagram.
			</description>
		</method>
		<method name="click">
			<arg name="wrapped_address" optional="0" type="llll/symbol" />
			<digest>
				Set a given node as the clicked node, output information
			</digest>
			<description>
				Syntax: <b>click <m>&lt;llll/symbol: wrapped_address&gt;</m> </b><br />
				Examples:<br />
				• <b>click [1 3 4]</b>   <i>→ click on the point having address (1 3 4)</i><br />
				• <b>click []</b>   <i>→ click on root node</i><br />
				• <b>click next</b>   <i>→ click on the next element</i><br />
				• <b>click prev</b>   <i>→ click on the previous element</i><br />
				<br />
				A <m>click</m> message sets a given node as the clicked node, and outputs its address and content
				through the second and third outlets.
				The argument is the wrapped address of the node to be clicked. Such address can be replaced by the "prev" or "next" symbols
				in order to click on the previous or next node, with respect to the one being currently clicked (if any).
				The ordering of nodes is assumed to be the one used by <o>bach.iter</o> while iterating.
				For instance, <b>click [1 3 4]</b> clicks on the llll element having address <b>1 3 4</b>, and <b>click next</b> then clicks on
				the following address.
				If the clicked node was inside folded levels, such levels are properly unfolded.
				<br />				See also:<m>open</m>,<m>close</m>,<m>switch</m><br />
			</description>
		</method>
		<method name="close">
			<arg name="arguments" optional="1" type="list" />
			<digest>
				Fold diagram levels (in Outline or Checkbox Outline mode)
			</digest>
			<description>
				Syntax: <b>close <m>[&lt;list: arguments&gt;]</m> </b><br />
				Examples:<br />
				• <b>close 0</b>   <i>→ close root level (if visible)</i><br />
				• <b>close 1</b>   <i>→ close nodes at first level</i><br />
				• <b>close 2 4</b>   <i>→ close nodes between 2nd and 4th depth level</i><br />
				• <b>close 3 -1</b>   <i>→ close nodes at the 3rd level or deeper</i><br />
				• <b>close [1 4 2]</b>   <i>→ close node at address (1 4 2)</i><br />
				<br />
				In the Outline or Checkbox Outline <m>mode</m>, folds the lllls for a certain range of depths. <br /> <br />
				If no arguments are given, this folds all the llll levels. <br />
				If one integer argument is given, it is considered to be both the mindepth and the maxdepth for llll levels to be folded. <br />
				If two integer arguments are given, they are considered to be the mindepth and maxdepth for llll levels to be folded. <br />
				Depth 0 refers to the root level. <br />
				<m>mindepth</m> sets the minimum depth level at which the operation must be performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				A value of 0 is not accepted.
				Defaults to 1, i.e. there is no limitation.
				<br /> <br />
				<m>maxdepth</m> sets the maximum depth level at which the operation must be performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				A value of 0 is not accepted.
				Defaults to -1, i.e. there is no limitation (stop at the innermost level).
				<br /> <br />
				<br />				See also:<m>open</m>,<m>switch</m>,<m>click</m><br />
			</description>
		</method>
		<method name="dump">
			<arglist />
			<digest>
				Output llll
			</digest>
			<description>
				The displayed llll is output from the first outlet.
			</description>
		</method>
		<method name="getcheck">
			<arglist />
			<digest>
				Get check values (in Checkbox Outline mode)
			</digest>
			<description>
				In the Checkbox Outline <m>mode</m>, obtains the llll containing the
				check values for each element in the llll (0 = unchecked, 1 = checked). If the
				<m>firsteleminllllisllllname</m> attribute is set, first elements are associated
				with a value pertaining to the whole llll, which can also be -1 (if internal nodes have
				mixed checking. The result llll is output through the fourth outlet, preceded by the "check" symbol.
			</description>
		</method>
		<method name="getcheckitems">
			<arglist />
			<digest>
				Get checked items (in Checkbox Outline mode)
			</digest>
			<description>
				In the Checkbox Outline <m>mode</m>, obtains the llll containing the
				checked elements for each element in the llll (0 = unchecked, 1 = checked).
				The result llll is output through the fourth outlet, preceded by the "checkitems" symbol.
			</description>
		</method>
		<method name="getdomainpixels">
			<arglist />
			<digest>
				Obtain the visibile portion of tree in pixels
			</digest>
			<description>
				In Outline or Checkbox Outline mode, returns the vertical pixels of the visible portion of tree, with the syntax:
				<b>domainpixels <m>upper_y</m> <m>lower_y</m></b>, where <m>upper_y</m> is the upper first visible pixel of the tree,
				and <m>lower_y</m> is the lower last visible pixel of the tree.
				If no vertical scrollbar is present, it simply returns the Y pixels of the upper and lower side of the object box.
				It only works in Outline or Checkbox Outline mode (nothing will happen in Node/Link mode).
			</description>
		</method>
		<method name="getopenstate">
			<arglist />
			<digest>
				Get the open state of each element (in Checkbox Outline mode)
			</digest>
			<description>
				In the Checkbox Outline <m>mode</m>, obtains the llll containing 1's and 0's
				depending on whether levels are open or closed. Each level of parenthesis has one more element
				among its children, the former one, being 1 if the level is open and 0 otherwise.
				The result llll is output through the fourth outlet, preceded by the "openstate" symbol.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Display llll in tree form
			</digest>
			<description>
				An incoming llll is displayed in tree form.
			</description>
		</method>
		<method name="open">
			<arg name="arguments" optional="1" type="list" />
			<digest>
				Unfold diagram levels (in Outline or Checkbox Outline mode)
			</digest>
			<description>
				Syntax: <b>open <m>[&lt;list: arguments&gt;]</m> </b><br />
				Examples:<br />
				• <b>open 0</b>   <i>→ open root level (if visible)</i><br />
				• <b>open 1</b>   <i>→ open nodes at first level</i><br />
				• <b>open 2 4</b>   <i>→ open nodes between 2nd and 4th depth level</i><br />
				• <b>open 3 -1</b>   <i>→ open nodes at the 3rd level or deeper</i><br />
				• <b>open [1 4 2]</b>   <i>→ open node at address (1 4 2)</i><br />
				<br />
				In the Outline or Checkbox Outline <m>mode</m>, unfolds the lllls for a certain range of depths. <br />
				If no arguments are given, this unfolds all the llll levels. <br />
				If one integer argument is given, it is considered to be both the mindepth and the maxdepth for llll levels to be unfolded. <br />
				If two integer arguments are given, they are considered to be the mindepth and maxdepth for llll levels to be unfolded. <br />
				Depth 0 refers to the root level. <br />
				<m>mindepth</m> sets the minimum depth level at which the operation must be performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				A value of 0 is not accepted.
				Defaults to 1, i.e. there is no limitation.
				<br /> <br />
				<m>maxdepth</m> sets the maximum depth level at which the operation must be performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				A value of 0 is not accepted.
				Defaults to -1, i.e. there is no limitation (stop at the innermost level).
				<br /> <br />
				<br />				See also:<m>close</m>,<m>switch</m>,<m>click</m><br />
			</description>
		</method>
		<method name="redo">
			<arglist />
			<digest>
				Perform a redo step
			</digest>
			<description>
				A <m>redo</m> message will perform a redo step.
				<br />				See also:<m>undo</m><br />
			</description>
		</method>
		<method name="setcheck">
			<arg name="check_values" optional="0" type="sym/llll" />
			<digest>
				Set check values (in Checkbox Outline mode)
			</digest>
			<description>
				Syntax: <b>setcheck <m>&lt;sym/llll: check_values&gt;</m> </b><br />
				Examples:<br />
				• <b>setcheck all</b>   <i>→ check all elements</i><br />
				• <b>setcheck none</b>   <i>→ uncheck all elements</i><br />
				• <b>setcheck 1 0 0 1</b>   <i>→ check first and last element of a plain list</i><br />
				• <b>setcheck -1 [-1 [1 1 1 1] [-1 0 1]]</b>   <i>→ set (mixed) checking for more complex llll</i><br />
				<br />
				In the Checkbox Outline <m>mode</m>, sets the checkbox values for
				each element from a given llll (0 = unchecked, 1 = checked). The <m>setcheck all</m> message
				sets all the check values to 1, the <m>setcheck none</m> message sets all the check values to 0.
			</description>
		</method>
		<method name="switch">
			<arg name="arguments" optional="1" type="list" />
			<digest>
				Fold/Unfold diagram levels (in Outline or Checkbox Outline mode)
			</digest>
			<description>
				Syntax: <b>switch <m>[&lt;list: arguments&gt;]</m> </b><br />
				Examples:<br />
				• <b>switch 0</b>   <i>→ switch root level (if visible)</i><br />
				• <b>switch 1</b>   <i>→ switch nodes at first level</i><br />
				• <b>switch 2 4</b>   <i>→ switch nodes between 2nd and 4th depth level</i><br />
				• <b>switch 3 -1</b>   <i>→ switch nodes at the 3rd level or deeper</i><br />
				• <b>switch [1 4 2]</b>   <i>→ switch node at address (1 4 2)</i><br />
				<br />
				In the Outline or Checkbox Outline <m>mode</m>, folds the unfolded llll levels, and unfolds the folded llll levels, for a certain range of depths <br /> <br />
				If no arguments are given, this switches all the llll levels. <br />
				If one integer argument is given, it is considered to be both the mindepth and the maxdepth for llll levels to be switched. <br />
				If two integer arguments are given, they are considered to be the mindepth and maxdepth for llll levels to be switched. <br />
				Depth 0 refers to the root level. <br />
				<m>mindepth</m> sets the minimum depth level at which the operation must be performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				A value of 0 is not accepted.
				Defaults to 1, i.e. there is no limitation.
				<br /> <br />
				<m>maxdepth</m> sets the maximum depth level at which the operation must be performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				A value of 0 is not accepted.
				Defaults to -1, i.e. there is no limitation (stop at the innermost level).
				<br /> <br />
				<br />				See also:<m>open</m>,<m>close</m>,<m>click</m><br />
			</description>
		</method>
		<method name="undo">
			<arglist />
			<digest>
				Perform an undo step
			</digest>
			<description>
				An <m>undo</m> message will perform an undo step.
				<br />				See also:<m>redo</m><br />
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="alternate" get="1" set="1" type="int" size="1">
			<digest>
				Alternate Stripes
			</digest>
			<description>
				Alternate stripes in the background of the object (only in Outline
				mode, see <m>mode</m> attribute, and see <m>alternatecolor</m> attribute).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Alternate Stripes" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="alternatecolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Alternate Color
			</digest>
			<description>
				The color superposed to the <m>bgcolor</m> for the even-indexed stripes, if the <m>alternate</m> attribute is active.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.929 0.953 0.996 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Alternate Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="bgcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Background Color
			</digest>
			<description>
				The color of the background.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="1. 1. 1. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Background Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="bordercolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Border Color
			</digest>
			<description>
				The color of the border.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Border Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="checkcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Checkbox Color
			</digest>
			<description>
				The color of the checkbox (for the Checkbox Outline mode)
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Checkbox Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="clickedstripcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Selected Strip Color
			</digest>
			<description>
				The color of the strip behind the text of the selected element,
				in the Outline mode (see <m>mode</m> attribute)
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.855 0.840 0.887 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Selected Strip Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="clickedtextcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Clicked Node Color
			</digest>
			<description>
				The color of the text of a selected element (element which has been just clicked upon).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.8 0. 0.8 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Clicked Node Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="embed" get="1" set="1" type="int" size="1">
			<digest>
				Save Data With Patcher
			</digest>
			<description>
				Toggles the ability to save the content with the patch when this latter is saved.
				The default behaviour is 1 (save the data with the patch).
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Save Data With Patcher" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="enclosure" get="1" set="1" type="int" size="1">
			<digest>
				Enclose Elements In Rectangles
			</digest>
			<description>
				Toggles the display of enclosing rectangles for each tree node.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Enclose Elements In Rectangles" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="enclosurebgcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Enclosure Background Color
			</digest>
			<description>
				The background color of the rectangle enclosing each node (if the <m>enclosure</m> attribute is set to 1).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="1. 0.97 0.95 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Enclosure Background Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="enclosurelinecolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Enclosure Line Color
			</digest>
			<description>
				The border color of the rectangle enclosing each node (if the <m>enclosure</m> attribute is set to 1).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.2 0.2 0.2 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Enclosure Line Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="firsteleminllllisllllname" get="1" set="1" type="int" size="1">
			<digest>
				First Elements Are llll Names
			</digest>
			<description>
				Toggles the ability to interpret first elements in each llll as the name assigned to such llll,
				and display that name in the llll node.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="First Elements Are llll Names" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="hinset" get="1" set="1" type="float" size="1">
			<digest>
				Horizontal Inset
			</digest>
			<description>
				Horizontal inset of the tree display, in pixels.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="4." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Horizontal Inset" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="hoverstripcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Strip Color When Mouse Is Over
			</digest>
			<description>
				The color of the strip behind the text, in the Outline or Checkbox Outline mode (see <m>mode</m> attribute)
				when the mouse is over it.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.953 0.918 0.941 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Strip Color When Mouse Is Over" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="hovertextcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Text Color When Mouse Is Over
			</digest>
			<description>
				The color of the text when the mouse is over it.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Text Color When Mouse Is Over" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="linecolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Line Color
			</digest>
			<description>
				The color of the lines linking the tree nodes.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Line Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="linewidth" get="1" set="1" type="float" size="1">
			<digest>
				Line Width
			</digest>
			<description>
				The width of the line linking the tree nodes
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Line Width" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="llllsymbol" get="1" set="1" type="symbol" size="1">
			<digest>
				Placeholder for lllls
			</digest>
			<description>
				A symbol serving as placeholder to represent llll nodes (unless the attribute
				<m>firsteleminllllisllllname</m> is set).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Value" />
				<attribute name="default" get="1" set="1" type="symbol" size="1" value="[...]" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Placeholder for lllls" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxdecimals" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Number of Decimals in Floating-Point Numbers
			</digest>
			<description>
				Maximum number of decimals to represent floating point numbers in lllls.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Value" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Number of Decimals in Floating-Point Numbers" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxdepth" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Depth
			</digest>
			<description>
				Maximum depth level at which the tree branching must stop.
				If it is negative, the depth level is counted from the innermost level of each branch of the tree.
				Defaults to 0, i.e. there is no limitation (equivalent to -1: stop at the innermost level).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Value" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="-1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Depth" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxundosteps" get="1" set="1" type="atom" size="1">
			<digest>
				Maximum Number Of Undo Steps
			</digest>
			<description>
				Sets the maximum number of undo steps. 0 means that undo/redo system will be made inactive.
				The "inf" symbol means unlimited undo steps.
				Defaults to 50. You should change it to 0 if you perform heavy operations in real-time.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="atom" size="1" value="50" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Number Of Undo Steps" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="mode" get="1" set="1" type="int" size="1">
			<digest>
				Mode
			</digest>
			<description>
				If the mode is <m>Node-Link</m> (default), a diagram with nodes linked via lines is displayed vertically.
				each llll branches into its "leaves" ("sons") via multiple lines. If the mode is <m>Outline</m> or <m>Checkbox Outline</m> a diagram in the
				"Folder Inspect" style is displayed, where everything is written line by line, and sons are indented, and each llll
				can be "open" or "closed".
				In the <m>Checkbox Outline</m>, each element also has a checkbox associated with it (also see <m>getcheck</m> and <m>setcheck</m> messages).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="onlyclickonleaves" get="1" set="1" type="int" size="1">
			<digest>
				Only Allow Click On Leaves
			</digest>
			<description>
				If this flag is set, the user will have the ability to click only on non-llll elements inside the tree
				(i.e.: on "leaves"), while the llll levels will ignore the click.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Only Allow Click On Leaves" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
				llllobj_class_add_version_number_attr(c, LLLL_OBJ_UI);
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="outputllllnames" get="1" set="1" type="int" size="1">
			<digest>
				Output llll Names Upon Click
			</digest>
			<description>
				If this flag is set and <m>firsteleminllllisllllname</m> is set to 1, when the user clicks on a node
				representing an llll (displayed with its name), only the name is output and not the whole llll.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output llll Names Upon Click" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="presetmode" get="1" set="1" type="int" size="1">
			<digest>
				Presets Account For
			</digest>
			<description>
				Sets the elements which are recovered when a preset is called.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Presets Account For" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="preventedit" get="1" set="1" type="int" size="1">
			<digest>
				Prevent Editing
			</digest>
			<description>
				Prevents the editing of <o>bach.tree</o>'s nodes, via mouse and keyboard.
				By default this is inactive (nodes are editable).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Prevent Editing" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="rounded" get="1" set="1" type="float" size="1">
			<digest>
				Roundness of Box Corners
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="6." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Roundness of Box Corners" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="rowvpad" get="1" set="1" type="float" size="1">
			<digest>
				Row Vertical Pad
			</digest>
			<description>
				Vertical pad for each row of the Outline <m>mode</m>, in pixels.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="0." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Row Vertical Pad" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="separation" get="1" set="1" type="float" size="1">
			<digest>
				Separation Between Leaves
			</digest>
			<description>
				Minimum separation in pixels from two elements on the same branch, at the same level of depth,
				for font size 12 (and scaled accordingly for other font sizes).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="15" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Separation Between Leaves" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="showfocus" get="1" set="1" type="int" size="1">
			<digest>
				Show Focus
			</digest>
			<description>
				Show that the object has the focus by increasing the width of the border.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Focus" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showrootnode" get="1" set="1" type="int" size="1">
			<digest>
				Show Root llll Node
			</digest>
			<description>
				Toggles the display of a first "virtual" node representing the whole llll (i.e. the root level).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Root llll Node" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="textcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Text Color
			</digest>
			<description>
				The color of the text.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.1 0.1 0.1 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Text Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="textdecayfactor" get="1" set="1" type="float" size="1">
			<digest>
				Text Depth Decay Factor
			</digest>
			<description>
				Factor for the font size which is applied to each depth level, so that one can
				have the text reducing in size at each level (from top to bottom).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Text Depth Decay Factor" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="tricolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Triangle Color
			</digest>
			<description>
				The color of the triangle (for the Outline or Checkbox Outline mode)
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.5 0.5 0.5 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Triangle Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="unwrap" get="1" set="1" type="int" size="1">
			<digest>
				Unwrap lllls Upon Click
			</digest>
			<description>
				If this flag is set, when an llll node has been clicked, the external level of parenthesis of the
				corresponding llll is discarded, before outputting it.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Unwrap lllls Upon Click" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="verboseundo" get="1" set="1" type="int" size="1">
			<digest>
				Post Undo/Redo Steps
			</digest>
			<description>
				Toggles the ability of undo system to post the performed undo or redo steps in the Max window.
				By default this is inactive.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Post Undo/Redo Steps" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="vinset" get="1" set="1" type="float" size="1">
			<digest>
				Vertical Inset
			</digest>
			<description>
				Vertical inset of the tree display, in pixels.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="4." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Vertical Inset" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The incoming llll is displayed in tree form. Clicked elements (and addresses) are output from dedicated outlets.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.print" />
		<seealso name="bach.post" />
		<seealso name="bach.reg" />
		<seealso name="bach.depth" />
		<seealso name="bach.portal" />
		<seealso name="bach.keychain" />
		<seealso name="bach.path2llll" />
		<seealso name="01-Hello World" module="bach" type="tutorial" />
		<seealso name="05-Slot Machines" module="bach" type="tutorial" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The llll to be displayed.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The displayed llll, when dumped.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				The clicked element.
			</description>
		</entry>
		<entry name ="Outlet 3 (llll)">
			<description>
				The address of the clicked element.
				An address is an llll providing a unique representation of the position of an element in another llll.
				It is a concept shared by many bach object.
				The address of each element of an llll's root level is simply its position counting from 1.
				The address of an element in a sublist is a list composed by the position of the element in the sublist,
				preceded by the position of the sublist in the parent llll,
				and so on up to the root level, as a sort of "path" to the element.<br />
				For instance, given the llll <b>a b c [d e [f g] h i] j k</b> the position of <b>c</b> is <b>3</b>;
				the position of <b>[d e [f g] h i]</b> is <b>4</b>;
				the position if <b>e</b> is <b>4 2</b> since to reach it it takes to go to the 4th element of the root level, which is a sublist,
				and to the 2nd element of that sublist.
				By reading the address from right to left, it can be seen that this is equivalent to saying
				that the pointed element is the 2nd of the 4th.
				Likewise, in the above llll <b>f</b> has the address <b>4 3 1</b> since it is the 1st of the 3rd of the 4th.<br />
			</description>
		</entry>
		<entry name ="Outlet 4 (llll)">
			<description>
				Queries and notifications.
			</description>
		</entry>
		<entry name ="Outlet 5 (bang)">
			<description>
				bang when changed.
				This outlet sends a bang whenever the tree llll has been changed via the interface.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The incoming llll is displayed in tree form. Clicked elements (and addresses) are output from dedicated outlets.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
display, edit, tree, outline, branch, leaf, diagram.
			</description>
		</entry>
	</misc>

</c74object>