<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.thin" module="bach">

	<digest>
		Remove duplicate elements
	</digest>

	<description>
		Removes duplicate elements from an llll.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				llll to remove duplicates from
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Lambda Inlet
			</digest>
			<description>
				Result of the equality test: 1 if equal, 0 if not.
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				llll with duplicates removed
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Lambda Outlet 1
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Lambda Outlet 2
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Perform last operation
			</digest>
			<description>
				A bang in the first inlet causes the result of removing the duplicates from the most recently received llll to be output. <br />
				<br /> N.B.: The object is not aware of changes you make in the lambda loop.
				If you change the lambda loop, you might want to re-input the most recent llll rather than just sending a <m>bang</m>.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Remove duplicate elements
			</digest>
			<description>
				In first inlet: Duplicate elements are removed from the llll, and the resulting llll is output.
				If a lambda loop is present, couples of elements are output from the 2nd and 3rd outlets.
				If the two elements should considered equal (and as a consequence one of the two should be removed from the llll)
				the equality test should return 1 to <o>bach.thin</o>'s second inlet; otherwise, it should return 0.
				If a lambda loop is not present, the elements are tested for "standard" equality (as in <o>bach.eq</o>),
				according to the <m>matchtype</m> attribute.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="matchtype" get="1" set="1" type="int" size="1">
			<digest>
				Match Type
			</digest>
			<description>
				When set to 0, numbers with different types but equal value (i.e. 1.5 and 3/2) are considered as equal.
				When set to 1, they are considered different.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Match Type" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		A custom equality test can be provided through the lambda loop. <br />
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.intersection" />
		<seealso name="bach.diff" />
		<seealso name="bach.symdiff" />
		<seealso name="bach.union" />
		<seealso name="bach.classify" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				llll to remove duplicates from.
			</description>
		</entry>
		<entry name ="Inlet 2 (int)">
			<description>
				Lambda Inlet.
				Result of the equality test: 1 if equal, 0 if not.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				llll with duplicates removed.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Lambda Outlet 1.
			</description>
		</entry>
		<entry name ="Outlet 3 (llll)">
			<description>
				Lambda Outlet 2.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		A custom equality test can be provided through the lambda loop. <br />
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
delete, remove, duplicates, thin, lambda loop.
			</description>
		</entry>
	</misc>

</c74object>