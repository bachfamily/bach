<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.beatbox" module="bach">

	<digest>
		Box voice-wise parameters into measure-wise information
	</digest>

	<description>
		Adds a parenthesis level representing measures in a plain list of parameters.
		More precisely, it formats plain lists of <o>bach.score</o> parameters into measure-wise packets,
		according to the given time signature(s).
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach notation</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Measureinfo or bang
			</digest>
			<description>
				Set Measureinfo and trigger the output. A bang outputs the last boxed result.
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Pitches or MIDIcents
			</digest>
			<description>
				A list of pitches or cents for each voice.
				The pitches can be assigned chord-wisely (a single element
				for each chord) or note-wisely (a plain list for each chord). Thus a 2-depth or 3-depth llll is expected.
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Durations
			</digest>
			<description>
				A plain list of rational durations for each voice (thus a 2-depth llll is expected).
			</description>
		</inlet>
		<inlet id="3" type="INLET_TYPE">
			<digest>
				Velocities
			</digest>
			<description>
				A list of velocities for each voice. The velocity can be assigned chord-wisely (a single element
				for each chord) or note-wisely (a plain list for each chord). Thus a 2-depth or 3-depth llll is expected.
			</description>
		</inlet>
		<inlet id="4" type="INLET_TYPE">
			<digest>
				Ties
			</digest>
			<description>
				A list of ties for each voice (1 corresponding to a starting tie, 0 to none).
				The ties can be assigned chord-wisely (a single element for each chord) or note-wisely
				(a plain list for each chord). Thus a 2-depth or 3-depth llll is expected.
			</description>
		</inlet>
		<inlet id="5" type="INLET_TYPE">
			<digest>
				Extras
			</digest>
			<description>
				A list of extras for each voice, assigned note-wisely.
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Messages for bach.score
			</digest>
			<description>
				Unless the <m>separate</m> attribute is set, this sends
				the score gathered-syntax which construct the boxed score.
				If the <m>separate</m> attribute is set, this sends messages to score (such as "clear"
				if <m>autoclear</m> is active) and a bang to properly build the score from
				the separate parameters
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Measureinfo (in <m>separate</m> mode only)
			</digest>
			<description>
				If the <m>separate</m> attribute is set, the measureinfo is output.
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Pitches or MIDIcents (in <m>separate</m> mode only)
			</digest>
			<description>
				If the <m>separate</m> attribute is set, the cents are output.
			</description>
		</outlet>
		<outlet id="3" type="INLET_TYPE">
			<digest>
				Durations (in <m>separate</m> mode only)
			</digest>
			<description>
				If the <m>separate</m> attribute is set, the durations are output.
			</description>
		</outlet>
		<outlet id="4" type="INLET_TYPE">
			<digest>
				Velocities (in <m>separate</m> mode only)
			</digest>
			<description>
				If the <m>separate</m> attribute is set, the velocities are output.
			</description>
		</outlet>
		<outlet id="5" type="INLET_TYPE">
			<digest>
				Ties (in <m>separate</m> mode only)
			</digest>
			<description>
				If the <m>separate</m> attribute is set, the ties are output.
			</description>
		</outlet>
		<outlet id="6" type="INLET_TYPE">
			<digest>
				Extras (in <m>separate</m> mode only)
			</digest>
			<description>
				If the <m>separate</m> attribute is set, the extras are output.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="separate" optional="1" type="symbol">
			<digest>
				Separate parameters mode
			</digest>
			<description>
				Put a "separate" symbol as argument if you want to output the separate parameters (and not the bach.score gathered syntax).
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Perform the boxing operation.
			</digest>
			<description>
				Perform the boxing operation on the most recently received input data.
			</description>
		</method>
		<method name="clear">
			<arglist />
			<digest>
				Clear specific inlet
			</digest>
			<description>
				Resets the llll of a specific parameter (depending ont the inlet).
			</description>
		</method>
		<method name="clearall">
			<arglist />
			<digest>
				Clear all inlets
			</digest>
			<description>
				Resets the llll of all parameters.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				In first inlet: Sets the Measureinfo and output the boxed content. <br />
				In second inlet: Sets the Cents parameter. <br />
				In third inlet: Sets the Durations. <br />
				In fourth inlet: Sets the Velocities. <br />
				In fifth inlet: Sets the Ties. <br />
				In sixth inlet: Sets the Extras. <br /> <br />
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>[<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...]</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>[<m>numerator</m> <m>denominator</m>]</b> for standard time signatures. For instance, <b>[4 4]</b> corresponds to a 4/4 time signature. <br />
				- <b>[[<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...] <m>denominator</m>]</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>[[3 2 3] 8]</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo. <br />
				A tempo, defined for a measure of a <o>bach.score</o> has one of the following syntaxes: <br />
				- <b>[<m>tempo_value</m>]</b> will assign a quarter tempo at the beginning of the measure. For instance <b>[60]</b> will set a 1/4 = 60 tempo. <br />
				- <b>[<m>tempo_figure</m> <m>tempo_value</m>]</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>[3/8 40]</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>[<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>]</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>[3/8 40 1/4]</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>[<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>]</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>[3/8 40 1/4 1]</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>[<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...]</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>[[60] [1/4 70 1/16] [1/8 60 1/8 1] [1/8 80 3/8]]</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>[<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...]</b>.
				For instance <b>[5 [4 4] [[80] [1/4 160 1/2]]]</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> [[[4 4] [1/8 60]] [[2 4] [1/4 50 1/4 1]] [4 [4 4]] [nil [180]]]</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>[<m>parameter_name</m> <m>parameter_value</m>]</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline, 'k' = tick,
				'i' = intervoice barline only (barline is only between voice staves, not over staves). <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>[shownumber -4]</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>[boxes 1/8]</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>[boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8]</b>.
				Analogously, <b>[boxes 1/2 1/8 1/4 1/8]</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="autoclear" get="1" set="1" type="int" size="1">
			<digest>
				Autoclear
			</digest>
			<description>
				Automatically clears the score before outputting the new data.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Autoclear" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		bach.beatbox is an useful tool if you don't want to think about your data (cents, durations...) measure-wise,
		but just as a long plain sequence: you can enter the long sequence (actually, one long sequence for each voice
		you want to create) and then let beatbox make the boxing.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.beatunbox" />
		<seealso name="bach.score" />
		<seealso name="bach.quantize" />
		<seealso name="bach.score2roll" />
		<seealso name="04-Through The Looking Glass" module="bach" type="tutorial" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				Measureinfo or bang.
				Set Measureinfo and trigger the output. A bang outputs the last boxed result.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Pitches or MIDIcents.
				A list of pitches or cents for each voice.
				The pitches can be assigned chord-wisely (a single element
				for each chord) or note-wisely (a plain list for each chord). Thus a 2-depth or 3-depth llll is expected.
			</description>
		</entry>
		<entry name ="Inlet 3 (llll)">
			<description>
				Durations.
				A plain list of rational durations for each voice (thus a 2-depth llll is expected).
			</description>
		</entry>
		<entry name ="Inlet 4 (llll)">
			<description>
				Velocities.
				A list of velocities for each voice. The velocity can be assigned chord-wisely (a single element
				for each chord) or note-wisely (a plain list for each chord). Thus a 2-depth or 3-depth llll is expected.
			</description>
		</entry>
		<entry name ="Inlet 5 (llll)">
			<description>
				Ties.
				A list of ties for each voice (1 corresponding to a starting tie, 0 to none).
				The ties can be assigned chord-wisely (a single element for each chord) or note-wisely
				(a plain list for each chord). Thus a 2-depth or 3-depth llll is expected.
			</description>
		</entry>
		<entry name ="Inlet 6 (llll)">
			<description>
				Extras.
				A list of extras for each voice, assigned note-wisely.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (anything)">
			<description>
				Messages for bach.score.
				Unless the <m>separate</m> attribute is set, this sends
				the score gathered-syntax which construct the boxed score.
				If the <m>separate</m> attribute is set, this sends messages to score (such as "clear"
				if <m>autoclear</m> is active) and a bang to properly build the score from
				the separate parameters
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Measureinfo (in <m>separate</m> mode only).
				If the <m>separate</m> attribute is set, the measureinfo is output.
			</description>
		</entry>
		<entry name ="Outlet 3 (llll)">
			<description>
				Pitches or MIDIcents (in <m>separate</m> mode only).
				If the <m>separate</m> attribute is set, the cents are output.
			</description>
		</entry>
		<entry name ="Outlet 4 (llll)">
			<description>
				Durations (in <m>separate</m> mode only).
				If the <m>separate</m> attribute is set, the durations are output.
			</description>
		</entry>
		<entry name ="Outlet 5 (llll)">
			<description>
				Velocities (in <m>separate</m> mode only).
				If the <m>separate</m> attribute is set, the velocities are output.
			</description>
		</entry>
		<entry name ="Outlet 6 (llll)">
			<description>
				Ties (in <m>separate</m> mode only).
				If the <m>separate</m> attribute is set, the ties are output.
			</description>
		</entry>
		<entry name ="Outlet 7 (llll)">
			<description>
				Extras (in <m>separate</m> mode only).
				If the <m>separate</m> attribute is set, the extras are output.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		bach.beatbox is an useful tool if you don't want to think about your data (cents, durations...) measure-wise,
		but just as a long plain sequence: you can enter the long sequence (actually, one long sequence for each voice
		you want to create) and then let beatbox make the boxing.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
box, measure, parenthesis, wrap, measurewise, voicewise, format, flow, plain, measureinfo, beat.
			</description>
		</entry>
	</misc>

</c74object>