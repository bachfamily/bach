<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.primeser" module="bach" category="Math">

	<digest>
		Series of prime numbers
	</digest>

	<description>
		Returns series of prime numbers, with a minimum, maximum and optional maximum numbers of items.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
		<metadata name="tag">bach math</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Starting value
			</digest>
			<description>
				If an llll is entered, it is expected to contain: start, end, maximum number of items (see <m>llll</m> message).
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Maximum
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Maximum number of items
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Series of primes
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="minimum" optional="1" type="number">
			<digest>
				Minimum
			</digest>
			<description>
				The minimum value for the series (see <m>llll</m> message).
				Default is 1.
			</description>
		</objarg>
		<objarg name="maximum" optional="1" type="number/none">
			<digest>
				Maximum
			</digest>
			<description>
				The maximum value for the series, which can also be the <m>none</m> symbol (see <m>llll</m> message).
				Default is <m>none</m>.
			</description>
		</objarg>
		<objarg name="max_items" optional="1" type="int/none">
			<digest>
				Maximum number of items
			</digest>
			<description>
				The maximum number of items in the output llll, which can also be the <m>none</m> symbol (see <m>llll</m> message).
				Default is <m>none</m>.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Perform the last operation
			</digest>
			<description>
				A bang outputs the series of primes according to the most recently received parameters.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Set minimum, maximum, maximum number of items
			</digest>
			<description>
				In first inlet: the minimum value of the series. <br />
				In second inlet; the maximum value of the series. <br />
				In third inlet: the maximum number of items. <br />
				If the maximum is set to <m>none</m>, no maximum is considered. This is the default.
				If the maximum number of items is set to <m>none</m>, no maximum number of items is considered. The default is 1000.
				If both are set to actual values, the stronger requirement between the two is respected.
				Anyway, even in 64-bit mode no prime number bigger than 2147483647 can be output.<br />
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Set minimum, maximum, maximum number of items
			</digest>
			<description>
				In first inlet: the minimum and maximum values of the series, and the maximum number of items. <br />
				In second inlet; the maximum value of the series and the maximum number of items. <br />
				In third inlet: the maximum number of items. <br />
				If the maximum is set to <m>none</m>, no maximum is considered. This is the default.
				If the maximum number of items is set to <m>none</m>, no maximum number of items is considered. The default is 1000.
				If both are set to actual values, the stronger requirement between the two is respected.
				Anyway, even in 64-bit mode no prime number bigger than 2147483647 can be output.<br />
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		Even in 64-bit mode, no prime number bigger than 2147483647 can be output.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.factorize" />
		<seealso name="bach.prime" />
		<seealso name="bach.arithmser" />
		<seealso name="bach.geomser" />
		<seealso name="bach.recurser" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (int/llll)">
			<description>
				Starting value.
				If an llll is entered, it is expected to contain: start, end, maximum number of items (see <m>llll</m> message).
			</description>
		</entry>
		<entry name ="Inlet 2 (int)">
			<description>
				Maximum.
			</description>
		</entry>
		<entry name ="Inlet 3 (int)">
			<description>
				Maximum number of items.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Series of primes.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		Even in 64-bit mode, no prime number bigger than 2147483647 can be output.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
series, prime, number.
			</description>
		</entry>
	</misc>

</c74object>