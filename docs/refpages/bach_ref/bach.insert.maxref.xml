<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.insert" module="bach">

	<digest>
		Insert elements in an llll
	</digest>

	<description>
		Inserts elements at specified addresses of an llll.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				llll to insert the new elements in
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Addresses
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Elements to insert
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				llll with the new elements inserted
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="address" optional="1" type="llll">
			<digest>
				Default insertion address(es)
			</digest>
			<description>
				The initial address or addresses at which the insertion must be performed
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Perform last operation
			</digest>
			<description>
				Perform the insertion with the most recently received lllls.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				In first inlet: the elements received in the third inlet will be inserted in the llll.<br />
				In second inlet: the address or addresses at which the elements must be inserted.
				The syntax depends on the value of the <m>multi</m> attribute:
				if it is 0, a single address is expected; if it is 1, an llll whose sublists are separate addresses, at which separate insertions have to be performed, is expected.
				If single elements at the root level are encountered, they are treated as single-element sublist.
				This means that in the multiple insertions case the lllls <b>[1] [2 3] [4] [5]</b> and <b>1 [2 3] 4 [5]</b> are considered the same,
				and in both cases four insertions are performed.
				As a general rule, for each insertion the first inserted element will have the specified address.
				In the case of multiple insertions, these leads to some additional complexity managed through the <m>mode</m> attribute.
				Both positive and negative addresses are correctly treated,
				but the result can be hardly predictable when multiple insertions are performed mixing positive and negative addresses on a single sublist,
				or when multiple insertions are performed on a single position.<br/>
				An address is an llll providing a unique representation of the position of an element in another llll.
				It is a concept shared by many bach object.
				The address of each element of an llll's root level is simply its position counting from 1.
				The address of an element in a sublist is a list composed by the position of the element in the sublist,
				preceded by the position of the sublist in the parent llll,
				and so on up to the root level, as a sort of "path" to the element.<br />
				For instance, given the llll <b>a b c [d e [f g] h i] j k</b> the position of <b>c</b> is <b>3</b>;
				the position of <b>[d e [f g] h i]</b> is <b>4</b>;
				the position if <b>e</b> is <b>4 2</b> since to reach it it takes to go to the 4th element of the root level, which is a sublist,
				and to the 2nd element of that sublist.
				By reading the address from right to left, it can be seen that this is equivalent to saying
				that the pointed element is the 2nd of the 4th.
				Likewise, in the above llll <b>f</b> has the address <b>4 3 1</b> since it is the 1st of the 3rd of the 4th.<br />
				If an address points to a non-existing position, the necessary elements will be created as empty sublists whenever possible,
				but only in single insertion mode or in multiple insertion mode with the <m>mode</m> attribute is set to 1.
				In multiple insertion mode with the <m>mode</m> attribute set to 0, or if the element creation is not possible according to the original list structure, the given insertion is ignored.<br/>
				In third inlet: the elements to insert.
				The syntax depends on the value of the <m>multi</m> attribute:
				if it is 0, a single sequence of elements is expected;
				if it is 1, an llll whose sublists are separate sequence of elements, each to be inserted at the corresponding given address, is expected.
				If single elements at the root level are encountered, they are treated as single-element sublist.
				This means that in the multiple insertions case the lllls <b>[a] [b c] [d] [e]</b> and <b>a [b c] d [e]</b> are considered the same.
				If less sequences to insert than addresses are provided, the last sequence is repeated over and over.
				This is especially useful to insert the same sequence at many addresses, as providing the sequence only once is enough.
				If more sequences than addresses are provided, the exceeding sequences are ignored.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="mode" get="1" set="1" type="int" size="1">
			<digest>
				Multiple Insertion Mode
			</digest>
			<description>
				The <m>mode</m> attribute controls the detailed meaning of the addresses for multiple insertions.
				When set to 0 (default), the addresses refer to positions in the original llll.
				This means, e.g., that if the llll <b>[a] [b]</b> is received in the third inlet (sequences to insert),
				the llll <b>[2] [3]</b> is received in the second inlet (addresses),
				and the llll <b>10 20 30</b> is received in the left inlet (llll to perform the insertion upon),
				the result of the double insertion will be <b>10 a 20 b 30</b>, that is the addresses are computed independently
				with respect to the original llll, and the insertions are performed "right before" the specified original addresses.
				If the addresses were negative, the insertions would have been performed "right after" the specified original addresses. <br />
				If the <m>mode</m> attribute is set to 1, the addresses refer to positions in the resulting llll,
				that is each insertion will be performed so that the position of the first element of each sequence
				matches the corresponding given address in the resulting llll.
				In the above example, the resulting llll would thus be <b>10 a b 20 30</b>, so that <b>a</b> and <b>b</b>
				take the second and third position respectively.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Multiple Insertion Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="multi" get="1" set="1" type="int" size="1">
			<digest>
				Multiple Insertions
			</digest>
			<description>
				When set to 1, multiple insertions can be performed.
				This changes the syntax for the second and third inlets - see the description of the <m>llll</m> message.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Multiple Insertions" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="set" get="1" set="1" type="llll" size="1">
			<digest>
				
			</digest>
			<description>
				The <m>set</m> attribute allows setting the insertion elements.
				This is especially useful when used in the object box.
			</description>
			<attributelist>
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.subs" />
		<seealso name="bach.replace" />
		<seealso name="bach.find" />
		<seealso name="bach.nth" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				llll to insert the new elements in.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Addresses.
			</description>
		</entry>
		<entry name ="Inlet 3 (llll)">
			<description>
				Elements to insert.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				llll with the new elements inserted.
			</description>
		</entry>
	</misc>

</c74object>