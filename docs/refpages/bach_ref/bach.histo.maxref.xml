<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.histo" module="bach" kind="patcher">

	<digest>
		Build histograms
	</digest>

	<description>
		Builds an histogram starting from a list of data, returning elements along with their occurrences.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The llll to be analyzed
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				The minimum integer value to be accounted for (or "auto")
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				The maximum integer value to be accounted for (or "auto")
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The occurrences
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				The elements
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="minimum" optional="1" type="atom">
			<digest>
				The minimum integer value to be accounted for (or "auto")
			</digest>
			<description>
				You can store the minimum value as first argument (see the <m>atom</m> method for more information).
				If you store this value, <o>bach.histo</o> will work in integer mode (e.g. outputting occurrences of all
				integers between the minimum and the maximum, even if they don't show up in the list).
			</description>
		</objarg>
		<objarg name="maximum" optional="1" type="atom">
			<digest>
				The maximum integer value to be accounted for (or "auto")
			</digest>
			<description>
				You can store the maximum value as first argument (see the <m>atom</m> method for more information).
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="atom">
			<arglist />
			<digest>
				Set minimum or maximum
			</digest>
			<description>
				This method only applies for integers mode only (see arguments).
				The histogram will contain in its <m>i</m>-th entry the number of appearences of number <m>i</m>
				in the original data. Yet the user can define a minimum and a maximum value of numbers <m>i</m> to
				be searched for: in this case the histogram will have an offset.
				For instance, if minimum is set to 4, the first entry of the histogram will contain the number
				of occurrences of 4, the second one the number of occurrences of 5, and in general the <m>i</m>-the entry
				will contain the number of occurrences of <m>i</m>+3.<br />
				Also, the number of entries of the histogram will correspond to the difference between the maximum and
				the minimum, plus one.
				One can of course leave minimum and maximum as "automatic" so that the first element of the
				histogram corresponds to the minimum value of the input llll, and the last element of the histogram
				corresponds to the maximum value of the input llll. <br />
				An integer in the first inlet sets a fixed minimum, an <m>auto</m> symbol links the minimum to the
				minimum value appearing in the original data llll. <br />
				An integer in the second inlet sets a fixed maximum, an <m>auto</m> symbol links the maximum to the
				maximum value appearing in the original data llll. <br />
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Output histogram
			</digest>
			<description>
				Outputs the histogram of the most recently received reference number.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Set llll for analysis, output result
			</digest>
			<description>
				An llll in the first inlet sets the llll from which an histogram should be built.
				In default mode, the histogram will output elements from second outlet and their occurrences from leftmost outlet.
				In integer mode (see arguments), the histogram will contain in its <m>i</m>-th entry the number of occurrences of number <m>i</m>
				in the original data (also reporting 0-occurrence elements); the llll with the <m>i</m>'s is also output
				through the second outlet.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="maxdepth" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Depth
			</digest>
			<description>
				You can use a <m>maxdepth</m> attribute in order to decide until which level of depth
				the elements should be accounted for (default: -1, i.e.: elements are accounted for at any levels). <br />
				<m>maxdepth</m> sets the maximum depth level at which the operation must be performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				A value of 0 is not accepted.
				Defaults to -1, i.e. there is no limitation (stop at the innermost level).
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Depth" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="histo" />
		<seealso name="bach.iter" />
		<seealso name="bach.collect" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The llll to be analyzed.
			</description>
		</entry>
		<entry name ="Inlet 2 (int/symbol)">
			<description>
				The minimum integer value to be accounted for (or "auto").
			</description>
		</entry>
		<entry name ="Inlet 3 (int/symbol)">
			<description>
				The maximum integer value to be accounted for (or "auto").
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The occurrences.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				The elements.
			</description>
		</entry>
	</misc>

</c74object>