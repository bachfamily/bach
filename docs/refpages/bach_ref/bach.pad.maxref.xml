<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.pad" module="bach">

	<digest>
		Pad, loop or trim an llll
	</digest>

	<description>
		Pads, loops or trims an llll in order to match a given length.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The llll to be padded or trimmed
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				The output length
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				The padding element(s)
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The padded or trimmed llll
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="output_length" optional="0" type="int">
			<digest>
				Output length
			</digest>
			<description>
				The first integer argument sets the output length, i.e. the target length that
				the output llll must have.
			</description>
		</objarg>
		<objarg name="padding_elements" optional="1" type="llll">
			<digest>
				Padding element or elements
			</digest>
			<description>
				The second argument sets the element used for padding (or elements, in "Loop" <m>mode</m>).
				This can be a single symbol or integer, such as <b>0</b> or <b>foo</b>, or a complex llll of size 1, such as
				<b>[1 2 4]</b>, or - in "Loop" <m>mode</m> - any complex <m>llll</m>, from which the padding elements should be picked.
				Not setting this argument, or setting it as <b>null</b> forces <o>bach.pad</o> to repeat the
				elements of the incoming list (default).
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Repeat last operation
			</digest>
			<description>
				Returns the padding of the most recently received llll.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Sets output length
			</digest>
			<description>
				A non-negative integer in the second inlet sets the desired output length for padding or trimming.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				In first inlet: the incoming llll is padded or trimmed (accorded to the attribute values), and the result is output from the outlet.<br />
				In second inlet: the incoming llll is converted into an <m>int</m>.<br />
				In third inlet: sets the padding element (or elements, for "Loop" <m>mode</m>).
				This can be a single symbol or integer, such as <b>0</b> or <b>foo</b>, or a complex llll of size 1, such as
				<b>[1 2 4]</b>, or - in "Loop" <m>mode</m> - any complex <m>llll</m>, from which the padding elements should be picked.
				Setting <b>null</b> forces <o>bach.pad</o> to repeat the elements of the incoming list (default).
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="align" get="1" set="1" type="int" size="1">
			<digest>
				Alignment
			</digest>
			<description>
				Sets the alignment of the original llll within the padded llll. <br />
				- If alignment is 0 = <b>Left</b> (default), the padding will be done at right. <br />
				- If alignment is 1 = <b>Center</b> the padding will be equally done at left and at right
				(rounding to the right). <br />
				- If alignment is 2 = <b>Right</b>, the padding will be done at left.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Alignment" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="loopsize" get="1" set="1" type="int" size="1">
			<digest>
				Number of Elements to Repeat
			</digest>
			<description>
				Sets the number of elements to be repeated in "Loop" <m>mode</m> (has no effect in "Repeat" <m>mode</m>)
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number of Elements to Repeat" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="mode" get="1" set="1" type="int" size="1">
			<digest>
				Padding Mode
			</digest>
			<description>
				Sets the padding mode: <br />
				- <b>Repeat</b> (default) just copies a single element (the first or last element, depending on the <m>align</m> attribute) over and over,
				until the desired length has been reached (e.g.: ABCDDDDDD...); <br />
				- <b>Loop</b> copies the whole llll (or a portion of it, depending on the <m>loopsize</m> attribute) over and over, until the desired length
				has been reached. Last copy can of course be trimmed, if it overflows the desired length (e.g.: ABCDABCDABCDABCD...); <br />
				- <b>Palindrome Loop</b> is like the previous one, but reverses the loop direction at each new loop (e.g.: ABCDDCBAABCDDCBA...); <br />
				- <b>Palindrome Loop No Repetitions</b> is like the previous one, but avoids repetitions at the loop beginning or end (e.g.: ABCDCBABCDCBA...).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Padding Mode" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="roundalign" get="1" set="1" type="int" size="1">
			<digest>
				Rounding Alignment Direction
			</digest>
			<description>
				Sets the rounding direction for the specific situation where the <m>align</m> attribute is set to "Center" and
				an odd number of elements should be split into right and left padding. <br />
				- If <m>roundalign</m> is 0 = <b>Left</b> (default), one more element is given at the right padding side; <br />
				- If <m>roundalign</m> is 1 = <b>Right</b>, one more element is given at the left padding side. <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Rounding Alignment Direction" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="trim" get="1" set="1" type="int" size="1">
			<digest>
				Trim If Needed
			</digest>
			<description>
				If the <m>trim</m> attribute is set to 1 (default),
				when the output length is less than the length of the original llll, this latter
				is trimmed at output; otherwise it is output as it is.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Trim If Needed" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		If the required length is less than the original one, the llll can be trimmed, depending on the
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.length" />
		<seealso name="bach.repeat" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The llll to be padded or trimmed.
			</description>
		</entry>
		<entry name ="Inlet 2 (int)">
			<description>
				The output length.
			</description>
		</entry>
		<entry name ="Inlet 3 (anything/llll)">
			<description>
				The padding element(s).
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The padded or trimmed llll.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		If the required length is less than the original one, the llll can be trimmed, depending on the
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
repeat, size, length, trim, extend, loop.
			</description>
		</entry>
	</misc>

</c74object>