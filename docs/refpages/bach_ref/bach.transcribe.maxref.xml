<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.transcribe" module="bach">

	<digest>
		Fills a <o>bach.roll</o> according to incoming MIDI data
	</digest>

	<description>
		The purpose of <o>bach.transcribe</o> is to act as a machine which, when turned on,
		receives data containing cents, velocities and voice numbers (and optional durations),
		and properly adds in real time the notes in the
		connected <o>bach.roll</o> object.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach notation</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				1/0 integer turning recording or on
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Right factor (matrix, vector or scalar)
			</digest>
			<description>
				The transcribe data can be in the form <b><m>pitch</m> <m>velocity</m> <m>voice</m></b> (where <m>velocity</m> is greater
				than zeros for note-ons, and zero for note-offs), or in the form <b><m>pitch</m> <m>velocity</m> <m>voice</m> <m>duration_ms</m></b>
				(in which case no note-off is expected), or in <o>bach.roll</o> gathered syntax (with a <b>roll</b> symbol router).
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The recording messages for <o>bach.roll</o>
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Current time in milliseconds
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="allnotesoff">
			<arglist />
			<digest>
				Send note-off messages for all active notes
			</digest>
			<description>
				A <m>allnotesoff</m> message ends all notes currently being played.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Turn transcription on/off
			</digest>
			<description>
				A <m>1</m> in the first inlet turns the transcription on: <o>bach.transcribe</o>
				clears the connected <o>bach.roll</o> (if any) and starts expecting data from
				its second inlet, in order to add notes in the <o>bach.roll</o>. A <m>0</m> in the first
				inlet turns the transcription off (incoming dat in the second inlet has no longer effect).
			</description>
		</method>
		<method name="list">
			<arglist />
			<digest>
				Transcribe MIDI triplets/quadruplets
			</digest>
			<description>
				A <m>list</m> in the second inlet is expected to be in the form of a MIDI triplet containing three integers:
				<b><m>cents</m> <m>velocity</m> <m>voice_number</m></b>. When <m>velocity</m> is strictly positive,
				this triplet represents a note, in the voice defined by the <m>voice_number</m>, which starts in the exact
				moment the triplet has been sent, and has the introduced <m>cents</m> as pitch. In this case,
				the appropriate messages to add a note are sent to the the possibly connected <o>bach.roll</o>.
				The note duration is regularly updated (see the <m>refresh</m> attribute), until a note-off event
				is received concerning the specific note. At any new received triplets or refreshing, the current
				time is also output from the second outlet, and the screen position is refreshed (see <m>inscreenpos</m> attribute).
				Note-off events are simply represented by triplet having <m>velocity</m> zero. <br />
				For instance, a triplet <b>6000 70 1</b> adds a middle C having velocity of 70 in the first voice.
				To turn such note off, you'll need to send a note-off triplet <b>6000 0 1</b>. <br />
				If one more element is given in the third inlet (thus a MIDI quadruplet is input), such element is considered to be
				the duration of the note in milliseconds. For such note, there will be no need to send any note-off: the note
				is simply added with its complete duration as soon as the quadruplet is entered.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Transcribe whole roll
			</digest>
			<description>
				An <m>llll</m> in the <o>bach.roll</o> gathered syntax in the second inlet will be considered as a whole roll
				to be transcribed.
			</description>
		</method>
		<method name="slot">
			<arg name="slot_number_or_name" optional="0" type="int/symbol" />
			<arg name="y_value" optional="0" type="number/llll" />
			<digest>
				Record temporal slot data
			</digest>
			<description>
				Syntax: <b>slot <m>&lt;int/symbol: slot_number_or_name&gt;</m> <m>&lt;number/llll: y_value&gt;</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>slot 1 0.1</b>   <i>→ add value 0.1 to slot 1</i><br />
				• <b>slot 1 0.1 @voice 3</b>   <i>→ The same, but only for notes in voice 3</i><br />
				<br />
				Message attributes:<br />
				<m>@voice</m> (int, default: 0): Limit slot assignment to a given voice (0 = all)<br />
				<m>@interp</m> (int, default: 0): Interpolate linearly between values<br />
				<m>@prepad</m> (int, default: 0): Prepad slots when first elements come in<br />
				<br />
				A <m>slot</m> message followed by a slot number <m>N</m> and a value <m>V</m> will assume that slot <m>N</m> is a
				temporal slot with <m>temporalmode</m> "Milliseconds" and will record the value <m>V</m> as its Y value, corresponding to the 'current'
				instant. This is a way to easily transcribe continuous controllers.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="autoclear" get="1" set="1" type="int" size="1">
			<digest>
				Auto Clear
			</digest>
			<description>
				Toggles the ability to clear the <o>bach.roll</o> whenever a recording starts. Defaults to 1 (on).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Auto Clear" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="inscreenpos" get="1" set="1" type="float" size="1">
			<digest>
				Relative Record Head Position
			</digest>
			<description>
				Sets the relative position of the record head inside the screen (this is equivalent to the parameter
				used in <o>bach.roll</o>'s <m>inscreenpos</m> message). Defaults to 0.7.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Relative Record Head Position" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="logical" get="1" set="1" type="int" size="1">
			<digest>
				Use Max Logical Time
			</digest>
			<description>
				Toggles the ability to use Max logical time instead of CPU time.
				By default this is off, so that time is retrieved from the CPU clock and can be used
				to time real world events with microsecond precision
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Use Max Logical Time" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="play" get="1" set="1" type="int" size="1">
			<digest>
				Also Play
			</digest>
			<description>
				Toggles the ability to also play the <o>bach.roll</o> while recording, with a delay given by the <m>playdelay</m> attribute.
				Defaults to 0 (off).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Also Play" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="playdelay" get="1" set="1" type="float" size="1">
			<digest>
				Play Delay
			</digest>
			<description>
				Sets a delay in millisecond between the record head and the play head. Defaults to 250ms.
				Only meaningful if the <m>play</m> attribute is on.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Play Delay" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="refresh" get="1" set="1" type="float" size="1">
			<digest>
				Refresh Time
			</digest>
			<description>
				Sets the refresh time in milliseconds. Defaults to 100ms.
				Use 0 to avoid any refresh, except for when new transcribe data comes in.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Refresh Time" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="usenames" get="1" set="1" type="int" size="1">
			<digest>
				Use Names While Transcribing
			</digest>
			<description>
				Toggles the ability to use assign names to chords while transcribing, in order to allow
				a more accurate retrieval. Defaults to 0 (off).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Use Names While Transcribing" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="verbose" get="1" set="1" type="int" size="1">
			<digest>
				Post Warnings
			</digest>
			<description>
				Toggles the ability to post warning signs for incoming data
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Post Warnings" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		<o>bach.transcribe</o> is note-based: each MIDI triplets
		refers to a note. If you want, a posteriori, to align notes into chords,
		you should look at <o>bach.roll</o>'s <m>merge</m> message.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.roll" />
		<seealso name="bach.quantize" />
		<seealso name="bach.ezmidiplay" />
		<seealso name="pG" module="bach" type="tutorial" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (int)">
			<description>
				1/0 integer turning recording or on.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Right factor (matrix, vector or scalar).
				The transcribe data can be in the form <b><m>pitch</m> <m>velocity</m> <m>voice</m></b> (where <m>velocity</m> is greater
				than zeros for note-ons, and zero for note-offs), or in the form <b><m>pitch</m> <m>velocity</m> <m>voice</m> <m>duration_ms</m></b>
				(in which case no note-off is expected), or in <o>bach.roll</o> gathered syntax (with a <b>roll</b> symbol router).
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The recording messages for <o>bach.roll</o>.
			</description>
		</entry>
		<entry name ="Outlet 2 (float)">
			<description>
				Current time in milliseconds.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		<o>bach.transcribe</o> is note-based: each MIDI triplets
		refers to a note. If you want, a posteriori, to align notes into chords,
		you should look at <o>bach.roll</o>'s <m>merge</m> message.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
transcribe, write, fill, MIDI, stream, pitch, velocity, cent, midicent, voice, number, duration, insert, note, proportional.
			</description>
		</entry>
	</misc>

</c74object>