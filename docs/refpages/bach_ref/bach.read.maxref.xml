<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.read" module="bach">

	<digest>
		Read an llll from disk
	</digest>

	<description>
		Reads an llll from a file.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Read to load an llll, bang to output it
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				llll that has been loaded
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				bang when loading is completed
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(drag)">
			<arglist />
			<digest>
				Drag-and-drop file loading
			</digest>
			<description>
				The specified file is read from disk and the llll it contains is stored
				and optionally output, according to the <m>auto</m> attribute.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Output the stored llll
			</digest>
			<description>
				After an llll has been read, a bang causes it to be output.
			</description>
		</method>
		<method name="read">
			<arg name="file_name" optional="1" type="symbol" />
			<digest>
				Read an llll from disk
			</digest>
			<description>
				Syntax: <b>read <m>[&lt;symbol: file_name&gt;]</m> </b><br />				<br />
				The specified file is read from disk and the llll it contains is stored
				and optionally output, according to the <m>auto</m> attribute.
				If no file name is provided, a dialog box will open.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="auto" get="1" set="1" type="int" size="1">
			<digest>
				Output llll Automatically
			</digest>
			<description>
				When set to 1, the llll is automatically output immediately after being read from disk.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output llll Automatically" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="ignore" get="1" set="1" type="int" size="1">
			<digest>
				Ignore Categories
			</digest>
			<description>
				The <m>ignore</m> attribute allows preventing certain categories
				of elements to be interpreted according to the usual bach syntax.
				Categories are expressed by letters, according to the following table:<br />
				- <b>L</b> stands for all the open and closed parens marking llll sublists:
				if this category is set, parens and symbols containing parens
				are read just as symbols, as if they were preceded by a backtick. <br />
				- <b>l</b> stands for open and closed parens marking llll sublists,
				only if they do not appear in a symbol of their own
				(i.e., with the <b>l</b> category set,
				<b>[</b> is interpreted as the beginning of a sublist,
				whereas <b>[1</b> is interpreted just as a plain symbol,
				as opposed to what would happen normally,
				when it would mark the beginning of a sublist
				whose first element is <b>1</b>). <br />
				- <b>r</b> stands for rationals. <br />
				- <b>p</b> stands for pitches. <br />
				- <b>e</b> stands for floating-point numbers in scientific notation. <br />
				- <b>s</b> stands for the special symbols <b>nil</b> and <b>null</b>. <br />
				- <b>b</b> causes symbols beginning with a backtick
				to be interpreted with the backtick included
				(e.g., the <b>`foo</b> symbol is read as it is, including the backtick,
				as opposed to what would happen normally, when it would be read as <b>foo</b>). <br />
				- <b>a</b> stands for ignoring all the above categories.
				If it is present alongside other specifiers (e.g., <b>alp</b>), it overrides them. <br />
				- <b>-</b> stands for no category, and it is the default.
				If it is present alongside other specifiers (e.g., <b>-p</b>), it is ignored. <br />
				For example, the <m>ignore</m> attribute could be set to <b>lp</b>,
				which would cause a file containing <b>[ a001 Mahler[Bernstein].aif ]</b>
				to be read as an llll containing a sublist, containing in turn the symbols <b>a001</b> and
				<b>Mahler[Bernstein].aif</b>.
				Without setting the <m>ignore</m> attribute, the same file would be interpreted
				as an llll containing a sublist containing the pitch <b>A1</b>,
				the symbol <b>Mahler</b>,
				a further sublist only containing the symbol <b>Bernstein</b>,
				and finally the symbol <b>.aif</b>. <br />
				As a final note, it should be remarked that symbols in double quotes
				are always interpreted literally: for example, the symbol
				<b>"Mahler [Bernstein].aif"</b> would be interpreted as the single symbol
				<b>Mahler [Bernstein].aif</b> even if the <m>ignore</m> attribute is not set.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Ignore Categories" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		lllls in text and native format can be read indifferently
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.write" />
		<seealso name="bach.shelf" />
		<seealso name="bach.reg" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (read/bang)">
			<description>
				Read to load an llll, bang to output it.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				llll that has been loaded.
			</description>
		</entry>
		<entry name ="Outlet 2 (bang)">
			<description>
				bang when loading is completed.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		lllls in text and native format can be read indifferently
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
read, load, disk, file, native, text.
			</description>
		</entry>
	</misc>

</c74object>