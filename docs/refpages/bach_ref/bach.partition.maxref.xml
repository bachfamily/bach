<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.partition" module="bach" category="Math">

	<digest>
		Compute integer or set partitions
	</digest>

	<description>
		Computes the integer partition of the incoming non-negative number or the partition of the incoming set
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach math</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The number or set to be partitioned
			</digest>
			<description>
				First inlet accepts a number or a set (llll) to be partitioned,
				depending on the value of the <m>mode</m> attribute
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Partitions of the number or set
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output last obtained result
			</digest>
			<description>
				Outputs the result obtained from the most recently received input data.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Set number, output result
			</digest>
			<description>
				If the <m>mode</m> attribute is set to 0 (integer), An integer number will trigger the computation of its integer partitions
				which are subsequently output through the outlet, each wrapped in a level of parentheses,
				and in decreasing lexicographical order.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Set set, output result
			</digest>
			<description>
				If the <m>mode</m> attribute is set to 1 (set), any <m>llll</m> in the second inlet is considered as the set to be partitioned.
				Partitions are then output from the outlet, each wrapped in a level of parenthesis.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="distinct" get="1" set="1" type="int" size="1">
			<digest>
				Output Distinct Partitions Only
			</digest>
			<description>
				If <m>mode</m> is 1 (Sets), this attribute toggles the ability to only output distinct partitions of a set (in case
				some elements are repeated inside the set).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Distinct Partitions Only" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="mode" get="1" set="1" type="int" size="1">
			<digest>
				Mode
			</digest>
			<description>
				If <m>mode</m> is 0, the partition is performed on integers; if <m>mode</m> is 1 the partition is performed on sets.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		Integer partition are often displayed in Young diagrams.
		The integer partition algorithm is inspired by the iterative algorithm exposed in
		http://jeromekelleher.net/generating-integer-partitions.html
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.fact" />
		<seealso name="bach.prod" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (number/llll)">
			<description>
				The number or set to be partitioned.
				First inlet accepts a number or a set (llll) to be partitioned,
				depending on the value of the <m>mode</m> attribute
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Partitions of the number or set.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		Integer partition are often displayed in Young diagrams.
		The integer partition algorithm is inspired by the iterative algorithm exposed in
		http://jeromekelleher.net/generating-integer-partitions.html
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
compute, calculate, partition, number, young, diagram, set, subset.
			</description>
		</entry>
	</misc>

</c74object>