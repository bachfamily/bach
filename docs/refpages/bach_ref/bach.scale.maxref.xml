<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.scale" module="bach" kind="patcher" category="Math">

	<digest>
		Linearly rescale an llll
	</digest>

	<description>
		Maps an input range of llll values to an output range.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach math</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The llll to be rescaled
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Input minimum
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Input maximum
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="3" type="INLET_TYPE">
			<digest>
				Output minimum
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="4" type="INLET_TYPE">
			<digest>
				Output maximum
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The linearly rescaled llll
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="input_min" optional="1" type="number">
			<digest>
				Input minimum
			</digest>
			<description>
				First optional argument is the input minimum (default: 0.).
			</description>
		</objarg>
		<objarg name="input_max" optional="1" type="number">
			<digest>
				Input maximum
			</digest>
			<description>
				Second optional argument is the input maximum (default: 127.).
			</description>
		</objarg>
		<objarg name="output_min" optional="1" type="number">
			<digest>
				Output minimum
			</digest>
			<description>
				Third optional argument is the output minimum (default: 0.).
			</description>
		</objarg>
		<objarg name="output_max" optional="1" type="number">
			<digest>
				Output maximum
			</digest>
			<description>
				Fourth optional argument is the output maximum (default: 1.).
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output result
			</digest>
			<description>
				Performs and outputs the calculation on the most recently received input data.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Rescale llll, output result
			</digest>
			<description>
				All numbers of the llll coming from the first inlet are mapped from the given input range
				to the chosen output range (see the <m>number</m> message to define such numbers, or set them as arguments).
				The modified llll (having the same shape of the original one) is then output through the outlet.
			</description>
		</method>
		<method name="number">
			<arglist />
			<digest>
				Set minimum or maximum
			</digest>
			<description>
				A number in the second inlet sets the input minimum (lowest boundary of the input range).
				A number in the third inlet sets the input minimum (highest boundary of the input range).
				A number in the fourth inlet sets the output minimum (lowest boundary of the output range).
				A number in the fifth inlet sets the output maximum (highest boundary of the output range).
				Such numbers can be of any type (integers, floats, rationals): the result will vary accordingly.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The mapping is always linear. If elements are outside
		the input range, the result will be an extrapolation.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.autoscale" />
		<seealso name="bach.minmax" />
		<seealso name="bach.expr" />
		<seealso name="bach.interp" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The llll to be rescaled.
			</description>
		</entry>
		<entry name ="Inlet 2 (number)">
			<description>
				Input minimum.
			</description>
		</entry>
		<entry name ="Inlet 3 (number)">
			<description>
				Input maximum.
			</description>
		</entry>
		<entry name ="Inlet 4 (number)">
			<description>
				Output minimum.
			</description>
		</entry>
		<entry name ="Inlet 5 (number)">
			<description>
				Output maximum.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The linearly rescaled llll.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The mapping is always linear. If elements are outside
		the input range, the result will be an extrapolation.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
rescale, expand, stretch, linear, number, minimum, maximum, value, range, map.
			</description>
		</entry>
	</misc>

</c74object>