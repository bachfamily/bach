<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.change" module="bach" kind="patcher">

	<digest>
		Filter out repetitions of an llll
	</digest>

	<description>
		The purpose of <o>bach.change</o> is the to act like a <o>change</o> object for lllls,
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The llll to be possibly filtered
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Set incoming llll without triggering output
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The incoming llll if it changed
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				bang if the incoming llll hasn't changed
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="initial_llll" optional="1" type="llll">
			<digest>
				Set the initial stored llll
			</digest>
			<description>
				Put an llll as argument to set the initially stored llll,
				so that the same incoming llll will not pass right after the abstraction
				instantiation.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="llll">
			<arglist />
			<digest>
				Let llll through if changed
			</digest>
			<description>
				An <m>llll</m> in the first inlet is let through only if it is
				different from the previously received one. <o>bach.change</o> is initialized with
				a "null" llll, so if you send a "null" llll as first llll, it will not
				be let through. <br />
				An <m>llll</m> in second inlet is stored without triggering any output (as for the <m>set</m> message).
			</description>
		</method>
		<method name="set">
			<arg name="" optional="0" type="" />
			<arg name="llll" optional="0" type="llll" />
			<digest>
				Store llll without triggering any output
			</digest>
			<description>
				Syntax: <b>set <m>&lt;: &gt;</m> <m>&lt;llll: llll&gt;</m> </b><br />				<br />
				An <m>llll</m> after the <m>set</m> message is stored without triggering any output (as for
				lllls coming in the second inlet).
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		<o>bach.change</o> is initialized with a "null" llll, so if you send
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="change" />
		<seealso name="bach.reg" />
		<seealso name="bach.eq" />
		<seealso name="bach.neq" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The llll to be possibly filtered.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Set incoming llll without triggering output.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The incoming llll if it changed.
			</description>
		</entry>
		<entry name ="Outlet 2 (bang)">
			<description>
				bang if the incoming llll hasn't changed.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		<o>bach.change</o> is initialized with a "null" llll, so if you send
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
filter, repetition, change.
			</description>
		</entry>
	</misc>

</c74object>