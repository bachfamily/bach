<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.slot2filtercoeff" module="bach" kind="patcher">

	<digest>
		Convert a dynfilter-slot content into messages to drive <o>filtercoeff~</o>
	</digest>

	<description>
		Converts the llll content of a given slot,
		of type "dynfilter", into a list of messages for <o>line~</o> objects, which
		will be used to drive a <o>filtercoeff~</o>, according to the slot content.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach notation</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The duration of the function in milliseconds
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				The llll containing the function slot content
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				The default values of frequency, gain and Q or S
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The symbol of the filter type
			</digest>
			<description>
				This symbol should be sent into the first inlet of <o>filtercoeff~</o>.
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				The line messages concerning cutoff frequency
			</digest>
			<description>
				These messages should be sent into a <o>line~</o> object which will be connected
				to the first inlet of <o>filtercoeff~</o>, and will drive the cutoff frequency (in Hertz).
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				The line messages concerning gain
			</digest>
			<description>
				These messages should be sent into a <o>line~</o> object which will be connected
				to the second inlet of <o>filtercoeff~</o>, and will drive the gain (linear, as amplitude).
			</description>
		</outlet>
		<outlet id="3" type="INLET_TYPE">
			<digest>
				The line messages concerning Q or S
			</digest>
			<description>
				These messages should be sent into a <o>line~</o> object which will be connected
				to the third inlet of <o>filtercoeff~</o>, and will drive the Q or S parameters.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="default_filtertype" optional="1" type="symbol">
			<digest>
				Default filter type
			</digest>
			<description>
				First optional argument is a symbol which sets the initial filter type, which will be used if no content is
				defined in the slot.
			</description>
		</objarg>
		<objarg name="default_cutoff_freq" optional="1" type="float">
			<digest>
				Default cutoff frequency
			</digest>
			<description>
				Second optional argument sets the initial cutoff frequency (in Hz), which will be used if no content is
				defined in the slot.
			</description>
		</objarg>
		<objarg name="default_gain" optional="1" type="float">
			<digest>
				Default gain
			</digest>
			<description>
				Third optional argument sets the initial gain (in dB), which will be used if no content is
				defined in the slot.
			</description>
		</objarg>
		<objarg name="default_Q" optional="1" type="float">
			<digest>
				Default Q or S
			</digest>
			<description>
				Fourth optional argument sets the initial Q or S parameter, which will be used if no content is
				defined in the slot.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output messages
			</digest>
			<description>
				Outputs messages (as for the <m>float</m> message), based on the most recently received input data.
			</description>
		</method>
		<method name="float">
			<arglist />
			<digest>
				Set duration and output messages
			</digest>
			<description>
				A floating point number in the first inlet is considered as the overall duration of
				the function, and will trigger the output of the conversion of the slot content into messages
				for <o>line~</o> objects, which will drive the <o>filtercoeff~</o> object.
				The second outlet outputs the line messages for the frequency
				(the output of this <o>line~</o> object should be sent in the first inlet of <o>filtercoeff~</o>);
				the third outlet outputs the line messages for the gain
				(the output of this <o>line~</o> object should be sent in the second inlet of <o>filtercoeff~</o>);
				the fourth outlet outputs the line messages for the Q or slope
				(the output of this <o>line~</o> object should be sent in the third inlet of <o>filtercoeff~</o>).
				Also, the symbol representing the filter type is output from the first outlet (which should
				be sent into the first inlet of <o>filtercoeff~</o>. <br />
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Set slot content, set default
			</digest>
			<description>
				An llll in the second inlet is considered as the dynfilter slot content.
				Typically this is obtained from <o>bach.playkeys</o>'s slot outlets.
				See below for the precise syntax of the slot content (for <o>bach.slot2filtercoeff</o> only
				syntax for dynfilter slots is relevant). <br />
				An llll in the third inlet is expected to contain a triplet of default frequency (in Hertz),
				default gain (linear, as amplitude) and a Q or S parameter. Those will be used when no content is
				defined in the slot.
				<br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.slot2curve" />
		<seealso name="bach.slot2line" />
		<seealso name="filtercoeff~" />
		<seealso name="biquad~" />
		<seealso name="bach.roll" />
		<seealso name="bach.score" />
		<seealso name="bach.slot" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (float)">
			<description>
				The duration of the function in milliseconds.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				The llll containing the function slot content.
			</description>
		</entry>
		<entry name ="Inlet 3 (llll)">
			<description>
				The default values of frequency, gain and Q or S.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (symbol)">
			<description>
				The symbol of the filter type.
				This symbol should be sent into the first inlet of <o>filtercoeff~</o>.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				The line messages concerning cutoff frequency.
				These messages should be sent into a <o>line~</o> object which will be connected
				to the first inlet of <o>filtercoeff~</o>, and will drive the cutoff frequency (in Hertz).
			</description>
		</entry>
		<entry name ="Outlet 3 (llll)">
			<description>
				The line messages concerning gain.
				These messages should be sent into a <o>line~</o> object which will be connected
				to the second inlet of <o>filtercoeff~</o>, and will drive the gain (linear, as amplitude).
			</description>
		</entry>
		<entry name ="Outlet 4 (llll)">
			<description>
				The line messages concerning Q or S.
				These messages should be sent into a <o>line~</o> object which will be connected
				to the third inlet of <o>filtercoeff~</o>, and will drive the Q or S parameters.
			</description>
		</entry>
	</misc>

</c74object>