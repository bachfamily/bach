<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.slot2function" module="bach" kind="patcher">

	<digest>
		Convert a function-slot content into a <o>function</o> object
	</digest>

	<description>
		Converts the llll content of a given slot,
		of type "function", into a list of messages in order to build
		a Max <o>function</o> object accordingly. Slopes of slot segments are ignored.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach notation</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The llll containing the function slot content
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				The llll containing the slotinfo for the single slot
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The messages for <o>function</o>
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output messages
			</digest>
			<description>
				Outputs messages for <o>function</o>, based on the most recently received input data.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Set slot content, output messages, set slotinfo
			</digest>
			<description>
				An llll in the first inlet is considered as the function slot content, and
				will also trigger the output of the proper messages for the <o>function</o> object,
				in order for it to contain the same function which was in the function slot.
				Typically the function slot content is obtained from <o>bach.playkeys</o>'s slot outlets.
				See below for the precise syntax of the slot content (for <o>bach.slot2function</o> only
				syntax for function slots is relevant). <br />
				An llll in the second inlet is, optionally, the slotinfo concerning the incoming slot content.
				This information is handy in order to precisely know the range and domain of the slot, and to adapt the domain
				and range of the <o>function</o> obejct accordingly. What is expected is the slotinfo only regarding
				one specific slot, or even just the two specifications of <b>range</b> and <b>domain</b> (see below
				to know more about the general slotinfo syntax: for <o>bach.slot2function</o> you need to only send a single
				<b>[<m>slot_num</m> <m>SPECIFICATIONS</m>]</b> specification.) <br /> <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>slope</m>]</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>[<m>LLLL</m>]</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>[<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>]</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>[<m>x</m> <m>y</m> <m>z</m> <m>slope</m>]</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> [<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>]</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>[<m>t1</m> <m>FILTER1</m>] [<m>t2</m> <m>FILTER2</m>] [<m>t3</m> <m>FILTER3</m>]...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>articulations</m> the content must be in the form: <b><m>art1</m> <m>art2</m>...</b>, i.e. a sequence of
				articulations introduced as symbols.
				The list of the are standard available articulations as symbols is: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo3" or "trem3" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash).
				Notice that the default bach font has all the articulations glyphs; however, not all the other supported fonts do,
				in particular Boulez doesn't have a certain number of the previous articulations among its glyphs.
				If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				Articulation symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>notehead</m> the content must a single notehead symbol.
				The list of the standard available noteheads as symbols is: "default", "doublewhole", "whole", "white", "black", "diamond", "cross", "plus",
				"none", "accent", "blacksquare", "whitesquare", "square" "blacktriangle", "whitetriangle", "triangle", "blackrhombus", "whiterhombus", "rhombus".
				In <o>bach.score</o>, the "square", "triangle" and "rhombus" notehead are black or white depending on the note duration; in <o>bach.roll</o> only
				the black flavour is used.
				As for articulations, not all fonts support all symbols.
				Notehead symbols can also be retrieved by hovering on the corresponding element in the slot window. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>[<m>ROW1</m> <m>ROW2</m>...]</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The general syntax for a slotinfo llll in a notation object header is: <b>[slotinfo [<m>slot_num1</m> <m>SPECIFICATIONS1</m>] [<m>slot_num2</m> <m>SPECIFICATIONS2</m>]...]</b>,
				where the <m>slot_num</m> are the slot numbers (1 to 30), followed by their corresponding slotinfo specification. You don't need to give the information about all slots
				at input (only the one that you will use), nor the slot numbers have to be sorted in any way. On the other hand, at output, the slotinfo
				is always output for all slots, sorted in ascending order.
				Each <m>SPECIFICATIONS</m> llll has the form <b>[<m>parameter1</m> <m>content1</m>] [<m>parameter2</m> <m>content2</m>]...</b>, where
				each <m>parameter</m> is a symbol followed by some content specifying a field of the slotinfo.
				The complete list of parameters symbols and their corresponding expected content is the following one: <br />
				– <b>name</b>: expects the name you want to give to the slot (given as a unique symbol). <br />
				– <b>type</b>: expects one of the following symbols, defining the slot type: "function", "int", "float", "intlist", "floatlist", "text",
				"filelist", "llll", "spat", "togglematrix", "intmatrix", "floatmatrix", "filter, "dynfilter", "color", "3dfunction",
				"articulations", "notehead, "dynamics", "none".  <br />
				- <b>access</b>: sets the slot accessibility, and expects a symbol. Default is "readandwrite" (slot is readable and writable);
				you can also use "readonly" (slot is only readable, not writable via interface), or "none" (slot window can't even be opened, slot
				content cannot be accessed).<br />
				- <b>temporalmode</b>: sets whether the slot contains temporal information, and if so in which form.
				It expects one of the following symbols: "none" (the information is not temporal), "relative" (the information is temporal, and the X value
				of each slot item is a relative position inside the note duration, usually between 0 and 1), "milliseconds" (the information is temporal, and the X
				value of each slot item is defined as a position milliseconds with respect to the note onset). <br />
				- <b>extend</b>: toggles the ability for temporal slots to extend their content beyond the end of each corresponding note (might be also useful,
				in combination with the "milliseconds" temporalmode, in order to define continuous parameters, independently from a note duration). <br />
				– <b>range</b>: followed by two numbers, sets the minimum and maximum values the slot range (vertical axis for function and 3dfunction slots, or number
				range for number slots) may assume. <br />
				– <b>key</b>: expects the character or the ASCII value of a key to be mapped as a hotkey for the slot. <br />
				– <b>slope</b>: expects a parameter (-1 to 1, 0 = linear) to exponentially represent the displayed range values of the slot. <br />
				– <b>width</b>: expects a value determining the width of the slot window (scaled according to the object's vertical zoom). <br />
				– <b>height</b>: a value determining the height of the slot window (scaled according to the object's vertical zoom). You can also put "auto"
				if you want to leave an automatically calculated height (default). <br />
				– <b>ysnap</b>: sets, for function or 3dfunction slots, some privileged Y points to which the points will be snapped
				upon Shift+Alt+mousedrag. <br />
				– <b>zsnap</b>: sets, for 3function slots, some privileged Z points to which the points will be snapped
				upon Shift+Ctrl+Alt+mousedrag (mac). <br />
				– <b>domain</b>: followed by two numbers, for function and 3dfunction slots, replaces the standard 0 to 1 domain with any input domain (input numbers
				are minimum and maximum). <br />
				– <b>domainslope</b>: a slope (-1 to 1, 0 = linear) to exponentially rescale the domain display. <br />
				– <b>default</b>: a numeric value (for numeric slots) determining the slot default value. <br />
				– <b>representation</b>: it could expect one of the following things. 1: Symbols defining units of measurement (e.g. "Hz", "ms"...), for numeric
				slots one symbol is expected, for function slots if one symbol is given, it is applied to the Y axis, if two symbols are given they are
				applied to the X and Y axis, for 3dfunction slots up to three symbols can be given, the third one referring to the Z axis, use <b>nil</b> or
				<b>[]</b> to skip assignment for an axis. For filter and dynfilter slots, you can assign "Hz" or "cents" as unit of measurement
				and it will be used to display the cutoff frequency accordingly. 2: An enumeration list (only for int
				and intlist slots), mapping each integer to an element of this enumeration list (e.g. in an int slot from 1 to 3, a
				slot_representation "(one two three)" will display "one" at the place of 1, "two" at the place of 2, "three" at the place of 3).
				These symbols will never be output upon dump or play, they will be just displayed. 3:
				For matrix-typed slots, it can be either a llll containing the number of rows and columns, such as (3 4), or a llll containing
				the names of the rows and columns, such as ((or fee foo) (col1 col2 col3)). To give units to different axes, just list them, such as: Hz dB.
				– <b>zrange</b>: as "range", but for the Z spatial dimension (used by the 3dfunction slot: the Z dimension is the one "coming out" from the screen). <br />
				– <b>zslope</b>: as "slope", but for the Z spatial dimention (used by the 3dfunction slot). <br />
				– <b>singleslotfortiednotes</b>: (for bach.score only) tells whether tied sequences of notes have just one slot, the one corresponding
				to the first note of the sequence. <br />
				– <b>copywhensplit</b>: tells whether this slot should be copied when a note is split into a sequence of multiple notes (e.g. via quantization). <br />
				- <b>follownotehead</b>: forces to automatically modify the value of the slot depending on the notehead trimming (useful if the slot
				value is something associated to the notehead, such as the starting point for reading a sample).<br />
				<br />
				You are not obliged to input all the fields: you can give as input only the required fields.
				Also at output, only the needed fields are given (e.g. the "zrange" is only output for 3dfunction slots, and so on).
				Setting an individual field for a given will not change any other field, unless the type is changed, in which case
				a conversion on all the slots is performed (if possible, i.e. if slots are compatible) otherwise the slot data of the given slot is lost.
				While converting slots, also some other fields may be changed to default values for the new slot type. <br />
				Some more fields can be set via the slotinfo. These fields are never retrieved when the slotinfo is queried via a
				<m>dump</m> message, since they correspond to standard attribute values of the notation object: <br />
				- <b>background</b>: this should be set to 1 if one needs the slot to be constantly painted in the background or 0 otherwise.
				This information is constantly synchronized with the <m>bgslots</m> attribute. <br />
				- <b>popup</b> (except bach.slot): this should be set to 1 if one needs the slot to show up in the note+popup+menu, or to 0 otherwise.
				This information is constantly synchronized with the <m>popupmenuslots</m> attribute. <br />
				- <b>rightclick</b> (except bach.slot): this should be set to 1 if one wants that the right click (or two-fingers tap) on a note head directly
				pops up the slot window of the current slot, or to 0 otherwise.
				This information is constantly synchronized with the <m>rightclickslot</m> attribute. <br />
				- <b>linkto</b> (except bach.slot): this field defines the possible slot linkage. Slot linkage is a way to entangle some notation or
				display features to the content of a given slot. You can specify here to which feature the slot should be linked,
				via one of the following symbols: "none", "lyrics", "color", "noteheadadjust", "noteheadchar", "noteheadfont", "notesize". <br />
				<br />
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="function" />
		<seealso name="bach.slot2line" />
		<seealso name="bach.slot2curve" />
		<seealso name="bach.roll" />
		<seealso name="bach.score" />
		<seealso name="bach.slot" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The llll containing the function slot content.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				The llll containing the slotinfo for the single slot.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (list)">
			<description>
				The messages for <o>function</o>.
			</description>
		</entry>
	</misc>

</c74object>