<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.sort" module="bach">

	<digest>
		Sort an llll
	</digest>

	<description>
		Sorts an llll according to standard or custom criteria.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				llll to sort
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Lambda inlet
			</digest>
			<description>
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, if the elements coming from the lambda outlets are in the correct order,
				the return value should be 1, otherwise 0.
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Sorted llll
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Indices
			</digest>
			<description>
				The position each element of the sorted llll had in the original llll.
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Lambda Outlet 1
			</digest>
			<description>
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				If the elements output from the lambda outlets are in the correct order,
				that is if the element output from the third outlet should appear
				before the element output from the fourth outlet in the sorted llll,
				then 1 is expected in the lambda inlet; otherwise, 0 is expected.
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
			</description>
		</outlet>
		<outlet id="3" type="INLET_TYPE">
			<digest>
				Lambda Outlet 2
			</digest>
			<description>
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				If the elements output from the lambda outlets are in the correct order,
				that is if the element output from the third outlet should appear
				before the element output from the fourth outlet in the sorted llll,
				then 1 is expected in the lambda inlet; otherwise, 0 is expected.
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Perform last sort
			</digest>
			<description>
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Sort the llll
			</digest>
			<description>
				In first inlet: the llll is sorted. <br />
				If a lambda loop is present, it defines the sorting criterium:
				couples of elements are output from the 3rd and 4th outlets,
				and the lambda loop should check if they are in the correct order -
				that is, if in the sorted llll the element from the 3rd outlet should appear before the element from the 4th.
				If this is true, the lambda loop should return 1 to <o>bach.sort</o>'s second inlet; otherwise, it should return 0.
				If a lambda loop is not present, the llll is sorted according to a numeric/lexicographical criterium,
				as if a <o>bach.&lt;=</o> object was connected to the lambda outlets and inlets.
				In any case, <o>bach.sort</o>'s sorting algorithm is stable,
				meaning that two elements that are equal with respect to the sorting criterium
				will not be swapped in the sorted llll.<br />
				Besides returning the sorted llll from the first outlet,
				<o>bach.sort</o> also returns the indices of the sorted elements in the original llll from the second outlet.<br />
				In third inlet: the llll is converted into an int
				<br /> N.B.: The object is not aware of changes you make in the lambda loop.
				If you change the lambda loop, you might want to re-input the most recent llll rather than just sending a <m>bang</m>.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="by" get="1" set="1" type="llll" size="1">
			<digest>
				Keys Addresses
			</digest>
			<description>
				If the llll to be sorted is composed by sublists,
				one or more elements of each sublist can be selected to be the sorting keys through the <m>by</m> attribute.
				The value of the attribute is an llll composed by sublists, each expressing the address of one key
				with respect to its containing sublist.
				An address is an llll providing a unique representation of the position of an element in another llll.
				It is a concept shared by many bach object.
				The address of each element of an llll's root level is simply its position counting from 1.
				The address of an element in a sublist is a list composed by the position of the element in the sublist,
				preceded by the position of the sublist in the parent llll,
				and so on up to the root level, as a sort of "path" to the element.<br />
				For instance, given the llll <b>a b c [d e [f g] h i] j k</b> the position of <b>c</b> is <b>3</b>;
				the position of <b>[d e [f g] h i]</b> is <b>4</b>;
				the position if <b>e</b> is <b>4 2</b> since to reach it it takes to go to the 4th element of the root level, which is a sublist,
				and to the 2nd element of that sublist.
				By reading the address from right to left, it can be seen that this is equivalent to saying
				that the pointed element is the 2nd of the 4th.
				Likewise, in the above llll <b>f</b> has the address <b>4 3 1</b> since it is the 1st of the 3rd of the 4th.<br />
				In addition, addresses sent to bach objects can contain negative positions,
				that is positions counted from the end of the llll instead than the right.
				Negative and positive positions can be safely mixed within a single address.
				Thus, the address of the element <b>g</b> can be expressed as <b>4 3 2</b> as well as <b>4 3 -1</b> or <b>-3 -3 -1</b>.<br />
				Elements without parentheses are treated as distinct addresses. So, for example, the value
				<b>[2]</b> means that the sorting key is the second element of each sublist of the root llll-
				<b>[2] [2 3]</b> means that the first sorting key is the second element, and in case of equality
				the second sorting key is the third element of the second element of each sublist.
				<b>2 3 [2 3]</b> means that the first sorting key is the second element;
				in case of equality the second sorting key is the third element;
				and in case of further equality the third sorting key is the third element of the second element of each sublist.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Keys Addresses" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="order" get="1" set="1" type="int" size="1">
			<digest>
				Order
			</digest>
			<description>
				When set to 1, the order of the output llll is reversed:
				that is, a descending sort is performed instead that an ascending one.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Order" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.perm" />
		<seealso name="bach.scramble" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				llll to sort.
			</description>
		</entry>
		<entry name ="Inlet 2 (int/llll)">
			<description>
				Lambda inlet.
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, if the elements coming from the lambda outlets are in the correct order,
				the return value should be 1, otherwise 0.
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Sorted llll.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Indices.
				The position each element of the sorted llll had in the original llll.
			</description>
		</entry>
		<entry name ="Outlet 3 (llll)">
			<description>
				Lambda Outlet 1.
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				If the elements output from the lambda outlets are in the correct order,
				that is if the element output from the third outlet should appear
				before the element output from the fourth outlet in the sorted llll,
				then 1 is expected in the lambda inlet; otherwise, 0 is expected.
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
			</description>
		</entry>
		<entry name ="Outlet 4 (llll)">
			<description>
				Lambda Outlet 2.
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				If the elements output from the lambda outlets are in the correct order,
				that is if the element output from the third outlet should appear
				before the element output from the fourth outlet in the sorted llll,
				then 1 is expected in the lambda inlet; otherwise, 0 is expected.
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
			</description>
		</entry>
	</misc>

</c74object>