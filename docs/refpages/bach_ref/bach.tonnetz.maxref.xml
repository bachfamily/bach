<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.tonnetz" module="bach">

	<digest>
		Pitch space lattice
	</digest>

	<description>
		Lattice diagram representing the (diatonic or chromatic) space of pitches,
		generated by two intervals or via an equation.
		Each point can also have a velocity, and points can be
		selected to form chords.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach set theory</metadata>
		<metadata name="tag">bach interface</metadata>
		<metadata name="tag">U/I</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Midicents or Note Names, or a 2-depth list with interleaved Velocities
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Pitch-Classes, or a 2-depth list with interleaved Velocities
			</digest>
			<description>
				A pitch-class set is a plain collection of pitch-classes. A pitch class is nothing but the representative of a set of pitches.
				Traditionally, it corresponds to the concept of "note", once we abstract it from its octave.
				For instance, the semitonal framework (when the modulo is 12), all the C belong to the same pitch-class
				which will be named 0 = {..., C-1, C0, C1, C2, C3, C4, C5, ...}. The pitch-class 1 will be the one containing all C#'s (or Db's); pitch-class
				2 will contain all D's, and so on. One will use to name pitch class numbers from 0 to the modulo - 1: indeed, with modulo = 12, pitch-class 12 will coincide
				with pitch-class 0 (it'll be the C one octave higher). One can thus think at pitch-classes as equally spaced points on a clock, and transposing
				means rotating them on the clock. A pitch class set is thus represented just by a plain list of pitch classes, such <b>0 4 7</b>, representing the
				C major chord. Notice that this coincides with any other representation such as <b>12 4 19</b> or <b>0 -8 -5</b>, but the canonical form, where numbers
				are from 0 to the modulo-1 is always preferred. Also for pitch-class sets the order of elements is immaterial, and thus
				<b>0 4 7</b> or <b>4 0 7</b> or <b>7 4 0</b> will all represent the same set.
				On the other hand a pitch-class (as an abstract concept) can be used to represent things other than pitches,
				as for instance temporal position in a rhythmic pattern (loop) having a certain number (the modulo) of equally spaced elements.
				<br /> <br />
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Diatonic Intervals, or a 3-depth list of interlaced Diatonic Intervals and Velocities
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="3" type="INLET_TYPE">
			<digest>
				Node Coordinates, or a 3-depth list of interlaced Node Coordinates and Velocities
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="4" type="INLET_TYPE">
			<digest>
				Velocities
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="5" type="INLET_TYPE">
			<digest>
				Modulo
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Selected nodes' midicents or note names
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Selected pitch-classes
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Selected nodes' diatonic representation
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="3" type="INLET_TYPE">
			<digest>
				Selected nodes' coordinates
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="4" type="INLET_TYPE">
			<digest>
				Selected nodes' velocities
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="5" type="INLET_TYPE">
			<digest>
				Modulo
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="6" type="INLET_TYPE">
			<digest>
				Queries and notifications
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="7" type="INLET_TYPE">
			<digest>
				bang when changed via the interface
			</digest>
			<description>
				A bang is output whenever the user changes the diagram via mouse and keyboard
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(keyboard)">
			<arglist />
			<digest>
				Modify points or dump
			</digest>
			<description>
				• <m>Cmd+T</m> (mac) or <m>Ctrl+T</m> (win): Rotate tonnetz selection of 60° clockwise <br />
				• <m>Cmd+R</m> (mac) or <m>Ctrl+R</m> (win): Rotate tonnetz selection of 60° counterclockwise <br />
				• <m>Cmd+Shift+D</m> (mac) or <m>Ctrl+Shift+D</m> (win): Dump all information (as for <m>dump</m> message). <br />
				• <m>Cmd+→</m> (mac) or <m>Ctrl+→</m> (win): Transpose tonnetz selection on horizontal coordinate, at right. <br />
				• <m>Cmd+←</m> (mac) or <m>Ctrl+←</m> (win): Transpose tonnetz selection on horizontal coordinate, at left. <br />
				• <m>Cmd+↑</m> (mac) or <m>Ctrl+↑</m> (win): Transpose tonnetz selection on diagonal coordinate, up. <br />
				• <m>Cmd+↓</m> (mac) or <m>Ctrl+↓</m> (win): Transpose tonnetz selection on diagonal coordinate, down. <br />
				• <m>Esc</m>: Reset offset, setting the tonnetz center at the graphical center <br />
				• <m>Spacebar</m>: Dump all information from the "Queries and Notifications" outlet (as for <m>dumpselection</m> message). <br />
			</description>
		</method>
		<method name="(mouse)">
			<arglist />
			<digest>
				Select/deselect points, or change their velocities
			</digest>
			<description>
				• <m>click</m>: Select a point, and output <br />
				   ↪ Hold the mouse down and drag to select other points. <br />
				• <m>Alt+click</m>: Output clicked point data from the "Queries and Notifications" output, without selecting the point.
				See below to know more about the syntax. <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> (win): Deselect a point <br />
				   ↪ Hold the mouse down and drag to deselect other points. <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win): Change the velocity of a point (dragging up or down) <br />
				• <m>Cmd+mousewheel</m> (mac) or <m>Ctrl+mousewheel</m> (win): drag up/down to increase or decrease the lattice side. <br />
				   ↪ Add the <m>Shift</m> key to slow change. <br />
				• <m>Alt+Ctrl+click+drag</m> (mac) or <m>Alt+Ctrl+Shift+click+drag</m> (win): move lattice center (change offset). <br />
				When a point is clicked upon, selected or de-selected, its content is output from the "Queries and Notifications" outlet,
				having as router the <b>clicked</b> symbol, and as syntax the complete point information syntax. <br /> <br />
				The complete point information syntax is the form in which point data is output
				from the query outlet. Up to a custom initial router, it has the following form:
				<b><m>cents</m> <m>pitch-class</m> <m>WRAPPED_DIATONIC_INTERVAL_FROM_CENTER</m> <m>WRAPPED_COORDINATES</m></b>,
				where <m>WRAPPED_DIATONIC_INTERVAL_FROM_CENTER</m> is in the llll diatonic intervals syntax, and <m>WRAPPED_COORDINATES</m>
				are the coordinates to get to the tonnetz point from the tonnetz center.
				<br /> <br />
				A diatonic interval is by default characterized by a couple of integer numbers (list form of diatonic intervals): the width of the interval
				in diatonic steps, and the width of the interval in chromatic steps. The number of diatonic steps in an octave
				is always 7, while the number of chromatic steps depends on the modulo; by default, in the semitonal system, it is 12.
				In such system, for instance, an ascending major third will be represented by <b>2 4</b>, since we need 2 diatonic steps
				and 4 chromatic steps to get from the bottom to the top note. As further examples, the interval between C5 and D#5 is <b>1 3</b>,
				and the interval between E#4 and Fb5 is <b>8 11</b>. <br />
				You can usually specify the diatonic interval also by directly inputting the width of the interval in midicents.
				However this is always ambiguous, and bach will chose one of the infinite diatonic ways to interpret such interval - ideally, the
				"simplest" one: 700 is a major fifth, 300 is a minor third (and not an augmented second), and so on.
				<br /> <br />
				In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
				points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
				<br /> <br />
				The coordinate of a point of the tonnetz is the position of such point in the oblique grid created by the horizontal axis, passing
				for the tonnetz center, and the diagonal axis, at 60° counterclockwise from the horizontal one, again passing for the tonnetz center.
				Coordinates above the center and at right have positive values, below and at left have negative ones. Each point can be uniquely determined
				by the amount of steps one must take rightwards from the center (coordinate 1) and diagonlly upwards at 60° (coordinate 2) in order to
				get to the point.
				<br /> <br />
			</description>
		</method>
		<method name="add">
			<arg name="points" optional="0" type="llll" />
			<digest>
				Add points to the selection
			</digest>
			<description>
				Syntax: <b>add <m>&lt;llll: points&gt;</m> </b><br />
				Examples:<br />
				• <b>add 7100 7300</b>   <i>→ in 1st inlet, adds points with 7100 and 7300cents</i><br />
				• <b>add 5 2</b>   <i>→ in 2nd inlet, adds points with pitch classes 5 or 2</i><br />
				• <b>add [2 4]</b>   <i>→ in 3rd inlet, adds a single point points with intervals 2 diatonic steps and 4 chromatic steps</i><br />
				• <b>add [-1 -0] [-3 1]</b>   <i>→ in 4th inlet, adds two points given their coordinates</i><br />
				<br />
				Add some point to the diagram. This message is just like the standard <m>llll</m> formatted
				message, except for the fact that it has the "add" symbol router. Exactly as the <m>llll</m> message,
				it can be sent in any of the first four hot inlets, each one expecting its specific syntax (see <m>llll</m> to know more).
				If the <m>echo</m> attribute is active, the newly selected point information is also output
				from the "Queries and Notification" outlet (seventh outlet), in the complete point information syntax, having the <b>echo</b> symbol as router. <br />
				The complete point information syntax is the form in which point data is output
				from the query outlet. Up to a custom initial router, it has the following form:
				<b><m>cents</m> <m>pitch-class</m> <m>WRAPPED_DIATONIC_INTERVAL_FROM_CENTER</m> <m>WRAPPED_COORDINATES</m></b>,
				where <m>WRAPPED_DIATONIC_INTERVAL_FROM_CENTER</m> is in the llll diatonic intervals syntax, and <m>WRAPPED_COORDINATES</m>
				are the coordinates to get to the tonnetz point from the tonnetz center.
				<br /> <br />
				A diatonic interval is by default characterized by a couple of integer numbers (list form of diatonic intervals): the width of the interval
				in diatonic steps, and the width of the interval in chromatic steps. The number of diatonic steps in an octave
				is always 7, while the number of chromatic steps depends on the modulo; by default, in the semitonal system, it is 12.
				In such system, for instance, an ascending major third will be represented by <b>2 4</b>, since we need 2 diatonic steps
				and 4 chromatic steps to get from the bottom to the top note. As further examples, the interval between C5 and D#5 is <b>1 3</b>,
				and the interval between E#4 and Fb5 is <b>8 11</b>. <br />
				You can usually specify the diatonic interval also by directly inputting the width of the interval in midicents.
				However this is always ambiguous, and bach will chose one of the infinite diatonic ways to interpret such interval - ideally, the
				"simplest" one: 700 is a major fifth, 300 is a minor third (and not an augmented second), and so on.
				<br /> <br />
				In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
				points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
				<br /> <br />
				The coordinate of a point of the tonnetz is the position of such point in the oblique grid created by the horizontal axis, passing
				for the tonnetz center, and the diagonal axis, at 60° counterclockwise from the horizontal one, again passing for the tonnetz center.
				Coordinates above the center and at right have positive values, below and at left have negative ones. Each point can be uniquely determined
				by the amount of steps one must take rightwards from the center (coordinate 1) and diagonlly upwards at 60° (coordinate 2) in order to
				get to the point.
				<br /> <br />
				<br />				See also:<m>delete</m>,<m>replace</m><br />
			</description>
		</method>
		<method name="clear">
			<arglist />
			<digest>
				Clear the selection
			</digest>
			<description>
				Clear the selection on the tonnetz
				<br />				See also:<m>replace</m><br />
			</description>
		</method>
		<method name="delete">
			<arg name="points" optional="0" type="llll" />
			<digest>
				Remove points from the selection
			</digest>
			<description>
				Syntax: <b>delete <m>&lt;llll: points&gt;</m> </b><br />
				Examples:<br />
				• <b>delete 7100 7300</b>   <i>→ in 1st inlet, deletes points with 7100 and 7300cents</i><br />
				• <b>delete 5 2</b>   <i>→ in 2nd inlet, deletes points with pitch classes 5 or 2</i><br />
				• <b>delete [2 4]</b>   <i>→ in 3rd inlet, deletes a point points with intervals 2 diatonic steps and 4 chromatic steps</i><br />
				• <b>delete [-1 -0] [-3 1]</b>   <i>→ in 4th inlet, deletes two points given their coordinates</i><br />
				<br />
				Remove some points from the selection. This message is just like the standard <m>llll</m> formatted
				message, except for the fact that it has the "remove" symbol router. Exactly as the <m>llll</m> message,
				it can be sent in any of the first four hot inlets, each one expecting its specific syntax (see <m>llll</m> to know more).
				If the <m>echo</m> attribute is active, the newly deselected point information is also output
				from the "Queries and Notification" outlet (seventh outlet), in the complete point information syntax, having the <b>echo</b> symbol as router. <br />
				The complete point information syntax is the form in which point data is output
				from the query outlet. Up to a custom initial router, it has the following form:
				<b><m>cents</m> <m>pitch-class</m> <m>WRAPPED_DIATONIC_INTERVAL_FROM_CENTER</m> <m>WRAPPED_COORDINATES</m></b>,
				where <m>WRAPPED_DIATONIC_INTERVAL_FROM_CENTER</m> is in the llll diatonic intervals syntax, and <m>WRAPPED_COORDINATES</m>
				are the coordinates to get to the tonnetz point from the tonnetz center.
				<br /> <br />
				A diatonic interval is by default characterized by a couple of integer numbers (list form of diatonic intervals): the width of the interval
				in diatonic steps, and the width of the interval in chromatic steps. The number of diatonic steps in an octave
				is always 7, while the number of chromatic steps depends on the modulo; by default, in the semitonal system, it is 12.
				In such system, for instance, an ascending major third will be represented by <b>2 4</b>, since we need 2 diatonic steps
				and 4 chromatic steps to get from the bottom to the top note. As further examples, the interval between C5 and D#5 is <b>1 3</b>,
				and the interval between E#4 and Fb5 is <b>8 11</b>. <br />
				You can usually specify the diatonic interval also by directly inputting the width of the interval in midicents.
				However this is always ambiguous, and bach will chose one of the infinite diatonic ways to interpret such interval - ideally, the
				"simplest" one: 700 is a major fifth, 300 is a minor third (and not an augmented second), and so on.
				<br /> <br />
				In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
				points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
				<br /> <br />
				The coordinate of a point of the tonnetz is the position of such point in the oblique grid created by the horizontal axis, passing
				for the tonnetz center, and the diagonal axis, at 60° counterclockwise from the horizontal one, again passing for the tonnetz center.
				Coordinates above the center and at right have positive values, below and at left have negative ones. Each point can be uniquely determined
				by the amount of steps one must take rightwards from the center (coordinate 1) and diagonlly upwards at 60° (coordinate 2) in order to
				get to the point.
				<br /> <br />
				<br />				See also:<m>add</m>,<m>replace</m><br />
			</description>
		</method>
		<method name="dump">
			<arg name="selective_dump_options" optional="1" type="list" />
			<digest>
				Output all data
			</digest>
			<description>
				Syntax: <b>dump <m>[&lt;list: selective_dump_options&gt;]</m> </b><br />
				Examples:<br />
				• <b>dump</b>   <i>→ dump information from all outlets</i><br />
				• <b>dump cents</b>   <i>→ dump cents only</i><br />
				• <b>dump pitchclasses</b>   <i>→ dump pitch-classes only</i><br />
				• <b>dump coordinates</b>   <i>→ dump coordinates only</i><br />
				• <b>dump velocities</b>   <i>→ dump velocities only</i><br />
				• <b>dump intervals</b>   <i>→ dump intervals only</i><br />
				<br />
				The <m>dump</m> message sends: <br />
				- the modulo from the sixth outlet; <br />
				- all the selected points' velocities from the fifth outlet, as a plain list of integers; <br />
				- all the selected points' coordinates from the fourth outlet, as a list of depth 2 (each sublist being a couple of
				coordinates, see below); <br />
				- all the selected points' diatonic interval with respect to the tonnetz center from the third outlet, as a list of depth 2
				(each sublist being a diatonic interval in list form, see below); <br />
				- all the selected points' pitch-classes, as a plain list of integers; <br />
				- all the selected points' midicents, as a plain list of floating point values. <br />
				Moreover, if one needs to only dump specific elements, the <m>dump</m> message may also accept a list of symbols referring to them.
				Allowed symbols are: "cents", "pitchclasses", "intervals", "coordinates", "velocities", "modulo".
				For instance, <b>dump cents coordinates</b> will dump the coordinates and the midicents (always right-to-left, the order
				of the introduced arguments is irrelevant).
				<br /> <br />
				A diatonic interval is by default characterized by a couple of integer numbers (list form of diatonic intervals): the width of the interval
				in diatonic steps, and the width of the interval in chromatic steps. The number of diatonic steps in an octave
				is always 7, while the number of chromatic steps depends on the modulo; by default, in the semitonal system, it is 12.
				In such system, for instance, an ascending major third will be represented by <b>2 4</b>, since we need 2 diatonic steps
				and 4 chromatic steps to get from the bottom to the top note. As further examples, the interval between C5 and D#5 is <b>1 3</b>,
				and the interval between E#4 and Fb5 is <b>8 11</b>. <br />
				You can usually specify the diatonic interval also by directly inputting the width of the interval in midicents.
				However this is always ambiguous, and bach will chose one of the infinite diatonic ways to interpret such interval - ideally, the
				"simplest" one: 700 is a major fifth, 300 is a minor third (and not an augmented second), and so on.
				<br /> <br />
				In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
				points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
				<br /> <br />
				The coordinate of a point of the tonnetz is the position of such point in the oblique grid created by the horizontal axis, passing
				for the tonnetz center, and the diagonal axis, at 60° counterclockwise from the horizontal one, again passing for the tonnetz center.
				Coordinates above the center and at right have positive values, below and at left have negative ones. Each point can be uniquely determined
				by the amount of steps one must take rightwards from the center (coordinate 1) and diagonlly upwards at 60° (coordinate 2) in order to
				get to the point.
				<br /> <br />
			</description>
		</method>
		<method name="dumpselection">
			<arglist />
			<digest>
				Dump the selected points from the "Queries and Notifications" outlet
			</digest>
			<description>
				The <m>dumpselection</m> message will dump the selected point information from the
				"Queries and Notification" outlet in the complete point information syntax, having the <b>node</b> symbol as router. <br />
				The complete point information syntax is the form in which point data is output
				from the query outlet. Up to a custom initial router, it has the following form:
				<b><m>cents</m> <m>pitch-class</m> <m>WRAPPED_DIATONIC_INTERVAL_FROM_CENTER</m> <m>WRAPPED_COORDINATES</m></b>,
				where <m>WRAPPED_DIATONIC_INTERVAL_FROM_CENTER</m> is in the llll diatonic intervals syntax, and <m>WRAPPED_COORDINATES</m>
				are the coordinates to get to the tonnetz point from the tonnetz center.
				<br /> <br />
				A diatonic interval is by default characterized by a couple of integer numbers (list form of diatonic intervals): the width of the interval
				in diatonic steps, and the width of the interval in chromatic steps. The number of diatonic steps in an octave
				is always 7, while the number of chromatic steps depends on the modulo; by default, in the semitonal system, it is 12.
				In such system, for instance, an ascending major third will be represented by <b>2 4</b>, since we need 2 diatonic steps
				and 4 chromatic steps to get from the bottom to the top note. As further examples, the interval between C5 and D#5 is <b>1 3</b>,
				and the interval between E#4 and Fb5 is <b>8 11</b>. <br />
				You can usually specify the diatonic interval also by directly inputting the width of the interval in midicents.
				However this is always ambiguous, and bach will chose one of the infinite diatonic ways to interpret such interval - ideally, the
				"simplest" one: 700 is a major fifth, 300 is a minor third (and not an augmented second), and so on.
				<br /> <br />
				In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
				points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
				<br /> <br />
				The coordinate of a point of the tonnetz is the position of such point in the oblique grid created by the horizontal axis, passing
				for the tonnetz center, and the diagonal axis, at 60° counterclockwise from the horizontal one, again passing for the tonnetz center.
				Coordinates above the center and at right have positive values, below and at left have negative ones. Each point can be uniquely determined
				by the amount of steps one must take rightwards from the center (coordinate 1) and diagonlly upwards at 60° (coordinate 2) in order to
				get to the point.
				<br /> <br />
			</description>
		</method>
		<method name="getnodeinfo">
			<arg name="point" optional="0" type="llll" />
			<digest>
				Output the information about one of the lattice nodes
			</digest>
			<description>
				Syntax: <b>getnodeinfo <m>&lt;llll: point&gt;</m> </b><br />
				Examples:<br />
				• <b>getnodeinfo 6000</b>   <i>→ in 1st inlet, outputs information about node(s) at 6000cents</i><br />
				• <b>getnodeinfo Bb2</b>   <i>→ in 1st inlet, outputs information about node(s) with pitch Bb2</i><br />
				• <b>getnodeinfo 5</b>   <i>→ in 2nd inlet, outputs information about node(s) with pitch class 5</i><br />
				• <b>getnodeinfo 2 4</b>   <i>→ in 3rd inlet, outputs information about node(s) with interval 2 diatonic steps and 4 chromatic semitones</i><br />
				• <b>getnodeinfo 10 -4</b>   <i>→ in 4th inlet, outputs information about node(s) with coordinates 10, -4</i><br />
				<br />
				The <m>getnodeinfo</m> message outputs the information about a given
				tonnetz point from the "Queries and Notifications" outlet.
				Such point can be specified: from its midicents or note name, from its pitch-class,
				from its diatonic interval with respect to the tonnetz center, or from its coordinates in the tonnetz.
				To choose between these four different types of input syntax, just send the <m>getnodeinfo</m> message
				in the dedicate inlet (one of the first four "hot" inlets: see the <m>llll</m> method). <br />
				Depending on the <m>match</m> attribute, if more matches are found, the information about all of them is output.
				The output syntax is the complete point information syntax,
				with the router being the <m>nodeinfo</m> symbol. <br />
				The complete point information syntax is the form in which point data is output
				from the query outlet. Up to a custom initial router, it has the following form:
				<b><m>cents</m> <m>pitch-class</m> <m>WRAPPED_DIATONIC_INTERVAL_FROM_CENTER</m> <m>WRAPPED_COORDINATES</m></b>,
				where <m>WRAPPED_DIATONIC_INTERVAL_FROM_CENTER</m> is in the llll diatonic intervals syntax, and <m>WRAPPED_COORDINATES</m>
				are the coordinates to get to the tonnetz point from the tonnetz center.
				<br /> <br />
				A diatonic interval is by default characterized by a couple of integer numbers (list form of diatonic intervals): the width of the interval
				in diatonic steps, and the width of the interval in chromatic steps. The number of diatonic steps in an octave
				is always 7, while the number of chromatic steps depends on the modulo; by default, in the semitonal system, it is 12.
				In such system, for instance, an ascending major third will be represented by <b>2 4</b>, since we need 2 diatonic steps
				and 4 chromatic steps to get from the bottom to the top note. As further examples, the interval between C5 and D#5 is <b>1 3</b>,
				and the interval between E#4 and Fb5 is <b>8 11</b>. <br />
				You can usually specify the diatonic interval also by directly inputting the width of the interval in midicents.
				However this is always ambiguous, and bach will chose one of the infinite diatonic ways to interpret such interval - ideally, the
				"simplest" one: 700 is a major fifth, 300 is a minor third (and not an augmented second), and so on.
				<br /> <br />
				In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
				points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
				<br /> <br />
				The coordinate of a point of the tonnetz is the position of such point in the oblique grid created by the horizontal axis, passing
				for the tonnetz center, and the diagonal axis, at 60° counterclockwise from the horizontal one, again passing for the tonnetz center.
				Coordinates above the center and at right have positive values, below and at left have negative ones. Each point can be uniquely determined
				by the amount of steps one must take rightwards from the center (coordinate 1) and diagonlly upwards at 60° (coordinate 2) in order to
				get to the point.
				<br /> <br />
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Set the modulo (in sixth inlet)
			</digest>
			<description>
				In the sixth inlet, an <m>int</m> sets the modulo (number of points in the clock).
				In first and second inlet, an <m>int</m> is converted into an <m>llll</m>.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Set points and/or velocities (depending on inlet)
			</digest>
			<description>
				The first four (hot) inlets accepts llll determining which should be the selected points: user should
				use either one of these inlets to insert data. <br />
				The fifth inlet accepts a plain llll setting the velocities correspond to the list given in either one of
				the hot inlets. <br />
				The first inlet sets the selected points starting from their midicents values or from the note names.
				A plain llll with midicents or note names (or both) is thus expected. <br />
				The second inlet sets the selected points starting from their pitch-class. A plain list of pitch-classes
				is thus expected. <br />
				The third inlet sets the selected points starting from their diatonic interval with respect to the
				tonnetz center (see <m>center</m> attribute). An llll of depth 2, each sublist containing a diatonic
				interval, is thus expected (see below to know more about diatonic intervals syntax: only the list syntax
				can be used, not the midicent one - use the first inlet if you need to set midicents). <br />
				The fourth inlet sets the selected points starting from their coordinates inside the tonnetz (see below). <br />
				If the <m>autoclear</m> attribute is active (default), the current selection is cleared before
				performing the new one. <br />
				If the <m>echo</m> attribute is active, the newly selected or de-selected point information is also output
				from the "Queries and Notification" outlet (seventh outlet), in the complete point information syntax, having the <b>echo</b> symbol as router. <br />
				A diatonic interval is by default characterized by a couple of integer numbers (list form of diatonic intervals): the width of the interval
				in diatonic steps, and the width of the interval in chromatic steps. The number of diatonic steps in an octave
				is always 7, while the number of chromatic steps depends on the modulo; by default, in the semitonal system, it is 12.
				In such system, for instance, an ascending major third will be represented by <b>2 4</b>, since we need 2 diatonic steps
				and 4 chromatic steps to get from the bottom to the top note. As further examples, the interval between C5 and D#5 is <b>1 3</b>,
				and the interval between E#4 and Fb5 is <b>8 11</b>. <br />
				You can usually specify the diatonic interval also by directly inputting the width of the interval in midicents.
				However this is always ambiguous, and bach will chose one of the infinite diatonic ways to interpret such interval - ideally, the
				"simplest" one: 700 is a major fifth, 300 is a minor third (and not an augmented second), and so on.
				<br /> <br />
				In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
				points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
				<br /> <br />
				The coordinate of a point of the tonnetz is the position of such point in the oblique grid created by the horizontal axis, passing
				for the tonnetz center, and the diagonal axis, at 60° counterclockwise from the horizontal one, again passing for the tonnetz center.
				Coordinates above the center and at right have positive values, below and at left have negative ones. Each point can be uniquely determined
				by the amount of steps one must take rightwards from the center (coordinate 1) and diagonlly upwards at 60° (coordinate 2) in order to
				get to the point.
				<br /> <br />
				The complete point information syntax is the form in which point data is output
				from the query outlet. Up to a custom initial router, it has the following form:
				<b><m>cents</m> <m>pitch-class</m> <m>WRAPPED_DIATONIC_INTERVAL_FROM_CENTER</m> <m>WRAPPED_COORDINATES</m></b>,
				where <m>WRAPPED_DIATONIC_INTERVAL_FROM_CENTER</m> is in the llll diatonic intervals syntax, and <m>WRAPPED_COORDINATES</m>
				are the coordinates to get to the tonnetz point from the tonnetz center.
				<br /> <br />
				A diatonic interval is by default characterized by a couple of integer numbers (list form of diatonic intervals): the width of the interval
				in diatonic steps, and the width of the interval in chromatic steps. The number of diatonic steps in an octave
				is always 7, while the number of chromatic steps depends on the modulo; by default, in the semitonal system, it is 12.
				In such system, for instance, an ascending major third will be represented by <b>2 4</b>, since we need 2 diatonic steps
				and 4 chromatic steps to get from the bottom to the top note. As further examples, the interval between C5 and D#5 is <b>1 3</b>,
				and the interval between E#4 and Fb5 is <b>8 11</b>. <br />
				You can usually specify the diatonic interval also by directly inputting the width of the interval in midicents.
				However this is always ambiguous, and bach will chose one of the infinite diatonic ways to interpret such interval - ideally, the
				"simplest" one: 700 is a major fifth, 300 is a minor third (and not an augmented second), and so on.
				<br /> <br />
				In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
				points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
				<br /> <br />
				The coordinate of a point of the tonnetz is the position of such point in the oblique grid created by the horizontal axis, passing
				for the tonnetz center, and the diagonal axis, at 60° counterclockwise from the horizontal one, again passing for the tonnetz center.
				Coordinates above the center and at right have positive values, below and at left have negative ones. Each point can be uniquely determined
				by the amount of steps one must take rightwards from the center (coordinate 1) and diagonlly upwards at 60° (coordinate 2) in order to
				get to the point.
				<br /> <br />
			</description>
		</method>
		<method name="replace">
			<arg name="points" optional="0" type="llll" />
			<digest>
				Modify selection taking care of note-offs
			</digest>
			<description>
				Syntax: <b>replace <m>&lt;llll: points&gt;</m> </b><br />
				Examples:<br />
				• <b>replace</b>   <i>→ clear tonnetz and output note-offs</i><br />
				• <b>replace [0 0] [0 1] [0 2] [1 1]</b>   <i>→ in 4th inlet, set the new selected points from their coordinates, and output note-offs for previously selected ones</i><br />
				<br />
				An <m>llll</m> preceded by the <m>replace</m> symbol in any of the first four inlets
				will work like a standard <m>llll</m> with a major difference: if the <m>echo</m> mode is on,
				the echoed (note-on) information will be only given for newly-selected nodes (and not for nodes
				which were already selected), and note-off information for all deselected nodes will be also sent. <br />
				The <m>replace</m> message with no further arguments, will act like a <m>clear</m> message, but
				will also send all echoed note-off information (if <m>echo</m> mode is on. <br />)
				See <m>llll</m> method to know more.
				<br />				See also:<m>clear</m>,<m>add</m>,<m>delete</m><br />
			</description>
		</method>
		<method name="rotate">
			<arg name="steps" optional="0" type="int" />
			<digest>
				Rotate selection
			</digest>
			<description>
				Syntax: <b>rotate <m>&lt;int: steps&gt;</m> </b><br />
				Examples:<br />
				• <b>rotate 1</b>   <i>→ rotate selection of 60° (1 step) clockwise</i><br />
				• <b>rotate -2</b>   <i>→ rotate selection of 120° (2 steps) counterclockwise</i><br />
				<br />
				Rotate all the selected points in the lattice of a certain angle multiple of 60°.
				The expected argument is such multiplier (number of steps): with <b>rotate 1</b> the tonnetz is rotated counterclockwise by 60°, with
				<b>rotate 2</b> it is rotated clockwise by 120°, and so on. Negative number rotate counterclockwise.
				<br />				See also:<m>translate</m><br />
			</description>
		</method>
		<method name="translate">
			<arg name="coord1" optional="0" type="int" />
			<arg name="coord2" optional="0" type="int" />
			<digest>
				Translate selection
			</digest>
			<description>
				Syntax: <b>translate <m>&lt;int: coord1&gt;</m> <m>&lt;int: coord2&gt;</m> </b><br />
				Example: <b>translate 1 -2</b>   <i>→ move selection of a vector (1, -2)</i><br />
				<br />
				Translate all the selected points in the lattice of a certain vector, specified in the lattice coordinates.
				The expected arguments are thus the two integer coordinates for the translation.
				<br />				See also:<m>rotate</m><br />
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="autoclear" get="1" set="1" type="int" size="1">
			<digest>
				Autoclear
			</digest>
			<description>
				Toggles the ability to automatically clear the content once new data arrives in the four hot inlets.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Autoclear" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="bgcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Background Color
			</digest>
			<description>
				Diagram external background color
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="1. 1. 1. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Background Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="bordercolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Border Color
			</digest>
			<description>
				Color of the diagram border
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.2 0.2 0.2 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Border Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="center" get="1" set="1" type="llll" size="1">
			<digest>
				Diatonic Center
			</digest>
			<description>
				Sets the diatonic center pitch.
				Instead of MIDIcents (or cents), one can also instert pitches.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names are in anglo-saxon syntax ("C", "D", "E"...), and are case insentitive. Middle C is C5.
				They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>D#4</b>). <br />
				Accidentals are: <b>#</b> [sharp], <b>b</b> [flat], <b>x</b> [double sharp], <b>q</b> [quartertone sharp], <b>d</b> (quartertone flat),
				<b>^</b> [eighth-tone sharp], <b>v</b> (eighth-tone flat)
				One can also extend the accidental by setting a rational specification followed by a <b>t</b>. For instance <b>C5+1/16t</b> is
				middle C, 1/16 tone up.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="llll" size="1" value="C5" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Diatonic Center" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="echo" get="1" set="1" type="int" size="1">
			<digest>
				Echo Incoming Data
			</digest>
			<description>
				Toggles the ability to automatically reoutput incoming data from "Queries and Notifications" outlet
				(seventh outlet) once it comes in from one of the hot inlets. The syntax used is the complete point information syntax,
				having the <b>echo</b> symbol as router. <br />
				The complete point information syntax is the form in which point data is output
				from the query outlet. Up to a custom initial router, it has the following form:
				<b><m>cents</m> <m>pitch-class</m> <m>WRAPPED_DIATONIC_INTERVAL_FROM_CENTER</m> <m>WRAPPED_COORDINATES</m></b>,
				where <m>WRAPPED_DIATONIC_INTERVAL_FROM_CENTER</m> is in the llll diatonic intervals syntax, and <m>WRAPPED_COORDINATES</m>
				are the coordinates to get to the tonnetz point from the tonnetz center.
				<br /> <br />
				A diatonic interval is by default characterized by a couple of integer numbers (list form of diatonic intervals): the width of the interval
				in diatonic steps, and the width of the interval in chromatic steps. The number of diatonic steps in an octave
				is always 7, while the number of chromatic steps depends on the modulo; by default, in the semitonal system, it is 12.
				In such system, for instance, an ascending major third will be represented by <b>2 4</b>, since we need 2 diatonic steps
				and 4 chromatic steps to get from the bottom to the top note. As further examples, the interval between C5 and D#5 is <b>1 3</b>,
				and the interval between E#4 and Fb5 is <b>8 11</b>. <br />
				You can usually specify the diatonic interval also by directly inputting the width of the interval in midicents.
				However this is always ambiguous, and bach will chose one of the infinite diatonic ways to interpret such interval - ideally, the
				"simplest" one: 700 is a major fifth, 300 is a minor third (and not an augmented second), and so on.
				<br /> <br />
				In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
				points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
				<br /> <br />
				The coordinate of a point of the tonnetz is the position of such point in the oblique grid created by the horizontal axis, passing
				for the tonnetz center, and the diagonal axis, at 60° counterclockwise from the horizontal one, again passing for the tonnetz center.
				Coordinates above the center and at right have positive values, below and at left have negative ones. Each point can be uniquely determined
				by the amount of steps one must take rightwards from the center (coordinate 1) and diagonlly upwards at 60° (coordinate 2) in order to
				get to the point.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Echo Incoming Data" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="embed" get="1" set="1" type="int" size="1">
			<digest>
				Save Data With Patcher
			</digest>
			<description>
				Toggles the ability to embed the data as a part of the patch, when this latter is saved.
				The default behaviour is 1 (content is saved).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Save Data With Patcher" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="generators" get="1" set="1" type="llll" size="1">
			<digest>
				Generators As Diatonic Intervals
			</digest>
			<description>
				Sets the generating diatonic intervals for the two main directions (the horizontal, and the
				one rotated by 60° counterclockwise). An additional third element in the diatonic list syntax will be considered as a custom frequency ratio
				associated with the generator. <br />
				A diatonic interval is by default characterized by a couple of integer numbers (list form of diatonic intervals): the width of the interval
				in diatonic steps, and the width of the interval in chromatic steps. The number of diatonic steps in an octave
				is always 7, while the number of chromatic steps depends on the modulo; by default, in the semitonal system, it is 12.
				In such system, for instance, an ascending major third will be represented by <b>2 4</b>, since we need 2 diatonic steps
				and 4 chromatic steps to get from the bottom to the top note. As further examples, the interval between C5 and D#5 is <b>1 3</b>,
				and the interval between E#4 and Fb5 is <b>8 11</b>. <br />
				You can usually specify the diatonic interval also by directly inputting the width of the interval in midicents.
				However this is always ambiguous, and bach will chose one of the infinite diatonic ways to interpret such interval - ideally, the
				"simplest" one: 700 is a major fifth, 300 is a minor third (and not an augmented second), and so on.
				<br /> <br />
				In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
				points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Generators As Diatonic Intervals" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="inscreenonly" get="1" set="1" type="int" size="1">
			<digest>
				Handle Displayed Points Only
			</digest>
			<description>
				Toggles the ability to only select points displayed inside the screen.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Handle Displayed Points Only" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="label" get="1" set="1" type="int" size="1">
			<digest>
				Label Type
			</digest>
			<description>
				Sets the displayed content in each tonnetz point:
				<m>Note Names</m>: Just the note name; <br />
				<m>Note Names And Octave</m>: As the previous one, but also with the octave number; <br />
				<m>Cents</m>: The pitch in midicents; <br />
				<m>Diatonic Intervals</m>: The diatonic interval with respect to the tonnetz center; <br />
				<m>Frequency Ratios</m>: The frequency ratio with respect to the tonnetz center; <br />
				<m>Coordinates</m>: The coordinates of the point in the tonnetz. <br /> <br />
				A diatonic interval is by default characterized by a couple of integer numbers (list form of diatonic intervals): the width of the interval
				in diatonic steps, and the width of the interval in chromatic steps. The number of diatonic steps in an octave
				is always 7, while the number of chromatic steps depends on the modulo; by default, in the semitonal system, it is 12.
				In such system, for instance, an ascending major third will be represented by <b>2 4</b>, since we need 2 diatonic steps
				and 4 chromatic steps to get from the bottom to the top note. As further examples, the interval between C5 and D#5 is <b>1 3</b>,
				and the interval between E#4 and Fb5 is <b>8 11</b>. <br />
				You can usually specify the diatonic interval also by directly inputting the width of the interval in midicents.
				However this is always ambiguous, and bach will chose one of the infinite diatonic ways to interpret such interval - ideally, the
				"simplest" one: 700 is a major fifth, 300 is a minor third (and not an augmented second), and so on.
				<br /> <br />
				In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
				points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
				<br /> <br />
				The coordinate of a point of the tonnetz is the position of such point in the oblique grid created by the horizontal axis, passing
				for the tonnetz center, and the diagonal axis, at 60° counterclockwise from the horizontal one, again passing for the tonnetz center.
				Coordinates above the center and at right have positive values, below and at left have negative ones. Each point can be uniquely determined
				by the amount of steps one must take rightwards from the center (coordinate 1) and diagonlly upwards at 60° (coordinate 2) in order to
				get to the point.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Label Type" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="match" get="1" set="1" type="int" size="1">
			<digest>
				When Adding Points Select
			</digest>
			<description>
				When a point is selected by message, the request might be ambiguous - for instance, one might
				ask to select a point having pitch-class 1, or midicents 6200, which can correspond to multiple points in the tonnets.
				The <m>match</m> attribute tells which point should be selected in such occasion: <br />
				- <m>All Matches</m>: Select all points matching the request; <br/>
				- <m>Most Central Match</m>: Only select the match being nearest to the tonnetz center; <br/>
				- <m>Nearest Melodical Match</m>: Only select the match being nearest to the last selected point; <br/>
				- <m>Smart</m> (default): Only select the match being nearest to the last selected point, if it is displayed inside the screen,
				otherwise choose the nearest one being inside the displayed portion of tonnetz.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="3" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="When Adding Points Select" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="mode" get="1" set="1" type="int" size="1">
			<digest>
				Lattice Type
			</digest>
			<description>
				Sets the type of lattice: <br />
				- <m>Just Intonation Infinite Lattice</m> (0): Infinite lattice generated by just intervals
				(or by custom frequency ratios, if a third element is given in the generators); <br />
				- <m>Equally Tempered Infinite Lattice</m> (1): Infinite lattice with dinstinct enharmonically equivalent notes, but with equally tempered midicents; <br />
				- <m>Equally Tempered Wrapped Lattice</m> (2): All enharmonically equivalent notes are named in the same way. <br />
				- <m>Pitch Surface</m> (3): The pitch of each node is defined via an equation (see <m>surface</m> attribute).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Lattice Type" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="modulo" get="1" set="1" type="int" size="1">
			<digest>
				Modulo
			</digest>
			<description>
				Modulo of the diagram. <br />
				In the standard framework, the modulo is the number of subdivision of the octave (represented as a circle). The modulo is thus the number of
				points in this circle. The default and most common modulo is 12 (corresponding to semitonal grid). Modulo 24 is the quartertone grid, and so on.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Value" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="12" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Modulo" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="offset" get="1" set="1" type="float_array" size="0">
			<digest>
				Center Offset
			</digest>
			<description>
				Sets the center offset in lattice coordinates.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float_array" size="0" value="0. 0." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Center Offset" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="outputnotenames" get="1" set="1" type="int" size="1">
			<digest>
				Output Note Names On Dump
			</digest>
			<description>
				Toggles the ability to output note names from first inlet, instead of midicents, when a <m>dump</m> message is sent.
				(or a dump is required from keyboard combinations).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Note Names On Dump" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="pointbordercolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Point Border Color
			</digest>
			<description>
				Color of each point's outline
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Point Border Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="pointinnercolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Point Inner Color
			</digest>
			<description>
				Color of the inner part of each point.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="1. 1. 1. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Point Inner Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="pointlinewidth" get="1" set="1" type="float" size="1">
			<digest>
				Point Line Width
			</digest>
			<description>
				Width of the line of each point's tonnetz, in pixels
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Point Line Width" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="pointradius" get="1" set="1" type="float" size="1">
			<digest>
				Point Radius
			</digest>
			<description>
				Radius of each tonnetz point in pixels
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="16." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Point Radius" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="purelydiatonic" get="1" set="1" type="int" size="1">
			<digest>
				Purely Diatonic
			</digest>
			<description>
				s If set, forces the tonnetz generators to be purely diatonic: the chromatic steps of the <m>generators</m> are ignored, and instead a default interval sequence (scale)
				is used (see <m>scaleintervals</m> and <m>scalefreqratios</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Purely Diatonic" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="scalefreqratios" get="1" set="1" type="llll" size="1">
			<digest>
				Diatonic Scale Frequency Ratios
			</digest>
			<description>
				s If <m>purelydiatonic</m> is active, this specifies the frequency intervals related to the current scale steps.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Diatonic Scale Frequency Ratios" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="scaleintervals" get="1" set="1" type="llll" size="1">
			<digest>
				Diatonic Scale Intervals
			</digest>
			<description>
				s If <m>purelydiatonic</m> is active, this specifies the current scale, as a sequence of intervals in midicents.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Diatonic Scale Intervals" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="selectedlinewidth" get="1" set="1" type="float" size="1">
			<digest>
				Selected Nodes Line Width
			</digest>
			<description>
				Width of the line linking all selected points together, in pixels
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="2." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Selected Nodes Line Width" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="selectedpointbordercolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Selected Point Border Color
			</digest>
			<description>
				Color of the selected point's outline
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.54 0.28 0.28 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Selected Point Border Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="selectedpointinnercolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Selected Point Inner Color
			</digest>
			<description>
				Color of the inner part of a selected point.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.85 0.65 0.65 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Selected Point Inner Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="selectedtriangleinnercolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Selected Triangle Inner Color
			</digest>
			<description>
				Color of the inner part of a selected triangle.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.7 0.16 0.173 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Selected Triangle Inner Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="showfocus" get="1" set="1" type="int" size="1">
			<digest>
				Show Focus
			</digest>
			<description>
				Show that the object has the focus by increasing the width of the border.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Focus" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showvelocity" get="1" set="1" type="int" size="1">
			<digest>
				Show Velocity
			</digest>
			<description>
				Attribute deciding how the velocity of a point must be shown:
				<m>None</m>: velocity must be graphically ignored<br />
				<m>Colorscale</m>: by changing the lightness of the point inner color<br />
				<m>Colorspectrum</m>: by changing the point inner color over a spectrum of colors (red to blue) <br />
				<m>Circle Size</m>: by changing the point point circle size
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Velocity" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="side" get="1" set="1" type="float" size="1">
			<digest>
				Triangle Side
			</digest>
			<description>
				Side of each tonnetz triangle in pixels
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="50." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Triangle Side" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="surface" get="1" set="1" type="symbol" size="1">
			<digest>
				Surface Equation
			</digest>
			<description>
				s Sets the surface equation if <m>mode</m> is 3 ("Pitch Surface"). Use <m>x</m> and <m>y</m> as integer variables
				for the two main directions.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="symbol" size="1" value="\" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Surface Equation" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="textcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Text Color
			</digest>
			<description>
				Color of the text in the diagram
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Text Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="tonnetzcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Tonnetz Color
			</digest>
			<description>
				Color of the tonnetz diagram
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.5 0.5 0.5 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Tonnetz Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="tonnetzlinewidth" get="1" set="1" type="float" size="1">
			<digest>
				Tonnetz Line Width
			</digest>
			<description>
				Width of the line of the main tonnetz in the diagram, in pixels
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Tonnetz Line Width" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="zoom" get="1" set="1" type="float" size="1">
			<digest>
				Zoom %
			</digest>
			<description>
				Sets the global zoom factor, as a percentage. This zoom also affects all other graphical parameters, such as circle size, text font size...
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="100." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Zoom %" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		<o>bach.tonnetz</o> implement the Tonnetz, which is a concept
		originally developed by Leonard Euler, and then subsequentely
		used by Riemannian music theory.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.circle" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				Midicents or Note Names, or a 2-depth list with interleaved Velocities.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Pitch-Classes, or a 2-depth list with interleaved Velocities.
				A pitch-class set is a plain collection of pitch-classes. A pitch class is nothing but the representative of a set of pitches.
				Traditionally, it corresponds to the concept of "note", once we abstract it from its octave.
				For instance, the semitonal framework (when the modulo is 12), all the C belong to the same pitch-class
				which will be named 0 = {..., C-1, C0, C1, C2, C3, C4, C5, ...}. The pitch-class 1 will be the one containing all C#'s (or Db's); pitch-class
				2 will contain all D's, and so on. One will use to name pitch class numbers from 0 to the modulo - 1: indeed, with modulo = 12, pitch-class 12 will coincide
				with pitch-class 0 (it'll be the C one octave higher). One can thus think at pitch-classes as equally spaced points on a clock, and transposing
				means rotating them on the clock. A pitch class set is thus represented just by a plain list of pitch classes, such <b>0 4 7</b>, representing the
				C major chord. Notice that this coincides with any other representation such as <b>12 4 19</b> or <b>0 -8 -5</b>, but the canonical form, where numbers
				are from 0 to the modulo-1 is always preferred. Also for pitch-class sets the order of elements is immaterial, and thus
				<b>0 4 7</b> or <b>4 0 7</b> or <b>7 4 0</b> will all represent the same set.
				On the other hand a pitch-class (as an abstract concept) can be used to represent things other than pitches,
				as for instance temporal position in a rhythmic pattern (loop) having a certain number (the modulo) of equally spaced elements.
				<br /> <br />
			</description>
		</entry>
		<entry name ="Inlet 3 (llll)">
			<description>
				Diatonic Intervals, or a 3-depth list of interlaced Diatonic Intervals and Velocities.
			</description>
		</entry>
		<entry name ="Inlet 4 (llll)">
			<description>
				Node Coordinates, or a 3-depth list of interlaced Node Coordinates and Velocities.
			</description>
		</entry>
		<entry name ="Inlet 5 (llll)">
			<description>
				Velocities.
			</description>
		</entry>
		<entry name ="Inlet 6 (int)">
			<description>
				Modulo.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Selected nodes' midicents or note names.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Selected pitch-classes.
			</description>
		</entry>
		<entry name ="Outlet 3 (llll)">
			<description>
				Selected nodes' diatonic representation.
			</description>
		</entry>
		<entry name ="Outlet 4 (llll)">
			<description>
				Selected nodes' coordinates.
			</description>
		</entry>
		<entry name ="Outlet 5 (llll)">
			<description>
				Selected nodes' velocities.
			</description>
		</entry>
		<entry name ="Outlet 6 (llll)">
			<description>
				Modulo.
			</description>
		</entry>
		<entry name ="Outlet 7 (llll)">
			<description>
				Queries and notifications.
			</description>
		</entry>
		<entry name ="Outlet 8 (bang)">
			<description>
				bang when changed via the interface.
				A bang is output whenever the user changes the diagram via mouse and keyboard
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		<o>bach.tonnetz</o> implement the Tonnetz, which is a concept
		originally developed by Leonard Euler, and then subsequentely
		used by Riemannian music theory.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
tonnetz, interval, lattice, hexagone, triad, generator, just intonation, rotate, shift, pitch-class, set, coordinate, modulo, microtone, select.
			</description>
		</entry>
	</misc>

</c74object>