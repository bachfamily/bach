<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.keys" module="bach">

	<digest>
		Route an llll according to specific keys
	</digest>

	<description>
		Routes an llll and its sublists according to specific keys.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Found match for the corresponding key
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				bang if no match is found
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="keys" optional="0" type="anything">
			<digest>
				Keys
			</digest>
			<description>
				The keys to look for.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Perform last operation
			</digest>
			<description>
				The keys are searched for in the most recently received llll.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Search the llll for the specified keys
			</digest>
			<description>
				The first elements of the llll and all its sublists are examined, traversing the llll depth-first as in <o>bach.iter</o>.
				When a first element is found to match one of <o>bach.keys</o>'s arguments (the "keys"),
				the corresponding llll is output, with or without the key according to the <m>keep</m> attribute,
				and that key is no further looked for.<br />
				Anyway, all the found lllls are output right-to-left, according to their order in <o>bach.keys</o>'s arguments
				and regardless of their positions in the original llll.
				In case of multiple possible matches, the first matching llll that is found is output.
				If no match is found for any key, a bang is output from the rightmost outlet.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="depthreject" get="1" set="1" type="int" size="1">
			<digest>
				Depth Reject
			</digest>
			<description>
				When set to 1, the search depth range set through the <m>mindepth</m> and <m>maxdepth</m> attributes is inverted,
				meaning that the specified depth range is excluded from the search, rather than included.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Depth Reject" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="keep" get="1" set="1" type="int" size="1">
			<digest>
				Keep
			</digest>
			<description>
				When set to 1, the key for each output llll is not removed.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Keep" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="maxdepth" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Depth
			</digest>
			<description>
				<m>maxdepth</m> sets the maximum depth level at which the operation must be performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				A value of 0 is not accepted.
				Defaults to -1, i.e. there is no limitation (stop at the innermost level).
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Depth" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="mindepth" get="1" set="1" type="int" size="1">
			<digest>
				Minimum Depth
			</digest>
			<description>
				<m>mindepth</m> sets the minimum depth level at which the operation must be performed.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				A value of 0 is not accepted.
				Defaults to 1, i.e. there is no limitation.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Minimum Depth" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="nullmode" get="1" set="1" type="int" size="1">
			<digest>
				Null Mode
			</digest>
			<description>
				When set to 1, if no match was found for a given key <b>null</b> is output from the corresponding outlet.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Null Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The usefulness of <o>bach.keys</o> is twofold:
		it allows treating an llll as an associative array, and it allows routing lllls based upon their first elements.
		It is very commonly used in conjunction with <o>bach.score</o> and <o>bach.roll</o>'s slots,
		as well as in <o>bach.constraint</o>'s lambda loop.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.find" />
		<seealso name="bach.keychain" />
		<seealso name="bach.score" />
		<seealso name="bach.roll" />
		<seealso name="bach.constraints" />
	</seealsolist>

	<misc name = "Output">
		<entry name ="Outlets 1, 2, 3... (llll)">
			<description>
				Found match for the corresponding key.
			</description>
		</entry>
		<entry name ="The last Outlet (bang)">
			<description>
				bang if no match is found.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The usefulness of <o>bach.keys</o> is twofold:
		it allows treating an llll as an associative array, and it allows routing lllls based upon their first elements.
		It is very commonly used in conjunction with <o>bach.score</o> and <o>bach.roll</o>'s slots,
		as well as in <o>bach.constraint</o>'s lambda loop.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
key, router, route, sublist, element, retrieve.
			</description>
		</entry>
	</misc>

</c74object>