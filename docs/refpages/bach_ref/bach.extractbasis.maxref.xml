<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.extractbasis" module="bach">

	<digest>
		Find linearly independent vectors
	</digest>

	<description>
		Extracts a set of linearly independent vectors from an incoming list of vectors.
		Depending on its attributes, it can also transform the vectors so that they be orthogonal and/or unitary.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach matrix calculus</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The original vectors
			</digest>
			<description>
				This is expected to be a list of plain lists, where each vector corresponds to a sublist.
				such as <b>[0 0 1] [0 1 1] [0 2 0] [1 2 1]</b>.
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The extracted set of independent vectors
			</digest>
			<description>
				This will be a list of plain lists, where each vector corresponds to a sublist.
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				bang if extraction failed
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Perform the basis extraction
			</digest>
			<description>
				Perform the basis extraction on the most recently received input data.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Find eigenvalues and eigenvectors of incoming matrix
			</digest>
			<description>
				The object outputs the eigenvalues and the eigenvectors of the incoming matrix. <br />
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>[1 0 0] [0 1 0] [0 0 1]</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="makeorthogonal" get="1" set="1" type="int" size="1">
			<digest>
				Make Orthogonal
			</digest>
			<description>
				Flag to tell if vectors should also be made orthogonal.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Make Orthogonal" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="makeunitary" get="1" set="1" type="int" size="1">
			<digest>
				Make Unitary
			</digest>
			<description>
				Flag to tell if vectors should also be made unitary (normalized).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Make Unitary" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The algorithm used to extract the vectors is the Gauss elimination. Gram-Schmidt is used to make
		vectors orthogonal.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.gausselim" />
		<seealso name="bach.linearsolve" />
		<seealso name="bach.ker" />
		<seealso name="bach.im" />
		<seealso name="16-Into The Matrix" module="bach" type="tutorial" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The original vectors.
				This is expected to be a list of plain lists, where each vector corresponds to a sublist.
				such as <b>[0 0 1] [0 1 1] [0 2 0] [1 2 1]</b>.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The extracted set of independent vectors.
				This will be a list of plain lists, where each vector corresponds to a sublist.
			</description>
		</entry>
		<entry name ="Outlet 2 (bang)">
			<description>
				bang if extraction failed.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The algorithm used to extract the vectors is the Gauss elimination. Gram-Schmidt is used to make
		vectors orthogonal.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
extract, find, basis, vector, orthogonal, unitary, linear independence.
			</description>
		</entry>
	</misc>

</c74object>