<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.float2rat" module="bach" category="Math">

	<digest>
		Approximate a floating point number with a rational number
	</digest>

	<description>
		Approximates a floating point number with a rational number, within
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach math</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The incoming llll of numbers
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Approximated llll
			</digest>
			<description>
				The llll with the floating point numbers having been approximated to rationals.
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Errors
			</digest>
			<description>
				The llll containing errors of approximated elements with respect to the original elements
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output result
			</digest>
			<description>
				Output the result calculated on the most recently received input llll.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Convert floating point numbers to rationals, output result
			</digest>
			<description>
				The object converts any floating point number of the incoming <m>llll</m> into a ragional
				number, with the current preferences determined by the attributes. The result is then output
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="adaptive" get="1" set="1" type="int" size="1">
			<digest>
				Adaptive Tolerance
			</digest>
			<description>
				Toggles the ability for the tolerance to be adaptive.
				If this flag is on, the value set in the <m>tolerance</m> attribute will be divided by the denominator
				of the candidate approximation. For instance, if <m>tolerance</m> is 0.01 and the candidate is
				7/8, the actual tolerance will be 0.01/8 = 0.00125.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Adaptive Tolerance" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="algorithm" get="1" set="1" type="int" size="1">
			<digest>
				Algorithm
			</digest>
			<description>
				Sets the algorithm for the approximation: <br />
				- Fixed Denominator: The <m>maxden</m> attribute is used as a fixed denominator, and the
				approximated rational will have such denominator (up to rational reduction). This algorithm
				is the least precise, yet by far the fastest, and should be used when extremely fast conversion is required. <br />
				- Within Tolerance: All the possibilities up to <m>maxden</m> are considered, but as soon as a solution whose error
				is less than the <m>tolerance</m> is found, it is output, and the algorithm stops.
				- Smart Tolerance: As the previous one, but the tolerance inserted is a ratio of the considered nominal fraction.
				For instance, if approximating with a 4 denominator, with tolerance equal to 0.2, then the actual tolerance will be
				0.2 * 1/4 = 0.05, and so on. This algorithm is thus adaptive: the tolerance depends on the considered approximation.
				- Best Match: All the possibilities up to <m>maxden</m> are considered, having the correct <m>tolerance</m>, and
				the one with the lowest error is output.
				- SmartÂ Permanence: All the possibilities up to <m>maxden</m> are considered, having the correct <m>tolerance</m>, and
				the output one is not in general the one with the lowest error, but the one which "stays the most" in the sequence
				of converging fractions. More specifically, a sequence of converging fraction \f$r_i\f$ with increasing denominators is
				produced for any incoming floating point number, and the permanence \f$p_i\f$ of the fraction \f$r_i\f$ is given by
				\f$p_i = den(r_{i+1}) - den(r_i)\f$, where "den" denotes the denominator of the fraction in lowest terms.
				This somehow tells "how preciser" should we get to increase the precision of a given approximation. The idea is that
				the higher this permanence is, the most "natural" the approximation would be. We give to each approximation \f$r_i\f$
				a weight \f$w_i = log(p_i)/log(den(r_i))\f$, and we output the solution having the highest weight.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Algorithm" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="direction" get="1" set="1" type="int" size="1">
			<digest>
				Rounding Direction
			</digest>
			<description>
				Sets the rounding direction for the approximations: <br />
				0 (default): round to nearest; <br />
				1: round up; <br />
				2: round down.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Rounding Direction" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="maxden" get="1" set="1" type="atom" size="1">
			<digest>
				Maximum Denominator
			</digest>
			<description>
				Sets the maximum allowed denominator for the rational approximations.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Denominator" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="tolerance" get="1" set="1" type="atom" size="1">
			<digest>
				Error Tolerance
			</digest>
			<description>
				Sets the maximum allowed error between the approximated values and the original ones.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Error Tolerance" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The object supports multiple algorithms: have a look at the <m>algorithm</m> attribute
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.expr" />
		<seealso name="bach.ratnum" />
		<seealso name="bach.quantize" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The incoming llll of numbers.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Approximated llll.
				The llll with the floating point numbers having been approximated to rationals.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Errors.
				The llll containing errors of approximated elements with respect to the original elements
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The object supports multiple algorithms: have a look at the <m>algorithm</m> attribute
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
convert, floating point, rational, number, approximate, threshold, denominator, error.
			</description>
		</entry>
	</misc>

</c74object>